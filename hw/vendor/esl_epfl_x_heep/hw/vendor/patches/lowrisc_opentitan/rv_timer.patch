diff --git a/hw/ip/rv_timer/data/rv_timer.hjson b/hw/ip/rv_timer/data/rv_timer.hjson
index 8a41a6863..b00f10a57 100644
--- a/hw/ip/rv_timer/data/rv_timer.hjson
+++ b/hw/ip/rv_timer/data/rv_timer.hjson
@@ -15,12 +15,15 @@
     { name: "timer_expired_0_0",
       desc: "raised if the timer 0_0 expired (mtimecmp >= mtime)"
     },
+    { name: "timer_expired_1_0",
+      desc: "raised if the timer 1_0 expired (mtimecmp >= mtime)"
+    },
   ],
   param_list: [
     { name: "N_HARTS",
       desc: "Number of harts",
       type: "int",
-      default: "1"
+      default: "2"
     },
     { name: "N_TIMERS",
       desc: "Number of timers per Hart",
@@ -39,10 +42,7 @@
         swaccess: "rw",
         hwaccess: "hro",
         fields: [
-          { bits: "0", name: "active",
-            desc: "If 1, timer operates",
-            tags: [// prevent timer from being enabled
-                   "excl:CsrNonInitTests:CsrExclWrite"] }
+          { bits: "0", name: "active", desc: "If 1, timer operates" }
         ],
       }
     },
@@ -110,9 +110,7 @@
         swaccess: "rw1c",
         hwaccess: "hrw",
         fields: [
-          { bits: "0", name: "IS", desc: "Interrupt status for timer",
-            tags: [// intr_state csr is affected by writes to other csrs - skip write-check
-                   "excl:CsrNonInitTests:CsrExclWriteCheck"] }
+          { bits: "0", name: "IS", desc: "Interrupt status for timer" }
         ],
       }
     },
@@ -126,9 +124,89 @@
         hwext: "true",
         hwqe: "true",
         fields: [
-          { bits: "0", name: "T", desc: "Interrupt test for timer",
-            tags: [// intr_test csr is WO which - it reads back 0s
-                   "excl:CsrNonInitTests:CsrExclWrite"] }
+          { bits: "0", name: "T", desc: "Interrupt test for timer" }
+        ]
+      }
+    },
+    { skipto: "0x200" },
+    { name: "CFG1",
+      desc: "Configuration for Hart 1",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "11:0", name: "prescale", desc: "Prescaler to generate tick" },
+        { bits: "23:16", name: "step", resval: "0x1", desc: "Incremental value for each tick" },
+      ],
+    },
+    { name: "TIMER_V_LOWER1",
+      desc: "Timer value Lower",
+      swaccess: "rw",
+      hwaccess: "hrw",
+      fields: [
+        { bits: "31:0", name: "v", desc: "Timer value [31:0]" },
+      ],
+    },
+    { name: "TIMER_V_UPPER1",
+      desc: "Timer value Upper",
+      swaccess: "rw",
+      hwaccess: "hrw",
+      fields: [
+        { bits: "31:0", name: "v", desc: "Timer value [63:32]" },
+      ],
+    },
+    { name: "COMPARE_LOWER1_0",
+      desc: "Timer value Lower",
+      swaccess: "rw",
+      hwaccess: "hro",
+      hwqe: "true",
+      fields: [
+        { bits: "31:0", name: "v", resval: "0xffffffff", desc: "Timer compare value [31:0]" },
+      ],
+    },
+    { name: "COMPARE_UPPER1_0",
+      desc: "Timer value Upper",
+      swaccess: "rw",
+      hwaccess: "hro",
+      hwqe: "true",
+      fields: [
+        { bits: "31:0", name: "v", resval: "0xffffffff", desc: "Timer compare value [63:32]" },
+      ],
+    },
+    { multireg: {
+        name: "INTR_ENABLE1",
+        desc: "Interrupt Enable",
+        count: "N_TIMERS",
+        cname: "TIMER",
+        swaccess: "rw",
+        hwaccess: "hro",
+        fields: [
+          { bits: "0", name: "IE", desc: "Interrupt Enable for timer" }
+        ]
+      }
+    },
+    { multireg: {
+        name: "INTR_STATE1",
+        desc: "Interrupt Status",
+        count: "N_TIMERS",
+        cname: "TIMER",
+        swaccess: "rw1c",
+        hwaccess: "hrw",
+        fields: [
+          { bits: "0", name: "IS", desc: "Interrupt status for timer" }
+        ],
+      }
+    },
+    { multireg: {
+        name: "INTR_TEST1",
+        desc: "Interrupt test register",
+        count: "N_TIMERS",
+        cname: "TIMER",
+        swaccess: "wo",
+        hwaccess: "hro",
+        hwext: "true",
+        hwqe: "true",
+        fields: [
+          { bits: "0", name: "T", desc: "Interrupt test for timer" }
         ]
       }
     },
diff --git a/hw/ip/rv_timer/rtl/rv_timer.sv b/hw/ip/rv_timer/rtl/rv_timer.sv
index 0ce0bf3f5..9aba20330 100644
--- a/hw/ip/rv_timer/rtl/rv_timer.sv
+++ b/hw/ip/rv_timer/rtl/rv_timer.sv
@@ -1,8 +1,6 @@
 // Copyright lowRISC contributors.
 // Licensed under the Apache License, Version 2.0, see LICENSE for details.
 // SPDX-License-Identifier: Apache-2.0
-//
-
 
 `include "prim_assert.sv"
 
@@ -13,10 +11,11 @@ module rv_timer (
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
 
-  output logic intr_timer_expired_0_0_o
+  output logic intr_timer_expired_0_0_o,
+  output logic intr_timer_expired_1_0_o
 );
 
-  localparam int N_HARTS  = 1;
+  localparam int N_HARTS  = 2;
   localparam int N_TIMERS = 1;
 
   import rv_timer_reg_pkg::*;
@@ -53,25 +52,49 @@ module rv_timer (
   // Once reggen supports nested multireg, the following can be automated. For the moment, it must
   // be connected manually.
   assign active[0]  = reg2hw.ctrl[0].q;
-  assign prescaler = '{reg2hw.cfg0.prescale.q};
-  assign step      = '{reg2hw.cfg0.step.q};
+  assign active[1]  = reg2hw.ctrl[1].q;
+
+  assign prescaler[0] = reg2hw.cfg0.prescale.q;
+  assign prescaler[1] = reg2hw.cfg1.prescale.q;
+
+  assign step[0] = reg2hw.cfg0.step.q;
+  assign step[1] = reg2hw.cfg1.step.q;
 
   assign hw2reg.timer_v_upper0.de = tick[0];
   assign hw2reg.timer_v_lower0.de = tick[0];
+  assign hw2reg.timer_v_upper1.de = tick[1];
+  assign hw2reg.timer_v_lower1.de = tick[1];
+
   assign hw2reg.timer_v_upper0.d = mtime_d[0][63:32];
   assign hw2reg.timer_v_lower0.d = mtime_d[0][31: 0];
+
+  assign hw2reg.timer_v_upper1.d = mtime_d[1][63:32];
+  assign hw2reg.timer_v_lower1.d = mtime_d[1][31: 0];
+
   assign mtime[0] = {reg2hw.timer_v_upper0.q, reg2hw.timer_v_lower0.q};
-  assign mtimecmp = '{'{{reg2hw.compare_upper0_0.q,reg2hw.compare_lower0_0.q}}};
+  assign mtime[1] = {reg2hw.timer_v_upper1.q, reg2hw.timer_v_lower1.q};
+
+  assign mtimecmp[0][0] = {reg2hw.compare_upper0_0.q,reg2hw.compare_lower0_0.q};
+  assign mtimecmp[1][0] = {reg2hw.compare_upper1_0.q,reg2hw.compare_lower1_0.q};
+
   assign mtimecmp_update[0][0] = reg2hw.compare_upper0_0.qe | reg2hw.compare_lower0_0.qe;
+  assign mtimecmp_update[1][0] = reg2hw.compare_upper0_0.qe | reg2hw.compare_lower0_0.qe;
 
   assign intr_timer_expired_0_0_o = intr_out[0];
-  assign intr_timer_en            = reg2hw.intr_enable0[0].q;
-  assign intr_timer_state_q       = reg2hw.intr_state0[0].q;
-  assign intr_timer_test_q        = reg2hw.intr_test0[0].q;
-  assign intr_timer_test_qe       = reg2hw.intr_test0[0].qe;
-  assign hw2reg.intr_state0[0].de = intr_timer_state_de | mtimecmp_update[0][0];
-  assign hw2reg.intr_state0[0].d  = intr_timer_state_d & ~mtimecmp_update[0][0];
-
+  assign intr_timer_en[0]         = reg2hw.intr_enable0[0].q;
+  assign intr_timer_state_q[0]    = reg2hw.intr_state0[0].q;
+  assign intr_timer_test_q[0]     = reg2hw.intr_test0[0].q;
+  assign intr_timer_test_qe[0]    = reg2hw.intr_test0[0].qe;
+  assign intr_timer_expired_1_0_o = intr_out[1];
+  assign intr_timer_en[1]         = reg2hw.intr_enable1[0].q;
+  assign intr_timer_state_q[1]    = reg2hw.intr_state1[0].q;
+  assign intr_timer_test_q[1]     = reg2hw.intr_test1[0].q;
+  assign intr_timer_test_qe[1]    = reg2hw.intr_test1[0].qe;
+
+  assign hw2reg.intr_state0[0].de = intr_timer_state_de[0] | mtimecmp_update[0][0];
+  assign hw2reg.intr_state0[0].d  = intr_timer_state_d[0] & ~mtimecmp_update[0][0];
+  assign hw2reg.intr_state1[0].de = intr_timer_state_de[1] | mtimecmp_update[1][0];
+  assign hw2reg.intr_state1[0].d  = intr_timer_state_d[1] & ~mtimecmp_update[1][0];
 
   for (genvar h = 0 ; h < N_HARTS ; h++) begin : gen_harts
     prim_intr_hw #(
@@ -79,14 +102,14 @@ module rv_timer (
     ) u_intr_hw (
       .clk_i,
       .rst_ni,
-      .event_intr_i           (intr_timer_set),
+      .event_intr_i           (intr_timer_set[h]),
 
-      .reg2hw_intr_enable_q_i (intr_timer_en[h*N_TIMERS+:N_TIMERS]),
-      .reg2hw_intr_test_q_i   (intr_timer_test_q[h*N_TIMERS+:N_TIMERS]),
-      .reg2hw_intr_test_qe_i  (intr_timer_test_qe[h]),
-      .reg2hw_intr_state_q_i  (intr_timer_state_q[h*N_TIMERS+:N_TIMERS]),
-      .hw2reg_intr_state_de_o (intr_timer_state_de),
-      .hw2reg_intr_state_d_o  (intr_timer_state_d[h*N_TIMERS+:N_TIMERS]),
+      .reg2hw_intr_enable_q_i(intr_timer_en[h*N_TIMERS+:N_TIMERS]),
+      .reg2hw_intr_test_q_i(intr_timer_test_q[h*N_TIMERS+:N_TIMERS]),
+      .reg2hw_intr_test_qe_i(intr_timer_test_qe[h]),
+      .reg2hw_intr_state_q_i(intr_timer_state_q[h*N_TIMERS+:N_TIMERS]),
+      .hw2reg_intr_state_de_o(intr_timer_state_de[h]),
+      .hw2reg_intr_state_d_o(intr_timer_state_d[h*N_TIMERS+:N_TIMERS]),
 
       .intr_o                 (intr_out[h*N_TIMERS+:N_TIMERS])
     );
@@ -96,18 +119,14 @@ module rv_timer (
     ) u_core (
       .clk_i,
       .rst_ni,
-
-      .active    (active[h]),
-      .prescaler (prescaler[h]),
-      .step      (step[h]),
-
-      .tick      (tick[h]),
-
-      .mtime_d   (mtime_d[h]),
-      .mtime     (mtime[h]),
-      .mtimecmp  (mtimecmp[h]),
-
-      .intr      (intr_timer_set[h*N_TIMERS+:N_TIMERS])
+      .active(active[h]),
+      .prescaler(prescaler[h]),
+      .step(step[h]),
+      .tick(tick[h]),
+      .mtime_d(mtime_d[h]),
+      .mtime(mtime[h]),
+      .mtimecmp(mtimecmp[h]),
+      .intr(intr_timer_set[h*N_TIMERS+:N_TIMERS])
     );
   end : gen_harts
 
@@ -115,15 +134,12 @@ module rv_timer (
   rv_timer_reg_top u_reg (
     .clk_i,
     .rst_ni,
-
     .tl_i,
     .tl_o,
-
     .reg2hw,
     .hw2reg,
-
-    .intg_err_o (),
-    .devmode_i  (1'b1)
+    .intg_err_o(),
+    .devmode_i(1'b1)
   );
 
   ////////////////
diff --git a/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv b/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv
index 2b04665b2..5723d2818 100644
--- a/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv
+++ b/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv
@@ -7,11 +7,11 @@
 package rv_timer_reg_pkg;
 
   // Param list
-  parameter int N_HARTS = 1;
+  parameter int N_HARTS = 2;
   parameter int N_TIMERS = 1;
 
   // Address widths within the block
-  parameter int BlockAw = 9;
+  parameter int BlockAw = 10;
 
   ////////////////////////////
   // Typedefs for registers //
@@ -61,6 +61,46 @@ package rv_timer_reg_pkg;
     logic        qe;
   } rv_timer_reg2hw_intr_test0_mreg_t;
 
+  typedef struct packed {
+    struct packed {
+      logic [11:0] q;
+    } prescale;
+    struct packed {
+      logic [7:0]  q;
+    } step;
+  } rv_timer_reg2hw_cfg1_reg_t;
+
+  typedef struct packed {
+    logic [31:0] q;
+  } rv_timer_reg2hw_timer_v_lower1_reg_t;
+
+  typedef struct packed {
+    logic [31:0] q;
+  } rv_timer_reg2hw_timer_v_upper1_reg_t;
+
+  typedef struct packed {
+    logic [31:0] q;
+    logic        qe;
+  } rv_timer_reg2hw_compare_lower1_0_reg_t;
+
+  typedef struct packed {
+    logic [31:0] q;
+    logic        qe;
+  } rv_timer_reg2hw_compare_upper1_0_reg_t;
+
+  typedef struct packed {
+    logic        q;
+  } rv_timer_reg2hw_intr_enable1_mreg_t;
+
+  typedef struct packed {
+    logic        q;
+  } rv_timer_reg2hw_intr_state1_mreg_t;
+
+  typedef struct packed {
+    logic        q;
+    logic        qe;
+  } rv_timer_reg2hw_intr_test1_mreg_t;
+
   typedef struct packed {
     logic [31:0] d;
     logic        de;
@@ -76,39 +116,74 @@ package rv_timer_reg_pkg;
     logic        de;
   } rv_timer_hw2reg_intr_state0_mreg_t;
 
+  typedef struct packed {
+    logic [31:0] d;
+    logic        de;
+  } rv_timer_hw2reg_timer_v_lower1_reg_t;
+
+  typedef struct packed {
+    logic [31:0] d;
+    logic        de;
+  } rv_timer_hw2reg_timer_v_upper1_reg_t;
+
+  typedef struct packed {
+    logic        d;
+    logic        de;
+  } rv_timer_hw2reg_intr_state1_mreg_t;
+
   // Register -> HW type
   typedef struct packed {
-    rv_timer_reg2hw_ctrl_mreg_t [0:0] ctrl; // [154:154]
-    rv_timer_reg2hw_cfg0_reg_t cfg0; // [153:134]
-    rv_timer_reg2hw_timer_v_lower0_reg_t timer_v_lower0; // [133:102]
-    rv_timer_reg2hw_timer_v_upper0_reg_t timer_v_upper0; // [101:70]
-    rv_timer_reg2hw_compare_lower0_0_reg_t compare_lower0_0; // [69:37]
-    rv_timer_reg2hw_compare_upper0_0_reg_t compare_upper0_0; // [36:4]
-    rv_timer_reg2hw_intr_enable0_mreg_t [0:0] intr_enable0; // [3:3]
-    rv_timer_reg2hw_intr_state0_mreg_t [0:0] intr_state0; // [2:2]
-    rv_timer_reg2hw_intr_test0_mreg_t [0:0] intr_test0; // [1:0]
+    rv_timer_reg2hw_ctrl_mreg_t [1:0] ctrl; // [309:308]
+    rv_timer_reg2hw_cfg0_reg_t cfg0; // [307:288]
+    rv_timer_reg2hw_timer_v_lower0_reg_t timer_v_lower0; // [287:256]
+    rv_timer_reg2hw_timer_v_upper0_reg_t timer_v_upper0; // [255:224]
+    rv_timer_reg2hw_compare_lower0_0_reg_t compare_lower0_0; // [223:191]
+    rv_timer_reg2hw_compare_upper0_0_reg_t compare_upper0_0; // [190:158]
+    rv_timer_reg2hw_intr_enable0_mreg_t [0:0] intr_enable0; // [157:157]
+    rv_timer_reg2hw_intr_state0_mreg_t [0:0] intr_state0; // [156:156]
+    rv_timer_reg2hw_intr_test0_mreg_t [0:0] intr_test0; // [155:154]
+    rv_timer_reg2hw_cfg1_reg_t cfg1; // [153:134]
+    rv_timer_reg2hw_timer_v_lower1_reg_t timer_v_lower1; // [133:102]
+    rv_timer_reg2hw_timer_v_upper1_reg_t timer_v_upper1; // [101:70]
+    rv_timer_reg2hw_compare_lower1_0_reg_t compare_lower1_0; // [69:37]
+    rv_timer_reg2hw_compare_upper1_0_reg_t compare_upper1_0; // [36:4]
+    rv_timer_reg2hw_intr_enable1_mreg_t [0:0] intr_enable1; // [3:3]
+    rv_timer_reg2hw_intr_state1_mreg_t [0:0] intr_state1; // [2:2]
+    rv_timer_reg2hw_intr_test1_mreg_t [0:0] intr_test1; // [1:0]
   } rv_timer_reg2hw_t;
 
   // HW -> register type
   typedef struct packed {
-    rv_timer_hw2reg_timer_v_lower0_reg_t timer_v_lower0; // [67:35]
-    rv_timer_hw2reg_timer_v_upper0_reg_t timer_v_upper0; // [34:2]
-    rv_timer_hw2reg_intr_state0_mreg_t [0:0] intr_state0; // [1:0]
+    rv_timer_hw2reg_timer_v_lower0_reg_t timer_v_lower0; // [135:103]
+    rv_timer_hw2reg_timer_v_upper0_reg_t timer_v_upper0; // [102:70]
+    rv_timer_hw2reg_intr_state0_mreg_t [0:0] intr_state0; // [69:68]
+    rv_timer_hw2reg_timer_v_lower1_reg_t timer_v_lower1; // [67:35]
+    rv_timer_hw2reg_timer_v_upper1_reg_t timer_v_upper1; // [34:2]
+    rv_timer_hw2reg_intr_state1_mreg_t [0:0] intr_state1; // [1:0]
   } rv_timer_hw2reg_t;
 
   // Register offsets
-  parameter logic [BlockAw-1:0] RV_TIMER_CTRL_OFFSET = 9'h 0;
-  parameter logic [BlockAw-1:0] RV_TIMER_CFG0_OFFSET = 9'h 100;
-  parameter logic [BlockAw-1:0] RV_TIMER_TIMER_V_LOWER0_OFFSET = 9'h 104;
-  parameter logic [BlockAw-1:0] RV_TIMER_TIMER_V_UPPER0_OFFSET = 9'h 108;
-  parameter logic [BlockAw-1:0] RV_TIMER_COMPARE_LOWER0_0_OFFSET = 9'h 10c;
-  parameter logic [BlockAw-1:0] RV_TIMER_COMPARE_UPPER0_0_OFFSET = 9'h 110;
-  parameter logic [BlockAw-1:0] RV_TIMER_INTR_ENABLE0_OFFSET = 9'h 114;
-  parameter logic [BlockAw-1:0] RV_TIMER_INTR_STATE0_OFFSET = 9'h 118;
-  parameter logic [BlockAw-1:0] RV_TIMER_INTR_TEST0_OFFSET = 9'h 11c;
+  parameter logic [BlockAw-1:0] RV_TIMER_CTRL_OFFSET = 10'h 0;
+  parameter logic [BlockAw-1:0] RV_TIMER_CFG0_OFFSET = 10'h 100;
+  parameter logic [BlockAw-1:0] RV_TIMER_TIMER_V_LOWER0_OFFSET = 10'h 104;
+  parameter logic [BlockAw-1:0] RV_TIMER_TIMER_V_UPPER0_OFFSET = 10'h 108;
+  parameter logic [BlockAw-1:0] RV_TIMER_COMPARE_LOWER0_0_OFFSET = 10'h 10c;
+  parameter logic [BlockAw-1:0] RV_TIMER_COMPARE_UPPER0_0_OFFSET = 10'h 110;
+  parameter logic [BlockAw-1:0] RV_TIMER_INTR_ENABLE0_OFFSET = 10'h 114;
+  parameter logic [BlockAw-1:0] RV_TIMER_INTR_STATE0_OFFSET = 10'h 118;
+  parameter logic [BlockAw-1:0] RV_TIMER_INTR_TEST0_OFFSET = 10'h 11c;
+  parameter logic [BlockAw-1:0] RV_TIMER_CFG1_OFFSET = 10'h 200;
+  parameter logic [BlockAw-1:0] RV_TIMER_TIMER_V_LOWER1_OFFSET = 10'h 204;
+  parameter logic [BlockAw-1:0] RV_TIMER_TIMER_V_UPPER1_OFFSET = 10'h 208;
+  parameter logic [BlockAw-1:0] RV_TIMER_COMPARE_LOWER1_0_OFFSET = 10'h 20c;
+  parameter logic [BlockAw-1:0] RV_TIMER_COMPARE_UPPER1_0_OFFSET = 10'h 210;
+  parameter logic [BlockAw-1:0] RV_TIMER_INTR_ENABLE1_OFFSET = 10'h 214;
+  parameter logic [BlockAw-1:0] RV_TIMER_INTR_STATE1_OFFSET = 10'h 218;
+  parameter logic [BlockAw-1:0] RV_TIMER_INTR_TEST1_OFFSET = 10'h 21c;
 
   // Reset values for hwext registers and their fields
   parameter logic [0:0] RV_TIMER_INTR_TEST0_RESVAL = 1'h 0;
+  parameter logic [0:0] RV_TIMER_INTR_TEST1_RESVAL = 1'h 0;
 
   // Register index
   typedef enum int {
@@ -120,20 +195,36 @@ package rv_timer_reg_pkg;
     RV_TIMER_COMPARE_UPPER0_0,
     RV_TIMER_INTR_ENABLE0,
     RV_TIMER_INTR_STATE0,
-    RV_TIMER_INTR_TEST0
+    RV_TIMER_INTR_TEST0,
+    RV_TIMER_CFG1,
+    RV_TIMER_TIMER_V_LOWER1,
+    RV_TIMER_TIMER_V_UPPER1,
+    RV_TIMER_COMPARE_LOWER1_0,
+    RV_TIMER_COMPARE_UPPER1_0,
+    RV_TIMER_INTR_ENABLE1,
+    RV_TIMER_INTR_STATE1,
+    RV_TIMER_INTR_TEST1
   } rv_timer_id_e;
 
   // Register width information to check illegal writes
-  parameter logic [3:0] RV_TIMER_PERMIT [9] = '{
-    4'b 0001, // index[0] RV_TIMER_CTRL
-    4'b 0111, // index[1] RV_TIMER_CFG0
-    4'b 1111, // index[2] RV_TIMER_TIMER_V_LOWER0
-    4'b 1111, // index[3] RV_TIMER_TIMER_V_UPPER0
-    4'b 1111, // index[4] RV_TIMER_COMPARE_LOWER0_0
-    4'b 1111, // index[5] RV_TIMER_COMPARE_UPPER0_0
-    4'b 0001, // index[6] RV_TIMER_INTR_ENABLE0
-    4'b 0001, // index[7] RV_TIMER_INTR_STATE0
-    4'b 0001  // index[8] RV_TIMER_INTR_TEST0
+  parameter logic [3:0] RV_TIMER_PERMIT [17] = '{
+    4'b 0001, // index[ 0] RV_TIMER_CTRL
+    4'b 0111, // index[ 1] RV_TIMER_CFG0
+    4'b 1111, // index[ 2] RV_TIMER_TIMER_V_LOWER0
+    4'b 1111, // index[ 3] RV_TIMER_TIMER_V_UPPER0
+    4'b 1111, // index[ 4] RV_TIMER_COMPARE_LOWER0_0
+    4'b 1111, // index[ 5] RV_TIMER_COMPARE_UPPER0_0
+    4'b 0001, // index[ 6] RV_TIMER_INTR_ENABLE0
+    4'b 0001, // index[ 7] RV_TIMER_INTR_STATE0
+    4'b 0001, // index[ 8] RV_TIMER_INTR_TEST0
+    4'b 0111, // index[ 9] RV_TIMER_CFG1
+    4'b 1111, // index[10] RV_TIMER_TIMER_V_LOWER1
+    4'b 1111, // index[11] RV_TIMER_TIMER_V_UPPER1
+    4'b 1111, // index[12] RV_TIMER_COMPARE_LOWER1_0
+    4'b 1111, // index[13] RV_TIMER_COMPARE_UPPER1_0
+    4'b 0001, // index[14] RV_TIMER_INTR_ENABLE1
+    4'b 0001, // index[15] RV_TIMER_INTR_STATE1
+    4'b 0001  // index[16] RV_TIMER_INTR_TEST1
   };
 
 endpackage
diff --git a/hw/ip/rv_timer/rtl/rv_timer_reg_top.sv b/hw/ip/rv_timer/rtl/rv_timer_reg_top.sv
index 548772059..413282d82 100644
--- a/hw/ip/rv_timer/rtl/rv_timer_reg_top.sv
+++ b/hw/ip/rv_timer/rtl/rv_timer_reg_top.sv
@@ -25,7 +25,7 @@ module rv_timer_reg_top (
 
   import rv_timer_reg_pkg::* ;
 
-  localparam int AW = 9;
+  localparam int AW = 10;
   localparam int DW = 32;
   localparam int DBW = DW/8;                    // Byte Width
 
@@ -45,38 +45,10 @@ module rv_timer_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i,
-    .err_o(intg_err)
-  );
-
-  logic intg_err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      intg_err_q <= '0;
-    end else if (intg_err) begin
-      intg_err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = intg_err_q | intg_err;
-
-  // outgoing integrity generation
-  tlul_pkg::tl_d2h_t tl_o_pre;
-  tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
-  ) u_rsp_intg_gen (
-    .tl_i(tl_o_pre),
-    .tl_o
-  );
+  assign intg_err_o = '0;
 
   assign tl_reg_h2d = tl_i;
-  assign tl_o_pre   = tl_reg_d2h;
+  assign tl_o = tl_reg_d2h;
 
   tlul_adapter_reg #(
     .RegAw(AW),
@@ -99,14 +71,17 @@ module rv_timer_reg_top (
   );
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;
+  assign reg_error = (devmode_i & addrmiss) | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
   //        or <reg>_{wd|we|qs} if field == 1 or 0
-  logic ctrl_qs;
-  logic ctrl_wd;
-  logic ctrl_we;
+  logic ctrl_active_0_qs;
+  logic ctrl_active_0_wd;
+  logic ctrl_active_0_we;
+  logic ctrl_active_1_qs;
+  logic ctrl_active_1_wd;
+  logic ctrl_active_1_we;
   logic [11:0] cfg0_prescale_qs;
   logic [11:0] cfg0_prescale_wd;
   logic cfg0_prescale_we;
@@ -133,23 +108,50 @@ module rv_timer_reg_top (
   logic intr_state0_we;
   logic intr_test0_wd;
   logic intr_test0_we;
+  logic [11:0] cfg1_prescale_qs;
+  logic [11:0] cfg1_prescale_wd;
+  logic cfg1_prescale_we;
+  logic [7:0] cfg1_step_qs;
+  logic [7:0] cfg1_step_wd;
+  logic cfg1_step_we;
+  logic [31:0] timer_v_lower1_qs;
+  logic [31:0] timer_v_lower1_wd;
+  logic timer_v_lower1_we;
+  logic [31:0] timer_v_upper1_qs;
+  logic [31:0] timer_v_upper1_wd;
+  logic timer_v_upper1_we;
+  logic [31:0] compare_lower1_0_qs;
+  logic [31:0] compare_lower1_0_wd;
+  logic compare_lower1_0_we;
+  logic [31:0] compare_upper1_0_qs;
+  logic [31:0] compare_upper1_0_wd;
+  logic compare_upper1_0_we;
+  logic intr_enable1_qs;
+  logic intr_enable1_wd;
+  logic intr_enable1_we;
+  logic intr_state1_qs;
+  logic intr_state1_wd;
+  logic intr_state1_we;
+  logic intr_test1_wd;
+  logic intr_test1_we;
 
   // Register instances
 
   // Subregister 0 of Multireg ctrl
   // R[ctrl]: V(False)
 
+  // F[active_0]: 0:0
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ctrl (
+  ) u_ctrl_active_0 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ctrl_we),
-    .wd     (ctrl_wd),
+    .we     (ctrl_active_0_we),
+    .wd     (ctrl_active_0_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -160,10 +162,37 @@ module rv_timer_reg_top (
     .q      (reg2hw.ctrl[0].q ),
 
     // to register interface (read)
-    .qs     (ctrl_qs)
+    .qs     (ctrl_active_0_qs)
   );
 
 
+  // F[active_1]: 1:1
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_ctrl_active_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (ctrl_active_1_we),
+    .wd     (ctrl_active_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.ctrl[1].q ),
+
+    // to register interface (read)
+    .qs     (ctrl_active_1_qs)
+  );
+
+
+
   // R[cfg0]: V(False)
 
   //   F[prescale]: 11:0
@@ -402,20 +431,266 @@ module rv_timer_reg_top (
   );
 
 
+  // R[cfg1]: V(False)
+
+  //   F[prescale]: 11:0
+  prim_subreg #(
+    .DW      (12),
+    .SWACCESS("RW"),
+    .RESVAL  (12'h0)
+  ) u_cfg1_prescale (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (cfg1_prescale_we),
+    .wd     (cfg1_prescale_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.cfg1.prescale.q ),
+
+    // to register interface (read)
+    .qs     (cfg1_prescale_qs)
+  );
+
+
+  //   F[step]: 23:16
+  prim_subreg #(
+    .DW      (8),
+    .SWACCESS("RW"),
+    .RESVAL  (8'h1)
+  ) u_cfg1_step (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (cfg1_step_we),
+    .wd     (cfg1_step_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.cfg1.step.q ),
+
+    // to register interface (read)
+    .qs     (cfg1_step_qs)
+  );
+
+
+  // R[timer_v_lower1]: V(False)
+
+  prim_subreg #(
+    .DW      (32),
+    .SWACCESS("RW"),
+    .RESVAL  (32'h0)
+  ) u_timer_v_lower1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (timer_v_lower1_we),
+    .wd     (timer_v_lower1_wd),
+
+    // from internal hardware
+    .de     (hw2reg.timer_v_lower1.de),
+    .d      (hw2reg.timer_v_lower1.d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.timer_v_lower1.q ),
+
+    // to register interface (read)
+    .qs     (timer_v_lower1_qs)
+  );
 
 
-  logic [8:0] addr_hit;
+  // R[timer_v_upper1]: V(False)
+
+  prim_subreg #(
+    .DW      (32),
+    .SWACCESS("RW"),
+    .RESVAL  (32'h0)
+  ) u_timer_v_upper1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (timer_v_upper1_we),
+    .wd     (timer_v_upper1_wd),
+
+    // from internal hardware
+    .de     (hw2reg.timer_v_upper1.de),
+    .d      (hw2reg.timer_v_upper1.d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.timer_v_upper1.q ),
+
+    // to register interface (read)
+    .qs     (timer_v_upper1_qs)
+  );
+
+
+  // R[compare_lower1_0]: V(False)
+
+  prim_subreg #(
+    .DW      (32),
+    .SWACCESS("RW"),
+    .RESVAL  (32'hffffffff)
+  ) u_compare_lower1_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (compare_lower1_0_we),
+    .wd     (compare_lower1_0_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (reg2hw.compare_lower1_0.qe),
+    .q      (reg2hw.compare_lower1_0.q ),
+
+    // to register interface (read)
+    .qs     (compare_lower1_0_qs)
+  );
+
+
+  // R[compare_upper1_0]: V(False)
+
+  prim_subreg #(
+    .DW      (32),
+    .SWACCESS("RW"),
+    .RESVAL  (32'hffffffff)
+  ) u_compare_upper1_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (compare_upper1_0_we),
+    .wd     (compare_upper1_0_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (reg2hw.compare_upper1_0.qe),
+    .q      (reg2hw.compare_upper1_0.q ),
+
+    // to register interface (read)
+    .qs     (compare_upper1_0_qs)
+  );
+
+
+
+  // Subregister 0 of Multireg intr_enable1
+  // R[intr_enable1]: V(False)
+
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_intr_enable1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (intr_enable1_we),
+    .wd     (intr_enable1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.intr_enable1[0].q ),
+
+    // to register interface (read)
+    .qs     (intr_enable1_qs)
+  );
+
+
+
+  // Subregister 0 of Multireg intr_state1
+  // R[intr_state1]: V(False)
+
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("W1C"),
+    .RESVAL  (1'h0)
+  ) u_intr_state1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (intr_state1_we),
+    .wd     (intr_state1_wd),
+
+    // from internal hardware
+    .de     (hw2reg.intr_state1[0].de),
+    .d      (hw2reg.intr_state1[0].d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.intr_state1[0].q ),
+
+    // to register interface (read)
+    .qs     (intr_state1_qs)
+  );
+
+
+
+  // Subregister 0 of Multireg intr_test1
+  // R[intr_test1]: V(True)
+
+  prim_subreg_ext #(
+    .DW    (1)
+  ) u_intr_test1 (
+    .re     (1'b0),
+    .we     (intr_test1_we),
+    .wd     (intr_test1_wd),
+    .d      ('0),
+    .qre    (),
+    .qe     (reg2hw.intr_test1[0].qe),
+    .q      (reg2hw.intr_test1[0].q ),
+    .qs     ()
+  );
+
+
+
+
+  logic [16:0] addr_hit;
   always_comb begin
     addr_hit = '0;
-    addr_hit[0] = (reg_addr == RV_TIMER_CTRL_OFFSET);
-    addr_hit[1] = (reg_addr == RV_TIMER_CFG0_OFFSET);
-    addr_hit[2] = (reg_addr == RV_TIMER_TIMER_V_LOWER0_OFFSET);
-    addr_hit[3] = (reg_addr == RV_TIMER_TIMER_V_UPPER0_OFFSET);
-    addr_hit[4] = (reg_addr == RV_TIMER_COMPARE_LOWER0_0_OFFSET);
-    addr_hit[5] = (reg_addr == RV_TIMER_COMPARE_UPPER0_0_OFFSET);
-    addr_hit[6] = (reg_addr == RV_TIMER_INTR_ENABLE0_OFFSET);
-    addr_hit[7] = (reg_addr == RV_TIMER_INTR_STATE0_OFFSET);
-    addr_hit[8] = (reg_addr == RV_TIMER_INTR_TEST0_OFFSET);
+    addr_hit[ 0] = (reg_addr == RV_TIMER_CTRL_OFFSET);
+    addr_hit[ 1] = (reg_addr == RV_TIMER_CFG0_OFFSET);
+    addr_hit[ 2] = (reg_addr == RV_TIMER_TIMER_V_LOWER0_OFFSET);
+    addr_hit[ 3] = (reg_addr == RV_TIMER_TIMER_V_UPPER0_OFFSET);
+    addr_hit[ 4] = (reg_addr == RV_TIMER_COMPARE_LOWER0_0_OFFSET);
+    addr_hit[ 5] = (reg_addr == RV_TIMER_COMPARE_UPPER0_0_OFFSET);
+    addr_hit[ 6] = (reg_addr == RV_TIMER_INTR_ENABLE0_OFFSET);
+    addr_hit[ 7] = (reg_addr == RV_TIMER_INTR_STATE0_OFFSET);
+    addr_hit[ 8] = (reg_addr == RV_TIMER_INTR_TEST0_OFFSET);
+    addr_hit[ 9] = (reg_addr == RV_TIMER_CFG1_OFFSET);
+    addr_hit[10] = (reg_addr == RV_TIMER_TIMER_V_LOWER1_OFFSET);
+    addr_hit[11] = (reg_addr == RV_TIMER_TIMER_V_UPPER1_OFFSET);
+    addr_hit[12] = (reg_addr == RV_TIMER_COMPARE_LOWER1_0_OFFSET);
+    addr_hit[13] = (reg_addr == RV_TIMER_COMPARE_UPPER1_0_OFFSET);
+    addr_hit[14] = (reg_addr == RV_TIMER_INTR_ENABLE1_OFFSET);
+    addr_hit[15] = (reg_addr == RV_TIMER_INTR_STATE1_OFFSET);
+    addr_hit[16] = (reg_addr == RV_TIMER_INTR_TEST1_OFFSET);
   end
 
   assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
@@ -423,19 +698,30 @@ module rv_timer_reg_top (
   // Check sub-word write is permitted
   always_comb begin
     wr_err = (reg_we &
-              ((addr_hit[0] & (|(RV_TIMER_PERMIT[0] & ~reg_be))) |
-               (addr_hit[1] & (|(RV_TIMER_PERMIT[1] & ~reg_be))) |
-               (addr_hit[2] & (|(RV_TIMER_PERMIT[2] & ~reg_be))) |
-               (addr_hit[3] & (|(RV_TIMER_PERMIT[3] & ~reg_be))) |
-               (addr_hit[4] & (|(RV_TIMER_PERMIT[4] & ~reg_be))) |
-               (addr_hit[5] & (|(RV_TIMER_PERMIT[5] & ~reg_be))) |
-               (addr_hit[6] & (|(RV_TIMER_PERMIT[6] & ~reg_be))) |
-               (addr_hit[7] & (|(RV_TIMER_PERMIT[7] & ~reg_be))) |
-               (addr_hit[8] & (|(RV_TIMER_PERMIT[8] & ~reg_be)))));
+              ((addr_hit[ 0] & (|(RV_TIMER_PERMIT[ 0] & ~reg_be))) |
+               (addr_hit[ 1] & (|(RV_TIMER_PERMIT[ 1] & ~reg_be))) |
+               (addr_hit[ 2] & (|(RV_TIMER_PERMIT[ 2] & ~reg_be))) |
+               (addr_hit[ 3] & (|(RV_TIMER_PERMIT[ 3] & ~reg_be))) |
+               (addr_hit[ 4] & (|(RV_TIMER_PERMIT[ 4] & ~reg_be))) |
+               (addr_hit[ 5] & (|(RV_TIMER_PERMIT[ 5] & ~reg_be))) |
+               (addr_hit[ 6] & (|(RV_TIMER_PERMIT[ 6] & ~reg_be))) |
+               (addr_hit[ 7] & (|(RV_TIMER_PERMIT[ 7] & ~reg_be))) |
+               (addr_hit[ 8] & (|(RV_TIMER_PERMIT[ 8] & ~reg_be))) |
+               (addr_hit[ 9] & (|(RV_TIMER_PERMIT[ 9] & ~reg_be))) |
+               (addr_hit[10] & (|(RV_TIMER_PERMIT[10] & ~reg_be))) |
+               (addr_hit[11] & (|(RV_TIMER_PERMIT[11] & ~reg_be))) |
+               (addr_hit[12] & (|(RV_TIMER_PERMIT[12] & ~reg_be))) |
+               (addr_hit[13] & (|(RV_TIMER_PERMIT[13] & ~reg_be))) |
+               (addr_hit[14] & (|(RV_TIMER_PERMIT[14] & ~reg_be))) |
+               (addr_hit[15] & (|(RV_TIMER_PERMIT[15] & ~reg_be))) |
+               (addr_hit[16] & (|(RV_TIMER_PERMIT[16] & ~reg_be)))));
   end
 
-  assign ctrl_we = addr_hit[0] & reg_we & !reg_error;
-  assign ctrl_wd = reg_wdata[0];
+  assign ctrl_active_0_we = addr_hit[0] & reg_we & !reg_error;
+  assign ctrl_active_0_wd = reg_wdata[0];
+
+  assign ctrl_active_1_we = addr_hit[0] & reg_we & !reg_error;
+  assign ctrl_active_1_wd = reg_wdata[1];
 
   assign cfg0_prescale_we = addr_hit[1] & reg_we & !reg_error;
   assign cfg0_prescale_wd = reg_wdata[11:0];
@@ -464,12 +750,40 @@ module rv_timer_reg_top (
   assign intr_test0_we = addr_hit[8] & reg_we & !reg_error;
   assign intr_test0_wd = reg_wdata[0];
 
+  assign cfg1_prescale_we = addr_hit[9] & reg_we & !reg_error;
+  assign cfg1_prescale_wd = reg_wdata[11:0];
+
+  assign cfg1_step_we = addr_hit[9] & reg_we & !reg_error;
+  assign cfg1_step_wd = reg_wdata[23:16];
+
+  assign timer_v_lower1_we = addr_hit[10] & reg_we & !reg_error;
+  assign timer_v_lower1_wd = reg_wdata[31:0];
+
+  assign timer_v_upper1_we = addr_hit[11] & reg_we & !reg_error;
+  assign timer_v_upper1_wd = reg_wdata[31:0];
+
+  assign compare_lower1_0_we = addr_hit[12] & reg_we & !reg_error;
+  assign compare_lower1_0_wd = reg_wdata[31:0];
+
+  assign compare_upper1_0_we = addr_hit[13] & reg_we & !reg_error;
+  assign compare_upper1_0_wd = reg_wdata[31:0];
+
+  assign intr_enable1_we = addr_hit[14] & reg_we & !reg_error;
+  assign intr_enable1_wd = reg_wdata[0];
+
+  assign intr_state1_we = addr_hit[15] & reg_we & !reg_error;
+  assign intr_state1_wd = reg_wdata[0];
+
+  assign intr_test1_we = addr_hit[16] & reg_we & !reg_error;
+  assign intr_test1_wd = reg_wdata[0];
+
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
     unique case (1'b1)
       addr_hit[0]: begin
-        reg_rdata_next[0] = ctrl_qs;
+        reg_rdata_next[0] = ctrl_active_0_qs;
+        reg_rdata_next[1] = ctrl_active_1_qs;
       end
 
       addr_hit[1]: begin
@@ -505,6 +819,39 @@ module rv_timer_reg_top (
         reg_rdata_next[0] = '0;
       end
 
+      addr_hit[9]: begin
+        reg_rdata_next[11:0] = cfg1_prescale_qs;
+        reg_rdata_next[23:16] = cfg1_step_qs;
+      end
+
+      addr_hit[10]: begin
+        reg_rdata_next[31:0] = timer_v_lower1_qs;
+      end
+
+      addr_hit[11]: begin
+        reg_rdata_next[31:0] = timer_v_upper1_qs;
+      end
+
+      addr_hit[12]: begin
+        reg_rdata_next[31:0] = compare_lower1_0_qs;
+      end
+
+      addr_hit[13]: begin
+        reg_rdata_next[31:0] = compare_upper1_0_qs;
+      end
+
+      addr_hit[14]: begin
+        reg_rdata_next[0] = intr_enable1_qs;
+      end
+
+      addr_hit[15]: begin
+        reg_rdata_next[0] = intr_state1_qs;
+      end
+
+      addr_hit[16]: begin
+        reg_rdata_next[0] = '0;
+      end
+
       default: begin
         reg_rdata_next = '1;
       end
