diff --git a/hw/ip/rv_plic/data/rv_plic.hjson.tpl b/hw/ip/rv_plic/data/rv_plic.hjson.tpl
index b73389a..3c88af7 100644
--- a/hw/ip/rv_plic/data/rv_plic.hjson.tpl
+++ b/hw/ip/rv_plic/data/rv_plic.hjson.tpl
@@ -105,7 +105,7 @@
       hwqe: "true",
       hwre: "true",
       fields: [
-        { bits: "${(src).bit_length()-1}:0" }
+        { bits: "${(src-1).bit_length()-1}:0" }
       ],
       tags: [// CC register value is related to IP
              "excl:CsrNonInitTests:CsrExclCheck"],

diff --git a/hw/ip/rv_plic/data/rv_plic.hjson b/hw/ip/rv_plic/data/rv_plic.hjson
index c4eb999..4136644 100644
--- a/hw/ip/rv_plic/data/rv_plic.hjson
+++ b/hw/ip/rv_plic/data/rv_plic.hjson
@@ -19,7 +19,7 @@
     { name: "NumSrc",
       desc: "Number of interrupt sources",
       type: "int",
-      default: "32",
+      default: "64",
       local: "true"
     },
     { name: "NumTarget",
@@ -28,6 +28,12 @@
       default: "1",
       local: "true",
     },
+    { name: "PrioWidth",
+      desc: "Width of priority signals",
+      type: "int",
+      default: "3",
+      local: "true",
+    },
   ],
   regwidth: "32",
   registers: [
@@ -313,7 +319,263 @@
         { bits: "2:0" }
       ],
     }
-    { skipto: "256" }
+    { name: "PRIO32",
+      desc: "Interrupt Source 32 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO33",
+      desc: "Interrupt Source 33 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO34",
+      desc: "Interrupt Source 34 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO35",
+      desc: "Interrupt Source 35 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO36",
+      desc: "Interrupt Source 36 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO37",
+      desc: "Interrupt Source 37 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO38",
+      desc: "Interrupt Source 38 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO39",
+      desc: "Interrupt Source 39 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO40",
+      desc: "Interrupt Source 40 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO41",
+      desc: "Interrupt Source 41 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO42",
+      desc: "Interrupt Source 42 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO43",
+      desc: "Interrupt Source 43 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO44",
+      desc: "Interrupt Source 44 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO45",
+      desc: "Interrupt Source 45 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO46",
+      desc: "Interrupt Source 46 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO47",
+      desc: "Interrupt Source 47 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO48",
+      desc: "Interrupt Source 48 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO49",
+      desc: "Interrupt Source 49 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO50",
+      desc: "Interrupt Source 50 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO51",
+      desc: "Interrupt Source 51 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO52",
+      desc: "Interrupt Source 52 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO53",
+      desc: "Interrupt Source 53 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO54",
+      desc: "Interrupt Source 54 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO55",
+      desc: "Interrupt Source 55 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO56",
+      desc: "Interrupt Source 56 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO57",
+      desc: "Interrupt Source 57 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO58",
+      desc: "Interrupt Source 58 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO59",
+      desc: "Interrupt Source 59 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO60",
+      desc: "Interrupt Source 60 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO61",
+      desc: "Interrupt Source 61 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO62",
+      desc: "Interrupt Source 62 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { name: "PRIO63",
+      desc: "Interrupt Source 63 Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "2:0" }
+      ],
+    }
+    { skipto: "512" }
     { multireg: {
         name: "IE0",
         desc: "Interrupt Enable for Target 0",

diff --git a/hw/ip/rv_plic/data/rv_plic.sv.tpl b/hw/ip/rv_plic/data/rv_plic.sv.tpl
index 24b7398..8ca471d 100644
--- a/hw/ip/rv_plic/data/rv_plic.sv.tpl
+++ b/hw/ip/rv_plic/data/rv_plic.sv.tpl
@@ -14,6 +14,8 @@
 // Verilog parameter
 //   MAX_PRIO: Maximum value of interrupt priority
 
+`include "prim_assert.sv"
+
 module rv_plic import rv_plic_reg_pkg::*; #(
   // derived parameter
   localparam int SRCW    = $clog2(NumSrc)

diff --git a/hw/ip/rv_plic/rtl/rv_plic.sv b/hw/ip/rv_plic/rtl/rv_plic.sv
index 3761e70..6111089 100644
--- a/hw/ip/rv_plic/rtl/rv_plic.sv
+++ b/hw/ip/rv_plic/rtl/rv_plic.sv
@@ -14,6 +14,8 @@
 // Verilog parameter
 //   MAX_PRIO: Maximum value of interrupt priority
 
+`include "prim_assert.sv"
+
 module rv_plic import rv_plic_reg_pkg::*; #(
   // derived parameter
   localparam int SRCW    = $clog2(NumSrc)
@@ -118,11 +120,43 @@ module rv_plic import rv_plic_reg_pkg::*; #(
   assign prio[29] = reg2hw.prio29.q;
   assign prio[30] = reg2hw.prio30.q;
   assign prio[31] = reg2hw.prio31.q;
+  assign prio[32] = reg2hw.prio32.q;
+  assign prio[33] = reg2hw.prio33.q;
+  assign prio[34] = reg2hw.prio34.q;
+  assign prio[35] = reg2hw.prio35.q;
+  assign prio[36] = reg2hw.prio36.q;
+  assign prio[37] = reg2hw.prio37.q;
+  assign prio[38] = reg2hw.prio38.q;
+  assign prio[39] = reg2hw.prio39.q;
+  assign prio[40] = reg2hw.prio40.q;
+  assign prio[41] = reg2hw.prio41.q;
+  assign prio[42] = reg2hw.prio42.q;
+  assign prio[43] = reg2hw.prio43.q;
+  assign prio[44] = reg2hw.prio44.q;
+  assign prio[45] = reg2hw.prio45.q;
+  assign prio[46] = reg2hw.prio46.q;
+  assign prio[47] = reg2hw.prio47.q;
+  assign prio[48] = reg2hw.prio48.q;
+  assign prio[49] = reg2hw.prio49.q;
+  assign prio[50] = reg2hw.prio50.q;
+  assign prio[51] = reg2hw.prio51.q;
+  assign prio[52] = reg2hw.prio52.q;
+  assign prio[53] = reg2hw.prio53.q;
+  assign prio[54] = reg2hw.prio54.q;
+  assign prio[55] = reg2hw.prio55.q;
+  assign prio[56] = reg2hw.prio56.q;
+  assign prio[57] = reg2hw.prio57.q;
+  assign prio[58] = reg2hw.prio58.q;
+  assign prio[59] = reg2hw.prio59.q;
+  assign prio[60] = reg2hw.prio60.q;
+  assign prio[61] = reg2hw.prio61.q;
+  assign prio[62] = reg2hw.prio62.q;
+  assign prio[63] = reg2hw.prio63.q;
 
   //////////////////////
   // Interrupt Enable //
   //////////////////////
-  for (genvar s = 0; s < 32; s++) begin : gen_ie0
+  for (genvar s = 0; s < 64; s++) begin : gen_ie0
     assign ie[0][s] = reg2hw.ie0[s].q;
   end
 
@@ -148,7 +182,7 @@ module rv_plic import rv_plic_reg_pkg::*; #(
   ////////
   // IP //
   ////////
-  for (genvar s = 0; s < 32; s++) begin : gen_ip
+  for (genvar s = 0; s < 64; s++) begin : gen_ip
     assign hw2reg.ip[s].de = 1'b1; // Always write
     assign hw2reg.ip[s].d  = ip[s];
   end
@@ -156,7 +190,7 @@ module rv_plic import rv_plic_reg_pkg::*; #(
   ///////////////////////////////////
   // Detection:: 0: Level, 1: Edge //
   ///////////////////////////////////
-  for (genvar s = 0; s < 32; s++) begin : gen_le
+  for (genvar s = 0; s < 64; s++) begin : gen_le
     assign le[s] = reg2hw.le[s].q;
   end
 
@@ -216,6 +250,7 @@ module rv_plic import rv_plic_reg_pkg::*; #(
     .reg2hw,
     .hw2reg,
 
+    .intg_err_o (),
     .devmode_i  (1'b1)
   );

diff --git a/hw/ip/rv_plic/rtl/rv_plic_reg_pkg.sv b/hw/ip/rv_plic/rtl/rv_plic_reg_pkg.sv
index e4ffbc2..8d36b33 100644
--- a/hw/ip/rv_plic/rtl/rv_plic_reg_pkg.sv
+++ b/hw/ip/rv_plic/rtl/rv_plic_reg_pkg.sv
@@ -7,11 +7,12 @@
 package rv_plic_reg_pkg;
 
   // Param list
-  parameter int NumSrc = 32;
+  parameter int NumSrc = 64;
   parameter int NumTarget = 1;
+  parameter int PrioWidth = 3;
 
   // Address widths within the block
-  parameter int BlockAw = 9;
+  parameter int BlockAw = 10;
 
   ////////////////////////////
   // Typedefs for registers //
@@ -149,6 +150,134 @@ package rv_plic_reg_pkg;
     logic [2:0]  q;
   } rv_plic_reg2hw_prio31_reg_t;
 
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio32_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio33_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio34_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio35_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio36_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio37_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio38_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio39_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio40_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio41_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio42_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio43_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio44_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio45_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio46_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio47_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio48_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio49_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio50_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio51_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio52_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio53_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio54_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio55_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio56_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio57_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio58_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio59_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio60_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio61_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio62_reg_t;
+
+  typedef struct packed {
+    logic [2:0]  q;
+  } rv_plic_reg2hw_prio63_reg_t;
+
   typedef struct packed {
     logic        q;
   } rv_plic_reg2hw_ie0_mreg_t;
@@ -178,40 +307,72 @@ package rv_plic_reg_pkg;
 
   // Register -> HW type
   typedef struct packed {
-    rv_plic_reg2hw_le_mreg_t [31:0] le; // [171:140]
-    rv_plic_reg2hw_prio0_reg_t prio0; // [139:137]
-    rv_plic_reg2hw_prio1_reg_t prio1; // [136:134]
-    rv_plic_reg2hw_prio2_reg_t prio2; // [133:131]
-    rv_plic_reg2hw_prio3_reg_t prio3; // [130:128]
-    rv_plic_reg2hw_prio4_reg_t prio4; // [127:125]
-    rv_plic_reg2hw_prio5_reg_t prio5; // [124:122]
-    rv_plic_reg2hw_prio6_reg_t prio6; // [121:119]
-    rv_plic_reg2hw_prio7_reg_t prio7; // [118:116]
-    rv_plic_reg2hw_prio8_reg_t prio8; // [115:113]
-    rv_plic_reg2hw_prio9_reg_t prio9; // [112:110]
-    rv_plic_reg2hw_prio10_reg_t prio10; // [109:107]
-    rv_plic_reg2hw_prio11_reg_t prio11; // [106:104]
-    rv_plic_reg2hw_prio12_reg_t prio12; // [103:101]
-    rv_plic_reg2hw_prio13_reg_t prio13; // [100:98]
-    rv_plic_reg2hw_prio14_reg_t prio14; // [97:95]
-    rv_plic_reg2hw_prio15_reg_t prio15; // [94:92]
-    rv_plic_reg2hw_prio16_reg_t prio16; // [91:89]
-    rv_plic_reg2hw_prio17_reg_t prio17; // [88:86]
-    rv_plic_reg2hw_prio18_reg_t prio18; // [85:83]
-    rv_plic_reg2hw_prio19_reg_t prio19; // [82:80]
-    rv_plic_reg2hw_prio20_reg_t prio20; // [79:77]
-    rv_plic_reg2hw_prio21_reg_t prio21; // [76:74]
-    rv_plic_reg2hw_prio22_reg_t prio22; // [73:71]
-    rv_plic_reg2hw_prio23_reg_t prio23; // [70:68]
-    rv_plic_reg2hw_prio24_reg_t prio24; // [67:65]
-    rv_plic_reg2hw_prio25_reg_t prio25; // [64:62]
-    rv_plic_reg2hw_prio26_reg_t prio26; // [61:59]
-    rv_plic_reg2hw_prio27_reg_t prio27; // [58:56]
-    rv_plic_reg2hw_prio28_reg_t prio28; // [55:53]
-    rv_plic_reg2hw_prio29_reg_t prio29; // [52:50]
-    rv_plic_reg2hw_prio30_reg_t prio30; // [49:47]
-    rv_plic_reg2hw_prio31_reg_t prio31; // [46:44]
-    rv_plic_reg2hw_ie0_mreg_t [31:0] ie0; // [43:12]
+    rv_plic_reg2hw_le_mreg_t [63:0] le; // [331:268]
+    rv_plic_reg2hw_prio0_reg_t prio0; // [267:265]
+    rv_plic_reg2hw_prio1_reg_t prio1; // [264:262]
+    rv_plic_reg2hw_prio2_reg_t prio2; // [261:259]
+    rv_plic_reg2hw_prio3_reg_t prio3; // [258:256]
+    rv_plic_reg2hw_prio4_reg_t prio4; // [255:253]
+    rv_plic_reg2hw_prio5_reg_t prio5; // [252:250]
+    rv_plic_reg2hw_prio6_reg_t prio6; // [249:247]
+    rv_plic_reg2hw_prio7_reg_t prio7; // [246:244]
+    rv_plic_reg2hw_prio8_reg_t prio8; // [243:241]
+    rv_plic_reg2hw_prio9_reg_t prio9; // [240:238]
+    rv_plic_reg2hw_prio10_reg_t prio10; // [237:235]
+    rv_plic_reg2hw_prio11_reg_t prio11; // [234:232]
+    rv_plic_reg2hw_prio12_reg_t prio12; // [231:229]
+    rv_plic_reg2hw_prio13_reg_t prio13; // [228:226]
+    rv_plic_reg2hw_prio14_reg_t prio14; // [225:223]
+    rv_plic_reg2hw_prio15_reg_t prio15; // [222:220]
+    rv_plic_reg2hw_prio16_reg_t prio16; // [219:217]
+    rv_plic_reg2hw_prio17_reg_t prio17; // [216:214]
+    rv_plic_reg2hw_prio18_reg_t prio18; // [213:211]
+    rv_plic_reg2hw_prio19_reg_t prio19; // [210:208]
+    rv_plic_reg2hw_prio20_reg_t prio20; // [207:205]
+    rv_plic_reg2hw_prio21_reg_t prio21; // [204:202]
+    rv_plic_reg2hw_prio22_reg_t prio22; // [201:199]
+    rv_plic_reg2hw_prio23_reg_t prio23; // [198:196]
+    rv_plic_reg2hw_prio24_reg_t prio24; // [195:193]
+    rv_plic_reg2hw_prio25_reg_t prio25; // [192:190]
+    rv_plic_reg2hw_prio26_reg_t prio26; // [189:187]
+    rv_plic_reg2hw_prio27_reg_t prio27; // [186:184]
+    rv_plic_reg2hw_prio28_reg_t prio28; // [183:181]
+    rv_plic_reg2hw_prio29_reg_t prio29; // [180:178]
+    rv_plic_reg2hw_prio30_reg_t prio30; // [177:175]
+    rv_plic_reg2hw_prio31_reg_t prio31; // [174:172]
+    rv_plic_reg2hw_prio32_reg_t prio32; // [171:169]
+    rv_plic_reg2hw_prio33_reg_t prio33; // [168:166]
+    rv_plic_reg2hw_prio34_reg_t prio34; // [165:163]
+    rv_plic_reg2hw_prio35_reg_t prio35; // [162:160]
+    rv_plic_reg2hw_prio36_reg_t prio36; // [159:157]
+    rv_plic_reg2hw_prio37_reg_t prio37; // [156:154]
+    rv_plic_reg2hw_prio38_reg_t prio38; // [153:151]
+    rv_plic_reg2hw_prio39_reg_t prio39; // [150:148]
+    rv_plic_reg2hw_prio40_reg_t prio40; // [147:145]
+    rv_plic_reg2hw_prio41_reg_t prio41; // [144:142]
+    rv_plic_reg2hw_prio42_reg_t prio42; // [141:139]
+    rv_plic_reg2hw_prio43_reg_t prio43; // [138:136]
+    rv_plic_reg2hw_prio44_reg_t prio44; // [135:133]
+    rv_plic_reg2hw_prio45_reg_t prio45; // [132:130]
+    rv_plic_reg2hw_prio46_reg_t prio46; // [129:127]
+    rv_plic_reg2hw_prio47_reg_t prio47; // [126:124]
+    rv_plic_reg2hw_prio48_reg_t prio48; // [123:121]
+    rv_plic_reg2hw_prio49_reg_t prio49; // [120:118]
+    rv_plic_reg2hw_prio50_reg_t prio50; // [117:115]
+    rv_plic_reg2hw_prio51_reg_t prio51; // [114:112]
+    rv_plic_reg2hw_prio52_reg_t prio52; // [111:109]
+    rv_plic_reg2hw_prio53_reg_t prio53; // [108:106]
+    rv_plic_reg2hw_prio54_reg_t prio54; // [105:103]
+    rv_plic_reg2hw_prio55_reg_t prio55; // [102:100]
+    rv_plic_reg2hw_prio56_reg_t prio56; // [99:97]
+    rv_plic_reg2hw_prio57_reg_t prio57; // [96:94]
+    rv_plic_reg2hw_prio58_reg_t prio58; // [93:91]
+    rv_plic_reg2hw_prio59_reg_t prio59; // [90:88]
+    rv_plic_reg2hw_prio60_reg_t prio60; // [87:85]
+    rv_plic_reg2hw_prio61_reg_t prio61; // [84:82]
+    rv_plic_reg2hw_prio62_reg_t prio62; // [81:79]
+    rv_plic_reg2hw_prio63_reg_t prio63; // [78:76]
+    rv_plic_reg2hw_ie0_mreg_t [63:0] ie0; // [75:12]
     rv_plic_reg2hw_threshold0_reg_t threshold0; // [11:9]
     rv_plic_reg2hw_cc0_reg_t cc0; // [8:1]
     rv_plic_reg2hw_msip0_reg_t msip0; // [0:0]
@@ -219,57 +380,94 @@ package rv_plic_reg_pkg;
 
   // HW -> register type
   typedef struct packed {
-    rv_plic_hw2reg_ip_mreg_t [31:0] ip; // [69:6]
+    rv_plic_hw2reg_ip_mreg_t [63:0] ip; // [133:6]
     rv_plic_hw2reg_cc0_reg_t cc0; // [5:0]
   } rv_plic_hw2reg_t;
 
   // Register offsets
-  parameter logic [BlockAw-1:0] RV_PLIC_IP_OFFSET = 9'h 0;
-  parameter logic [BlockAw-1:0] RV_PLIC_LE_OFFSET = 9'h 4;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO0_OFFSET = 9'h 8;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO1_OFFSET = 9'h c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO2_OFFSET = 9'h 10;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO3_OFFSET = 9'h 14;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO4_OFFSET = 9'h 18;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO5_OFFSET = 9'h 1c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO6_OFFSET = 9'h 20;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO7_OFFSET = 9'h 24;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO8_OFFSET = 9'h 28;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO9_OFFSET = 9'h 2c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO10_OFFSET = 9'h 30;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO11_OFFSET = 9'h 34;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO12_OFFSET = 9'h 38;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO13_OFFSET = 9'h 3c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO14_OFFSET = 9'h 40;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO15_OFFSET = 9'h 44;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO16_OFFSET = 9'h 48;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO17_OFFSET = 9'h 4c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO18_OFFSET = 9'h 50;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO19_OFFSET = 9'h 54;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO20_OFFSET = 9'h 58;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO21_OFFSET = 9'h 5c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO22_OFFSET = 9'h 60;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO23_OFFSET = 9'h 64;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO24_OFFSET = 9'h 68;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO25_OFFSET = 9'h 6c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO26_OFFSET = 9'h 70;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO27_OFFSET = 9'h 74;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO28_OFFSET = 9'h 78;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO29_OFFSET = 9'h 7c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO30_OFFSET = 9'h 80;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO31_OFFSET = 9'h 84;
-  parameter logic [BlockAw-1:0] RV_PLIC_IE0_OFFSET = 9'h 100;
-  parameter logic [BlockAw-1:0] RV_PLIC_THRESHOLD0_OFFSET = 9'h 104;
-  parameter logic [BlockAw-1:0] RV_PLIC_CC0_OFFSET = 9'h 108;
-  parameter logic [BlockAw-1:0] RV_PLIC_MSIP0_OFFSET = 9'h 10c;
+  parameter logic [BlockAw-1:0] RV_PLIC_IP_0_OFFSET = 10'h 0;
+  parameter logic [BlockAw-1:0] RV_PLIC_IP_1_OFFSET = 10'h 4;
+  parameter logic [BlockAw-1:0] RV_PLIC_LE_0_OFFSET = 10'h 8;
+  parameter logic [BlockAw-1:0] RV_PLIC_LE_1_OFFSET = 10'h c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO0_OFFSET = 10'h 10;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO1_OFFSET = 10'h 14;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO2_OFFSET = 10'h 18;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO3_OFFSET = 10'h 1c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO4_OFFSET = 10'h 20;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO5_OFFSET = 10'h 24;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO6_OFFSET = 10'h 28;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO7_OFFSET = 10'h 2c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO8_OFFSET = 10'h 30;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO9_OFFSET = 10'h 34;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO10_OFFSET = 10'h 38;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO11_OFFSET = 10'h 3c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO12_OFFSET = 10'h 40;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO13_OFFSET = 10'h 44;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO14_OFFSET = 10'h 48;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO15_OFFSET = 10'h 4c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO16_OFFSET = 10'h 50;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO17_OFFSET = 10'h 54;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO18_OFFSET = 10'h 58;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO19_OFFSET = 10'h 5c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO20_OFFSET = 10'h 60;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO21_OFFSET = 10'h 64;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO22_OFFSET = 10'h 68;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO23_OFFSET = 10'h 6c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO24_OFFSET = 10'h 70;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO25_OFFSET = 10'h 74;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO26_OFFSET = 10'h 78;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO27_OFFSET = 10'h 7c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO28_OFFSET = 10'h 80;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO29_OFFSET = 10'h 84;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO30_OFFSET = 10'h 88;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO31_OFFSET = 10'h 8c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO32_OFFSET = 10'h 90;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO33_OFFSET = 10'h 94;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO34_OFFSET = 10'h 98;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO35_OFFSET = 10'h 9c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO36_OFFSET = 10'h a0;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO37_OFFSET = 10'h a4;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO38_OFFSET = 10'h a8;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO39_OFFSET = 10'h ac;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO40_OFFSET = 10'h b0;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO41_OFFSET = 10'h b4;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO42_OFFSET = 10'h b8;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO43_OFFSET = 10'h bc;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO44_OFFSET = 10'h c0;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO45_OFFSET = 10'h c4;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO46_OFFSET = 10'h c8;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO47_OFFSET = 10'h cc;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO48_OFFSET = 10'h d0;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO49_OFFSET = 10'h d4;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO50_OFFSET = 10'h d8;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO51_OFFSET = 10'h dc;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO52_OFFSET = 10'h e0;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO53_OFFSET = 10'h e4;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO54_OFFSET = 10'h e8;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO55_OFFSET = 10'h ec;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO56_OFFSET = 10'h f0;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO57_OFFSET = 10'h f4;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO58_OFFSET = 10'h f8;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO59_OFFSET = 10'h fc;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO60_OFFSET = 10'h 100;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO61_OFFSET = 10'h 104;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO62_OFFSET = 10'h 108;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO63_OFFSET = 10'h 10c;
+  parameter logic [BlockAw-1:0] RV_PLIC_IE0_0_OFFSET = 10'h 200;
+  parameter logic [BlockAw-1:0] RV_PLIC_IE0_1_OFFSET = 10'h 204;
+  parameter logic [BlockAw-1:0] RV_PLIC_THRESHOLD0_OFFSET = 10'h 208;
+  parameter logic [BlockAw-1:0] RV_PLIC_CC0_OFFSET = 10'h 20c;
+  parameter logic [BlockAw-1:0] RV_PLIC_MSIP0_OFFSET = 10'h 210;
 
   // Reset values for hwext registers and their fields
   parameter logic [5:0] RV_PLIC_CC0_RESVAL = 6'h 0;
 
   // Register index
   typedef enum int {
-    RV_PLIC_IP,
-    RV_PLIC_LE,
+    RV_PLIC_IP_0,
+    RV_PLIC_IP_1,
+    RV_PLIC_LE_0,
+    RV_PLIC_LE_1,
     RV_PLIC_PRIO0,
     RV_PLIC_PRIO1,
     RV_PLIC_PRIO2,
@@ -302,52 +500,120 @@ package rv_plic_reg_pkg;
     RV_PLIC_PRIO29,
     RV_PLIC_PRIO30,
     RV_PLIC_PRIO31,
-    RV_PLIC_IE0,
+    RV_PLIC_PRIO32,
+    RV_PLIC_PRIO33,
+    RV_PLIC_PRIO34,
+    RV_PLIC_PRIO35,
+    RV_PLIC_PRIO36,
+    RV_PLIC_PRIO37,
+    RV_PLIC_PRIO38,
+    RV_PLIC_PRIO39,
+    RV_PLIC_PRIO40,
+    RV_PLIC_PRIO41,
+    RV_PLIC_PRIO42,
+    RV_PLIC_PRIO43,
+    RV_PLIC_PRIO44,
+    RV_PLIC_PRIO45,
+    RV_PLIC_PRIO46,
+    RV_PLIC_PRIO47,
+    RV_PLIC_PRIO48,
+    RV_PLIC_PRIO49,
+    RV_PLIC_PRIO50,
+    RV_PLIC_PRIO51,
+    RV_PLIC_PRIO52,
+    RV_PLIC_PRIO53,
+    RV_PLIC_PRIO54,
+    RV_PLIC_PRIO55,
+    RV_PLIC_PRIO56,
+    RV_PLIC_PRIO57,
+    RV_PLIC_PRIO58,
+    RV_PLIC_PRIO59,
+    RV_PLIC_PRIO60,
+    RV_PLIC_PRIO61,
+    RV_PLIC_PRIO62,
+    RV_PLIC_PRIO63,
+    RV_PLIC_IE0_0,
+    RV_PLIC_IE0_1,
     RV_PLIC_THRESHOLD0,
     RV_PLIC_CC0,
     RV_PLIC_MSIP0
   } rv_plic_id_e;
 
   // Register width information to check illegal writes
-  parameter logic [3:0] RV_PLIC_PERMIT [38] = '{
-    4'b 1111, // index[ 0] RV_PLIC_IP
-    4'b 1111, // index[ 1] RV_PLIC_LE
-    4'b 0001, // index[ 2] RV_PLIC_PRIO0
-    4'b 0001, // index[ 3] RV_PLIC_PRIO1
-    4'b 0001, // index[ 4] RV_PLIC_PRIO2
-    4'b 0001, // index[ 5] RV_PLIC_PRIO3
-    4'b 0001, // index[ 6] RV_PLIC_PRIO4
-    4'b 0001, // index[ 7] RV_PLIC_PRIO5
-    4'b 0001, // index[ 8] RV_PLIC_PRIO6
-    4'b 0001, // index[ 9] RV_PLIC_PRIO7
-    4'b 0001, // index[10] RV_PLIC_PRIO8
-    4'b 0001, // index[11] RV_PLIC_PRIO9
-    4'b 0001, // index[12] RV_PLIC_PRIO10
-    4'b 0001, // index[13] RV_PLIC_PRIO11
-    4'b 0001, // index[14] RV_PLIC_PRIO12
-    4'b 0001, // index[15] RV_PLIC_PRIO13
-    4'b 0001, // index[16] RV_PLIC_PRIO14
-    4'b 0001, // index[17] RV_PLIC_PRIO15
-    4'b 0001, // index[18] RV_PLIC_PRIO16
-    4'b 0001, // index[19] RV_PLIC_PRIO17
-    4'b 0001, // index[20] RV_PLIC_PRIO18
-    4'b 0001, // index[21] RV_PLIC_PRIO19
-    4'b 0001, // index[22] RV_PLIC_PRIO20
-    4'b 0001, // index[23] RV_PLIC_PRIO21
-    4'b 0001, // index[24] RV_PLIC_PRIO22
-    4'b 0001, // index[25] RV_PLIC_PRIO23
-    4'b 0001, // index[26] RV_PLIC_PRIO24
-    4'b 0001, // index[27] RV_PLIC_PRIO25
-    4'b 0001, // index[28] RV_PLIC_PRIO26
-    4'b 0001, // index[29] RV_PLIC_PRIO27
-    4'b 0001, // index[30] RV_PLIC_PRIO28
-    4'b 0001, // index[31] RV_PLIC_PRIO29
-    4'b 0001, // index[32] RV_PLIC_PRIO30
-    4'b 0001, // index[33] RV_PLIC_PRIO31
-    4'b 1111, // index[34] RV_PLIC_IE0
-    4'b 0001, // index[35] RV_PLIC_THRESHOLD0
-    4'b 0001, // index[36] RV_PLIC_CC0
-    4'b 0001  // index[37] RV_PLIC_MSIP0
+  parameter logic [3:0] RV_PLIC_PERMIT [73] = '{
+    4'b 1111, // index[ 0] RV_PLIC_IP_0
+    4'b 1111, // index[ 1] RV_PLIC_IP_1
+    4'b 1111, // index[ 2] RV_PLIC_LE_0
+    4'b 1111, // index[ 3] RV_PLIC_LE_1
+    4'b 0001, // index[ 4] RV_PLIC_PRIO0
+    4'b 0001, // index[ 5] RV_PLIC_PRIO1
+    4'b 0001, // index[ 6] RV_PLIC_PRIO2
+    4'b 0001, // index[ 7] RV_PLIC_PRIO3
+    4'b 0001, // index[ 8] RV_PLIC_PRIO4
+    4'b 0001, // index[ 9] RV_PLIC_PRIO5
+    4'b 0001, // index[10] RV_PLIC_PRIO6
+    4'b 0001, // index[11] RV_PLIC_PRIO7
+    4'b 0001, // index[12] RV_PLIC_PRIO8
+    4'b 0001, // index[13] RV_PLIC_PRIO9
+    4'b 0001, // index[14] RV_PLIC_PRIO10
+    4'b 0001, // index[15] RV_PLIC_PRIO11
+    4'b 0001, // index[16] RV_PLIC_PRIO12
+    4'b 0001, // index[17] RV_PLIC_PRIO13
+    4'b 0001, // index[18] RV_PLIC_PRIO14
+    4'b 0001, // index[19] RV_PLIC_PRIO15
+    4'b 0001, // index[20] RV_PLIC_PRIO16
+    4'b 0001, // index[21] RV_PLIC_PRIO17
+    4'b 0001, // index[22] RV_PLIC_PRIO18
+    4'b 0001, // index[23] RV_PLIC_PRIO19
+    4'b 0001, // index[24] RV_PLIC_PRIO20
+    4'b 0001, // index[25] RV_PLIC_PRIO21
+    4'b 0001, // index[26] RV_PLIC_PRIO22
+    4'b 0001, // index[27] RV_PLIC_PRIO23
+    4'b 0001, // index[28] RV_PLIC_PRIO24
+    4'b 0001, // index[29] RV_PLIC_PRIO25
+    4'b 0001, // index[30] RV_PLIC_PRIO26
+    4'b 0001, // index[31] RV_PLIC_PRIO27
+    4'b 0001, // index[32] RV_PLIC_PRIO28
+    4'b 0001, // index[33] RV_PLIC_PRIO29
+    4'b 0001, // index[34] RV_PLIC_PRIO30
+    4'b 0001, // index[35] RV_PLIC_PRIO31
+    4'b 0001, // index[36] RV_PLIC_PRIO32
+    4'b 0001, // index[37] RV_PLIC_PRIO33
+    4'b 0001, // index[38] RV_PLIC_PRIO34
+    4'b 0001, // index[39] RV_PLIC_PRIO35
+    4'b 0001, // index[40] RV_PLIC_PRIO36
+    4'b 0001, // index[41] RV_PLIC_PRIO37
+    4'b 0001, // index[42] RV_PLIC_PRIO38
+    4'b 0001, // index[43] RV_PLIC_PRIO39
+    4'b 0001, // index[44] RV_PLIC_PRIO40
+    4'b 0001, // index[45] RV_PLIC_PRIO41
+    4'b 0001, // index[46] RV_PLIC_PRIO42
+    4'b 0001, // index[47] RV_PLIC_PRIO43
+    4'b 0001, // index[48] RV_PLIC_PRIO44
+    4'b 0001, // index[49] RV_PLIC_PRIO45
+    4'b 0001, // index[50] RV_PLIC_PRIO46
+    4'b 0001, // index[51] RV_PLIC_PRIO47
+    4'b 0001, // index[52] RV_PLIC_PRIO48
+    4'b 0001, // index[53] RV_PLIC_PRIO49
+    4'b 0001, // index[54] RV_PLIC_PRIO50
+    4'b 0001, // index[55] RV_PLIC_PRIO51
+    4'b 0001, // index[56] RV_PLIC_PRIO52
+    4'b 0001, // index[57] RV_PLIC_PRIO53
+    4'b 0001, // index[58] RV_PLIC_PRIO54
+    4'b 0001, // index[59] RV_PLIC_PRIO55
+    4'b 0001, // index[60] RV_PLIC_PRIO56
+    4'b 0001, // index[61] RV_PLIC_PRIO57
+    4'b 0001, // index[62] RV_PLIC_PRIO58
+    4'b 0001, // index[63] RV_PLIC_PRIO59
+    4'b 0001, // index[64] RV_PLIC_PRIO60
+    4'b 0001, // index[65] RV_PLIC_PRIO61
+    4'b 0001, // index[66] RV_PLIC_PRIO62
+    4'b 0001, // index[67] RV_PLIC_PRIO63
+    4'b 1111, // index[68] RV_PLIC_IE0_0
+    4'b 1111, // index[69] RV_PLIC_IE0_1
+    4'b 0001, // index[70] RV_PLIC_THRESHOLD0
+    4'b 0001, // index[71] RV_PLIC_CC0
+    4'b 0001  // index[72] RV_PLIC_MSIP0
   };
 
 endpackage

diff --git a/hw/ip/rv_plic/rtl/rv_plic_target.sv b/hw/ip/rv_plic/rtl/rv_plic_target.sv
index 55b6381..91ece67 100644
--- a/hw/ip/rv_plic/rtl/rv_plic_target.sv
+++ b/hw/ip/rv_plic/rtl/rv_plic_target.sv
@@ -19,7 +19,7 @@ module rv_plic_target #(
   parameter int MAX_PRIO = 7,
 
   // Local param (Do not change this through parameter
-  localparam int SrcWidth  = $clog2(N_SOURCE+1),  // derived parameter
+  localparam int SrcWidth  = 6,  // derived parameter
   localparam int PrioWidth = $clog2(MAX_PRIO+1)   // derived parameter
 ) (
   input clk_i,

diff --git a/hw/ip/rv_plic/rtl/rv_plic_reg_top.sv b/hw/ip/rv_plic/rtl/rv_plic_reg_top.sv
index ea99b23..686748c 100644
--- a/hw/ip/rv_plic/rtl/rv_plic_reg_top.sv
+++ b/hw/ip/rv_plic/rtl/rv_plic_reg_top.sv
@@ -4,12 +4,14 @@
 //
 // Register Top module auto-generated by `reggen`
 
+
 `include "prim_assert.sv"
 
-module rv_plic_reg_top (
+module rv_plic_reg_top #(
+    parameter int AW = 10
+) (
   input clk_i,
   input rst_ni,
-
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
@@ -25,7 +27,6 @@ module rv_plic_reg_top (
 
   import rv_plic_reg_pkg::* ;
 
-  localparam int AW = 9;
   localparam int DW = 32;
   localparam int DBW = DW/8;                    // Byte Width
 
@@ -45,38 +46,13 @@ module rv_plic_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i,
-    .err_o(intg_err)
-  );
-
-  logic intg_err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      intg_err_q <= '0;
-    end else if (intg_err) begin
-      intg_err_q <= 1'b1;
-    end
-  end
-
   // integrity error output is permanent and should be used for alert generation
   // register errors are transactional
-  assign intg_err_o = intg_err_q | intg_err;
-
-  // outgoing integrity generation
-  tlul_pkg::tl_d2h_t tl_o_pre;
-  tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
-  ) u_rsp_intg_gen (
-    .tl_i(tl_o_pre),
-    .tl_o
-  );
+  assign intg_err_o = 1'b0;
 
   assign tl_reg_h2d = tl_i;
-  assign tl_o_pre   = tl_reg_d2h;
+  assign tl_o       = tl_reg_d2h;
+
 
   tlul_adapter_reg #(
     .RegAw(AW),
@@ -99,139 +75,268 @@ module rv_plic_reg_top (
   );
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;
+  assign reg_error = (devmode_i & addrmiss) | wr_err;
+
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
   //        or <reg>_{wd|we|qs} if field == 1 or 0
-  logic ip_p_0_qs;
-  logic ip_p_1_qs;
-  logic ip_p_2_qs;
-  logic ip_p_3_qs;
-  logic ip_p_4_qs;
-  logic ip_p_5_qs;
-  logic ip_p_6_qs;
-  logic ip_p_7_qs;
-  logic ip_p_8_qs;
-  logic ip_p_9_qs;
-  logic ip_p_10_qs;
-  logic ip_p_11_qs;
-  logic ip_p_12_qs;
-  logic ip_p_13_qs;
-  logic ip_p_14_qs;
-  logic ip_p_15_qs;
-  logic ip_p_16_qs;
-  logic ip_p_17_qs;
-  logic ip_p_18_qs;
-  logic ip_p_19_qs;
-  logic ip_p_20_qs;
-  logic ip_p_21_qs;
-  logic ip_p_22_qs;
-  logic ip_p_23_qs;
-  logic ip_p_24_qs;
-  logic ip_p_25_qs;
-  logic ip_p_26_qs;
-  logic ip_p_27_qs;
-  logic ip_p_28_qs;
-  logic ip_p_29_qs;
-  logic ip_p_30_qs;
-  logic ip_p_31_qs;
-  logic le_le_0_qs;
-  logic le_le_0_wd;
-  logic le_le_0_we;
-  logic le_le_1_qs;
-  logic le_le_1_wd;
-  logic le_le_1_we;
-  logic le_le_2_qs;
-  logic le_le_2_wd;
-  logic le_le_2_we;
-  logic le_le_3_qs;
-  logic le_le_3_wd;
-  logic le_le_3_we;
-  logic le_le_4_qs;
-  logic le_le_4_wd;
-  logic le_le_4_we;
-  logic le_le_5_qs;
-  logic le_le_5_wd;
-  logic le_le_5_we;
-  logic le_le_6_qs;
-  logic le_le_6_wd;
-  logic le_le_6_we;
-  logic le_le_7_qs;
-  logic le_le_7_wd;
-  logic le_le_7_we;
-  logic le_le_8_qs;
-  logic le_le_8_wd;
-  logic le_le_8_we;
-  logic le_le_9_qs;
-  logic le_le_9_wd;
-  logic le_le_9_we;
-  logic le_le_10_qs;
-  logic le_le_10_wd;
-  logic le_le_10_we;
-  logic le_le_11_qs;
-  logic le_le_11_wd;
-  logic le_le_11_we;
-  logic le_le_12_qs;
-  logic le_le_12_wd;
-  logic le_le_12_we;
-  logic le_le_13_qs;
-  logic le_le_13_wd;
-  logic le_le_13_we;
-  logic le_le_14_qs;
-  logic le_le_14_wd;
-  logic le_le_14_we;
-  logic le_le_15_qs;
-  logic le_le_15_wd;
-  logic le_le_15_we;
-  logic le_le_16_qs;
-  logic le_le_16_wd;
-  logic le_le_16_we;
-  logic le_le_17_qs;
-  logic le_le_17_wd;
-  logic le_le_17_we;
-  logic le_le_18_qs;
-  logic le_le_18_wd;
-  logic le_le_18_we;
-  logic le_le_19_qs;
-  logic le_le_19_wd;
-  logic le_le_19_we;
-  logic le_le_20_qs;
-  logic le_le_20_wd;
-  logic le_le_20_we;
-  logic le_le_21_qs;
-  logic le_le_21_wd;
-  logic le_le_21_we;
-  logic le_le_22_qs;
-  logic le_le_22_wd;
-  logic le_le_22_we;
-  logic le_le_23_qs;
-  logic le_le_23_wd;
-  logic le_le_23_we;
-  logic le_le_24_qs;
-  logic le_le_24_wd;
-  logic le_le_24_we;
-  logic le_le_25_qs;
-  logic le_le_25_wd;
-  logic le_le_25_we;
-  logic le_le_26_qs;
-  logic le_le_26_wd;
-  logic le_le_26_we;
-  logic le_le_27_qs;
-  logic le_le_27_wd;
-  logic le_le_27_we;
-  logic le_le_28_qs;
-  logic le_le_28_wd;
-  logic le_le_28_we;
-  logic le_le_29_qs;
-  logic le_le_29_wd;
-  logic le_le_29_we;
-  logic le_le_30_qs;
-  logic le_le_30_wd;
-  logic le_le_30_we;
-  logic le_le_31_qs;
-  logic le_le_31_wd;
-  logic le_le_31_we;
+  logic ip_0_p_0_qs;
+  logic ip_0_p_1_qs;
+  logic ip_0_p_2_qs;
+  logic ip_0_p_3_qs;
+  logic ip_0_p_4_qs;
+  logic ip_0_p_5_qs;
+  logic ip_0_p_6_qs;
+  logic ip_0_p_7_qs;
+  logic ip_0_p_8_qs;
+  logic ip_0_p_9_qs;
+  logic ip_0_p_10_qs;
+  logic ip_0_p_11_qs;
+  logic ip_0_p_12_qs;
+  logic ip_0_p_13_qs;
+  logic ip_0_p_14_qs;
+  logic ip_0_p_15_qs;
+  logic ip_0_p_16_qs;
+  logic ip_0_p_17_qs;
+  logic ip_0_p_18_qs;
+  logic ip_0_p_19_qs;
+  logic ip_0_p_20_qs;
+  logic ip_0_p_21_qs;
+  logic ip_0_p_22_qs;
+  logic ip_0_p_23_qs;
+  logic ip_0_p_24_qs;
+  logic ip_0_p_25_qs;
+  logic ip_0_p_26_qs;
+  logic ip_0_p_27_qs;
+  logic ip_0_p_28_qs;
+  logic ip_0_p_29_qs;
+  logic ip_0_p_30_qs;
+  logic ip_0_p_31_qs;
+  logic ip_1_p_32_qs;
+  logic ip_1_p_33_qs;
+  logic ip_1_p_34_qs;
+  logic ip_1_p_35_qs;
+  logic ip_1_p_36_qs;
+  logic ip_1_p_37_qs;
+  logic ip_1_p_38_qs;
+  logic ip_1_p_39_qs;
+  logic ip_1_p_40_qs;
+  logic ip_1_p_41_qs;
+  logic ip_1_p_42_qs;
+  logic ip_1_p_43_qs;
+  logic ip_1_p_44_qs;
+  logic ip_1_p_45_qs;
+  logic ip_1_p_46_qs;
+  logic ip_1_p_47_qs;
+  logic ip_1_p_48_qs;
+  logic ip_1_p_49_qs;
+  logic ip_1_p_50_qs;
+  logic ip_1_p_51_qs;
+  logic ip_1_p_52_qs;
+  logic ip_1_p_53_qs;
+  logic ip_1_p_54_qs;
+  logic ip_1_p_55_qs;
+  logic ip_1_p_56_qs;
+  logic ip_1_p_57_qs;
+  logic ip_1_p_58_qs;
+  logic ip_1_p_59_qs;
+  logic ip_1_p_60_qs;
+  logic ip_1_p_61_qs;
+  logic ip_1_p_62_qs;
+  logic ip_1_p_63_qs;
+  logic le_0_le_0_qs;
+  logic le_0_le_0_wd;
+  logic le_0_le_0_we;
+  logic le_0_le_1_qs;
+  logic le_0_le_1_wd;
+  logic le_0_le_1_we;
+  logic le_0_le_2_qs;
+  logic le_0_le_2_wd;
+  logic le_0_le_2_we;
+  logic le_0_le_3_qs;
+  logic le_0_le_3_wd;
+  logic le_0_le_3_we;
+  logic le_0_le_4_qs;
+  logic le_0_le_4_wd;
+  logic le_0_le_4_we;
+  logic le_0_le_5_qs;
+  logic le_0_le_5_wd;
+  logic le_0_le_5_we;
+  logic le_0_le_6_qs;
+  logic le_0_le_6_wd;
+  logic le_0_le_6_we;
+  logic le_0_le_7_qs;
+  logic le_0_le_7_wd;
+  logic le_0_le_7_we;
+  logic le_0_le_8_qs;
+  logic le_0_le_8_wd;
+  logic le_0_le_8_we;
+  logic le_0_le_9_qs;
+  logic le_0_le_9_wd;
+  logic le_0_le_9_we;
+  logic le_0_le_10_qs;
+  logic le_0_le_10_wd;
+  logic le_0_le_10_we;
+  logic le_0_le_11_qs;
+  logic le_0_le_11_wd;
+  logic le_0_le_11_we;
+  logic le_0_le_12_qs;
+  logic le_0_le_12_wd;
+  logic le_0_le_12_we;
+  logic le_0_le_13_qs;
+  logic le_0_le_13_wd;
+  logic le_0_le_13_we;
+  logic le_0_le_14_qs;
+  logic le_0_le_14_wd;
+  logic le_0_le_14_we;
+  logic le_0_le_15_qs;
+  logic le_0_le_15_wd;
+  logic le_0_le_15_we;
+  logic le_0_le_16_qs;
+  logic le_0_le_16_wd;
+  logic le_0_le_16_we;
+  logic le_0_le_17_qs;
+  logic le_0_le_17_wd;
+  logic le_0_le_17_we;
+  logic le_0_le_18_qs;
+  logic le_0_le_18_wd;
+  logic le_0_le_18_we;
+  logic le_0_le_19_qs;
+  logic le_0_le_19_wd;
+  logic le_0_le_19_we;
+  logic le_0_le_20_qs;
+  logic le_0_le_20_wd;
+  logic le_0_le_20_we;
+  logic le_0_le_21_qs;
+  logic le_0_le_21_wd;
+  logic le_0_le_21_we;
+  logic le_0_le_22_qs;
+  logic le_0_le_22_wd;
+  logic le_0_le_22_we;
+  logic le_0_le_23_qs;
+  logic le_0_le_23_wd;
+  logic le_0_le_23_we;
+  logic le_0_le_24_qs;
+  logic le_0_le_24_wd;
+  logic le_0_le_24_we;
+  logic le_0_le_25_qs;
+  logic le_0_le_25_wd;
+  logic le_0_le_25_we;
+  logic le_0_le_26_qs;
+  logic le_0_le_26_wd;
+  logic le_0_le_26_we;
+  logic le_0_le_27_qs;
+  logic le_0_le_27_wd;
+  logic le_0_le_27_we;
+  logic le_0_le_28_qs;
+  logic le_0_le_28_wd;
+  logic le_0_le_28_we;
+  logic le_0_le_29_qs;
+  logic le_0_le_29_wd;
+  logic le_0_le_29_we;
+  logic le_0_le_30_qs;
+  logic le_0_le_30_wd;
+  logic le_0_le_30_we;
+  logic le_0_le_31_qs;
+  logic le_0_le_31_wd;
+  logic le_0_le_31_we;
+  logic le_1_le_32_qs;
+  logic le_1_le_32_wd;
+  logic le_1_le_32_we;
+  logic le_1_le_33_qs;
+  logic le_1_le_33_wd;
+  logic le_1_le_33_we;
+  logic le_1_le_34_qs;
+  logic le_1_le_34_wd;
+  logic le_1_le_34_we;
+  logic le_1_le_35_qs;
+  logic le_1_le_35_wd;
+  logic le_1_le_35_we;
+  logic le_1_le_36_qs;
+  logic le_1_le_36_wd;
+  logic le_1_le_36_we;
+  logic le_1_le_37_qs;
+  logic le_1_le_37_wd;
+  logic le_1_le_37_we;
+  logic le_1_le_38_qs;
+  logic le_1_le_38_wd;
+  logic le_1_le_38_we;
+  logic le_1_le_39_qs;
+  logic le_1_le_39_wd;
+  logic le_1_le_39_we;
+  logic le_1_le_40_qs;
+  logic le_1_le_40_wd;
+  logic le_1_le_40_we;
+  logic le_1_le_41_qs;
+  logic le_1_le_41_wd;
+  logic le_1_le_41_we;
+  logic le_1_le_42_qs;
+  logic le_1_le_42_wd;
+  logic le_1_le_42_we;
+  logic le_1_le_43_qs;
+  logic le_1_le_43_wd;
+  logic le_1_le_43_we;
+  logic le_1_le_44_qs;
+  logic le_1_le_44_wd;
+  logic le_1_le_44_we;
+  logic le_1_le_45_qs;
+  logic le_1_le_45_wd;
+  logic le_1_le_45_we;
+  logic le_1_le_46_qs;
+  logic le_1_le_46_wd;
+  logic le_1_le_46_we;
+  logic le_1_le_47_qs;
+  logic le_1_le_47_wd;
+  logic le_1_le_47_we;
+  logic le_1_le_48_qs;
+  logic le_1_le_48_wd;
+  logic le_1_le_48_we;
+  logic le_1_le_49_qs;
+  logic le_1_le_49_wd;
+  logic le_1_le_49_we;
+  logic le_1_le_50_qs;
+  logic le_1_le_50_wd;
+  logic le_1_le_50_we;
+  logic le_1_le_51_qs;
+  logic le_1_le_51_wd;
+  logic le_1_le_51_we;
+  logic le_1_le_52_qs;
+  logic le_1_le_52_wd;
+  logic le_1_le_52_we;
+  logic le_1_le_53_qs;
+  logic le_1_le_53_wd;
+  logic le_1_le_53_we;
+  logic le_1_le_54_qs;
+  logic le_1_le_54_wd;
+  logic le_1_le_54_we;
+  logic le_1_le_55_qs;
+  logic le_1_le_55_wd;
+  logic le_1_le_55_we;
+  logic le_1_le_56_qs;
+  logic le_1_le_56_wd;
+  logic le_1_le_56_we;
+  logic le_1_le_57_qs;
+  logic le_1_le_57_wd;
+  logic le_1_le_57_we;
+  logic le_1_le_58_qs;
+  logic le_1_le_58_wd;
+  logic le_1_le_58_we;
+  logic le_1_le_59_qs;
+  logic le_1_le_59_wd;
+  logic le_1_le_59_we;
+  logic le_1_le_60_qs;
+  logic le_1_le_60_wd;
+  logic le_1_le_60_we;
+  logic le_1_le_61_qs;
+  logic le_1_le_61_wd;
+  logic le_1_le_61_we;
+  logic le_1_le_62_qs;
+  logic le_1_le_62_wd;
+  logic le_1_le_62_we;
+  logic le_1_le_63_qs;
+  logic le_1_le_63_wd;
+  logic le_1_le_63_we;
   logic [2:0] prio0_qs;
   logic [2:0] prio0_wd;
   logic prio0_we;
@@ -328,102 +433,294 @@ module rv_plic_reg_top (
   logic [2:0] prio31_qs;
   logic [2:0] prio31_wd;
   logic prio31_we;
-  logic ie0_e_0_qs;
-  logic ie0_e_0_wd;
-  logic ie0_e_0_we;
-  logic ie0_e_1_qs;
-  logic ie0_e_1_wd;
-  logic ie0_e_1_we;
-  logic ie0_e_2_qs;
-  logic ie0_e_2_wd;
-  logic ie0_e_2_we;
-  logic ie0_e_3_qs;
-  logic ie0_e_3_wd;
-  logic ie0_e_3_we;
-  logic ie0_e_4_qs;
-  logic ie0_e_4_wd;
-  logic ie0_e_4_we;
-  logic ie0_e_5_qs;
-  logic ie0_e_5_wd;
-  logic ie0_e_5_we;
-  logic ie0_e_6_qs;
-  logic ie0_e_6_wd;
-  logic ie0_e_6_we;
-  logic ie0_e_7_qs;
-  logic ie0_e_7_wd;
-  logic ie0_e_7_we;
-  logic ie0_e_8_qs;
-  logic ie0_e_8_wd;
-  logic ie0_e_8_we;
-  logic ie0_e_9_qs;
-  logic ie0_e_9_wd;
-  logic ie0_e_9_we;
-  logic ie0_e_10_qs;
-  logic ie0_e_10_wd;
-  logic ie0_e_10_we;
-  logic ie0_e_11_qs;
-  logic ie0_e_11_wd;
-  logic ie0_e_11_we;
-  logic ie0_e_12_qs;
-  logic ie0_e_12_wd;
-  logic ie0_e_12_we;
-  logic ie0_e_13_qs;
-  logic ie0_e_13_wd;
-  logic ie0_e_13_we;
-  logic ie0_e_14_qs;
-  logic ie0_e_14_wd;
-  logic ie0_e_14_we;
-  logic ie0_e_15_qs;
-  logic ie0_e_15_wd;
-  logic ie0_e_15_we;
-  logic ie0_e_16_qs;
-  logic ie0_e_16_wd;
-  logic ie0_e_16_we;
-  logic ie0_e_17_qs;
-  logic ie0_e_17_wd;
-  logic ie0_e_17_we;
-  logic ie0_e_18_qs;
-  logic ie0_e_18_wd;
-  logic ie0_e_18_we;
-  logic ie0_e_19_qs;
-  logic ie0_e_19_wd;
-  logic ie0_e_19_we;
-  logic ie0_e_20_qs;
-  logic ie0_e_20_wd;
-  logic ie0_e_20_we;
-  logic ie0_e_21_qs;
-  logic ie0_e_21_wd;
-  logic ie0_e_21_we;
-  logic ie0_e_22_qs;
-  logic ie0_e_22_wd;
-  logic ie0_e_22_we;
-  logic ie0_e_23_qs;
-  logic ie0_e_23_wd;
-  logic ie0_e_23_we;
-  logic ie0_e_24_qs;
-  logic ie0_e_24_wd;
-  logic ie0_e_24_we;
-  logic ie0_e_25_qs;
-  logic ie0_e_25_wd;
-  logic ie0_e_25_we;
-  logic ie0_e_26_qs;
-  logic ie0_e_26_wd;
-  logic ie0_e_26_we;
-  logic ie0_e_27_qs;
-  logic ie0_e_27_wd;
-  logic ie0_e_27_we;
-  logic ie0_e_28_qs;
-  logic ie0_e_28_wd;
-  logic ie0_e_28_we;
-  logic ie0_e_29_qs;
-  logic ie0_e_29_wd;
-  logic ie0_e_29_we;
-  logic ie0_e_30_qs;
-  logic ie0_e_30_wd;
-  logic ie0_e_30_we;
-  logic ie0_e_31_qs;
-  logic ie0_e_31_wd;
-  logic ie0_e_31_we;
+  logic [2:0] prio32_qs;
+  logic [2:0] prio32_wd;
+  logic prio32_we;
+  logic [2:0] prio33_qs;
+  logic [2:0] prio33_wd;
+  logic prio33_we;
+  logic [2:0] prio34_qs;
+  logic [2:0] prio34_wd;
+  logic prio34_we;
+  logic [2:0] prio35_qs;
+  logic [2:0] prio35_wd;
+  logic prio35_we;
+  logic [2:0] prio36_qs;
+  logic [2:0] prio36_wd;
+  logic prio36_we;
+  logic [2:0] prio37_qs;
+  logic [2:0] prio37_wd;
+  logic prio37_we;
+  logic [2:0] prio38_qs;
+  logic [2:0] prio38_wd;
+  logic prio38_we;
+  logic [2:0] prio39_qs;
+  logic [2:0] prio39_wd;
+  logic prio39_we;
+  logic [2:0] prio40_qs;
+  logic [2:0] prio40_wd;
+  logic prio40_we;
+  logic [2:0] prio41_qs;
+  logic [2:0] prio41_wd;
+  logic prio41_we;
+  logic [2:0] prio42_qs;
+  logic [2:0] prio42_wd;
+  logic prio42_we;
+  logic [2:0] prio43_qs;
+  logic [2:0] prio43_wd;
+  logic prio43_we;
+  logic [2:0] prio44_qs;
+  logic [2:0] prio44_wd;
+  logic prio44_we;
+  logic [2:0] prio45_qs;
+  logic [2:0] prio45_wd;
+  logic prio45_we;
+  logic [2:0] prio46_qs;
+  logic [2:0] prio46_wd;
+  logic prio46_we;
+  logic [2:0] prio47_qs;
+  logic [2:0] prio47_wd;
+  logic prio47_we;
+  logic [2:0] prio48_qs;
+  logic [2:0] prio48_wd;
+  logic prio48_we;
+  logic [2:0] prio49_qs;
+  logic [2:0] prio49_wd;
+  logic prio49_we;
+  logic [2:0] prio50_qs;
+  logic [2:0] prio50_wd;
+  logic prio50_we;
+  logic [2:0] prio51_qs;
+  logic [2:0] prio51_wd;
+  logic prio51_we;
+  logic [2:0] prio52_qs;
+  logic [2:0] prio52_wd;
+  logic prio52_we;
+  logic [2:0] prio53_qs;
+  logic [2:0] prio53_wd;
+  logic prio53_we;
+  logic [2:0] prio54_qs;
+  logic [2:0] prio54_wd;
+  logic prio54_we;
+  logic [2:0] prio55_qs;
+  logic [2:0] prio55_wd;
+  logic prio55_we;
+  logic [2:0] prio56_qs;
+  logic [2:0] prio56_wd;
+  logic prio56_we;
+  logic [2:0] prio57_qs;
+  logic [2:0] prio57_wd;
+  logic prio57_we;
+  logic [2:0] prio58_qs;
+  logic [2:0] prio58_wd;
+  logic prio58_we;
+  logic [2:0] prio59_qs;
+  logic [2:0] prio59_wd;
+  logic prio59_we;
+  logic [2:0] prio60_qs;
+  logic [2:0] prio60_wd;
+  logic prio60_we;
+  logic [2:0] prio61_qs;
+  logic [2:0] prio61_wd;
+  logic prio61_we;
+  logic [2:0] prio62_qs;
+  logic [2:0] prio62_wd;
+  logic prio62_we;
+  logic [2:0] prio63_qs;
+  logic [2:0] prio63_wd;
+  logic prio63_we;
+  logic ie0_0_e_0_qs;
+  logic ie0_0_e_0_wd;
+  logic ie0_0_e_0_we;
+  logic ie0_0_e_1_qs;
+  logic ie0_0_e_1_wd;
+  logic ie0_0_e_1_we;
+  logic ie0_0_e_2_qs;
+  logic ie0_0_e_2_wd;
+  logic ie0_0_e_2_we;
+  logic ie0_0_e_3_qs;
+  logic ie0_0_e_3_wd;
+  logic ie0_0_e_3_we;
+  logic ie0_0_e_4_qs;
+  logic ie0_0_e_4_wd;
+  logic ie0_0_e_4_we;
+  logic ie0_0_e_5_qs;
+  logic ie0_0_e_5_wd;
+  logic ie0_0_e_5_we;
+  logic ie0_0_e_6_qs;
+  logic ie0_0_e_6_wd;
+  logic ie0_0_e_6_we;
+  logic ie0_0_e_7_qs;
+  logic ie0_0_e_7_wd;
+  logic ie0_0_e_7_we;
+  logic ie0_0_e_8_qs;
+  logic ie0_0_e_8_wd;
+  logic ie0_0_e_8_we;
+  logic ie0_0_e_9_qs;
+  logic ie0_0_e_9_wd;
+  logic ie0_0_e_9_we;
+  logic ie0_0_e_10_qs;
+  logic ie0_0_e_10_wd;
+  logic ie0_0_e_10_we;
+  logic ie0_0_e_11_qs;
+  logic ie0_0_e_11_wd;
+  logic ie0_0_e_11_we;
+  logic ie0_0_e_12_qs;
+  logic ie0_0_e_12_wd;
+  logic ie0_0_e_12_we;
+  logic ie0_0_e_13_qs;
+  logic ie0_0_e_13_wd;
+  logic ie0_0_e_13_we;
+  logic ie0_0_e_14_qs;
+  logic ie0_0_e_14_wd;
+  logic ie0_0_e_14_we;
+  logic ie0_0_e_15_qs;
+  logic ie0_0_e_15_wd;
+  logic ie0_0_e_15_we;
+  logic ie0_0_e_16_qs;
+  logic ie0_0_e_16_wd;
+  logic ie0_0_e_16_we;
+  logic ie0_0_e_17_qs;
+  logic ie0_0_e_17_wd;
+  logic ie0_0_e_17_we;
+  logic ie0_0_e_18_qs;
+  logic ie0_0_e_18_wd;
+  logic ie0_0_e_18_we;
+  logic ie0_0_e_19_qs;
+  logic ie0_0_e_19_wd;
+  logic ie0_0_e_19_we;
+  logic ie0_0_e_20_qs;
+  logic ie0_0_e_20_wd;
+  logic ie0_0_e_20_we;
+  logic ie0_0_e_21_qs;
+  logic ie0_0_e_21_wd;
+  logic ie0_0_e_21_we;
+  logic ie0_0_e_22_qs;
+  logic ie0_0_e_22_wd;
+  logic ie0_0_e_22_we;
+  logic ie0_0_e_23_qs;
+  logic ie0_0_e_23_wd;
+  logic ie0_0_e_23_we;
+  logic ie0_0_e_24_qs;
+  logic ie0_0_e_24_wd;
+  logic ie0_0_e_24_we;
+  logic ie0_0_e_25_qs;
+  logic ie0_0_e_25_wd;
+  logic ie0_0_e_25_we;
+  logic ie0_0_e_26_qs;
+  logic ie0_0_e_26_wd;
+  logic ie0_0_e_26_we;
+  logic ie0_0_e_27_qs;
+  logic ie0_0_e_27_wd;
+  logic ie0_0_e_27_we;
+  logic ie0_0_e_28_qs;
+  logic ie0_0_e_28_wd;
+  logic ie0_0_e_28_we;
+  logic ie0_0_e_29_qs;
+  logic ie0_0_e_29_wd;
+  logic ie0_0_e_29_we;
+  logic ie0_0_e_30_qs;
+  logic ie0_0_e_30_wd;
+  logic ie0_0_e_30_we;
+  logic ie0_0_e_31_qs;
+  logic ie0_0_e_31_wd;
+  logic ie0_0_e_31_we;
+  logic ie0_1_e_32_qs;
+  logic ie0_1_e_32_wd;
+  logic ie0_1_e_32_we;
+  logic ie0_1_e_33_qs;
+  logic ie0_1_e_33_wd;
+  logic ie0_1_e_33_we;
+  logic ie0_1_e_34_qs;
+  logic ie0_1_e_34_wd;
+  logic ie0_1_e_34_we;
+  logic ie0_1_e_35_qs;
+  logic ie0_1_e_35_wd;
+  logic ie0_1_e_35_we;
+  logic ie0_1_e_36_qs;
+  logic ie0_1_e_36_wd;
+  logic ie0_1_e_36_we;
+  logic ie0_1_e_37_qs;
+  logic ie0_1_e_37_wd;
+  logic ie0_1_e_37_we;
+  logic ie0_1_e_38_qs;
+  logic ie0_1_e_38_wd;
+  logic ie0_1_e_38_we;
+  logic ie0_1_e_39_qs;
+  logic ie0_1_e_39_wd;
+  logic ie0_1_e_39_we;
+  logic ie0_1_e_40_qs;
+  logic ie0_1_e_40_wd;
+  logic ie0_1_e_40_we;
+  logic ie0_1_e_41_qs;
+  logic ie0_1_e_41_wd;
+  logic ie0_1_e_41_we;
+  logic ie0_1_e_42_qs;
+  logic ie0_1_e_42_wd;
+  logic ie0_1_e_42_we;
+  logic ie0_1_e_43_qs;
+  logic ie0_1_e_43_wd;
+  logic ie0_1_e_43_we;
+  logic ie0_1_e_44_qs;
+  logic ie0_1_e_44_wd;
+  logic ie0_1_e_44_we;
+  logic ie0_1_e_45_qs;
+  logic ie0_1_e_45_wd;
+  logic ie0_1_e_45_we;
+  logic ie0_1_e_46_qs;
+  logic ie0_1_e_46_wd;
+  logic ie0_1_e_46_we;
+  logic ie0_1_e_47_qs;
+  logic ie0_1_e_47_wd;
+  logic ie0_1_e_47_we;
+  logic ie0_1_e_48_qs;
+  logic ie0_1_e_48_wd;
+  logic ie0_1_e_48_we;
+  logic ie0_1_e_49_qs;
+  logic ie0_1_e_49_wd;
+  logic ie0_1_e_49_we;
+  logic ie0_1_e_50_qs;
+  logic ie0_1_e_50_wd;
+  logic ie0_1_e_50_we;
+  logic ie0_1_e_51_qs;
+  logic ie0_1_e_51_wd;
+  logic ie0_1_e_51_we;
+  logic ie0_1_e_52_qs;
+  logic ie0_1_e_52_wd;
+  logic ie0_1_e_52_we;
+  logic ie0_1_e_53_qs;
+  logic ie0_1_e_53_wd;
+  logic ie0_1_e_53_we;
+  logic ie0_1_e_54_qs;
+  logic ie0_1_e_54_wd;
+  logic ie0_1_e_54_we;
+  logic ie0_1_e_55_qs;
+  logic ie0_1_e_55_wd;
+  logic ie0_1_e_55_we;
+  logic ie0_1_e_56_qs;
+  logic ie0_1_e_56_wd;
+  logic ie0_1_e_56_we;
+  logic ie0_1_e_57_qs;
+  logic ie0_1_e_57_wd;
+  logic ie0_1_e_57_we;
+  logic ie0_1_e_58_qs;
+  logic ie0_1_e_58_wd;
+  logic ie0_1_e_58_we;
+  logic ie0_1_e_59_qs;
+  logic ie0_1_e_59_wd;
+  logic ie0_1_e_59_we;
+  logic ie0_1_e_60_qs;
+  logic ie0_1_e_60_wd;
+  logic ie0_1_e_60_we;
+  logic ie0_1_e_61_qs;
+  logic ie0_1_e_61_wd;
+  logic ie0_1_e_61_we;
+  logic ie0_1_e_62_qs;
+  logic ie0_1_e_62_wd;
+  logic ie0_1_e_62_we;
+  logic ie0_1_e_63_qs;
+  logic ie0_1_e_63_wd;
+  logic ie0_1_e_63_we;
   logic [2:0] threshold0_qs;
   logic [2:0] threshold0_wd;
   logic threshold0_we;
@@ -438,14 +735,14 @@ module rv_plic_reg_top (
   // Register instances
 
   // Subregister 0 of Multireg ip
-  // R[ip]: V(False)
+  // R[ip_0]: V(False)
 
   // F[p_0]: 0:0
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_0 (
+  ) u_ip_0_p_0 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -461,7 +758,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_0_qs)
+    .qs     (ip_0_p_0_qs)
   );
 
 
@@ -470,7 +767,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_1 (
+  ) u_ip_0_p_1 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -486,7 +783,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_1_qs)
+    .qs     (ip_0_p_1_qs)
   );
 
 
@@ -495,7 +792,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_2 (
+  ) u_ip_0_p_2 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -511,7 +808,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_2_qs)
+    .qs     (ip_0_p_2_qs)
   );
 
 
@@ -520,7 +817,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_3 (
+  ) u_ip_0_p_3 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -536,7 +833,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_3_qs)
+    .qs     (ip_0_p_3_qs)
   );
 
 
@@ -545,7 +842,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_4 (
+  ) u_ip_0_p_4 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -561,7 +858,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_4_qs)
+    .qs     (ip_0_p_4_qs)
   );
 
 
@@ -570,7 +867,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_5 (
+  ) u_ip_0_p_5 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -586,7 +883,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_5_qs)
+    .qs     (ip_0_p_5_qs)
   );
 
 
@@ -595,7 +892,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_6 (
+  ) u_ip_0_p_6 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -611,7 +908,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_6_qs)
+    .qs     (ip_0_p_6_qs)
   );
 
 
@@ -620,7 +917,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_7 (
+  ) u_ip_0_p_7 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -636,7 +933,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_7_qs)
+    .qs     (ip_0_p_7_qs)
   );
 
 
@@ -645,7 +942,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_8 (
+  ) u_ip_0_p_8 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -661,7 +958,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_8_qs)
+    .qs     (ip_0_p_8_qs)
   );
 
 
@@ -670,7 +967,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_9 (
+  ) u_ip_0_p_9 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -686,7 +983,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_9_qs)
+    .qs     (ip_0_p_9_qs)
   );
 
 
@@ -695,7 +992,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_10 (
+  ) u_ip_0_p_10 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -711,7 +1008,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_10_qs)
+    .qs     (ip_0_p_10_qs)
   );
 
 
@@ -720,7 +1017,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_11 (
+  ) u_ip_0_p_11 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -736,7 +1033,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_11_qs)
+    .qs     (ip_0_p_11_qs)
   );
 
 
@@ -745,7 +1042,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_12 (
+  ) u_ip_0_p_12 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -761,7 +1058,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_12_qs)
+    .qs     (ip_0_p_12_qs)
   );
 
 
@@ -770,7 +1067,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_13 (
+  ) u_ip_0_p_13 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -786,7 +1083,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_13_qs)
+    .qs     (ip_0_p_13_qs)
   );
 
 
@@ -795,7 +1092,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_14 (
+  ) u_ip_0_p_14 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -811,7 +1108,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_14_qs)
+    .qs     (ip_0_p_14_qs)
   );
 
 
@@ -820,7 +1117,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_15 (
+  ) u_ip_0_p_15 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -836,7 +1133,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_15_qs)
+    .qs     (ip_0_p_15_qs)
   );
 
 
@@ -845,7 +1142,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_16 (
+  ) u_ip_0_p_16 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -861,7 +1158,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_16_qs)
+    .qs     (ip_0_p_16_qs)
   );
 
 
@@ -870,7 +1167,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_17 (
+  ) u_ip_0_p_17 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -886,7 +1183,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_17_qs)
+    .qs     (ip_0_p_17_qs)
   );
 
 
@@ -895,7 +1192,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_18 (
+  ) u_ip_0_p_18 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -911,7 +1208,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_18_qs)
+    .qs     (ip_0_p_18_qs)
   );
 
 
@@ -920,7 +1217,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_19 (
+  ) u_ip_0_p_19 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -936,7 +1233,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_19_qs)
+    .qs     (ip_0_p_19_qs)
   );
 
 
@@ -945,7 +1242,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_20 (
+  ) u_ip_0_p_20 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -961,7 +1258,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_20_qs)
+    .qs     (ip_0_p_20_qs)
   );
 
 
@@ -970,7 +1267,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_21 (
+  ) u_ip_0_p_21 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -986,7 +1283,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_21_qs)
+    .qs     (ip_0_p_21_qs)
   );
 
 
@@ -995,7 +1292,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_22 (
+  ) u_ip_0_p_22 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -1011,7 +1308,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_22_qs)
+    .qs     (ip_0_p_22_qs)
   );
 
 
@@ -1020,7 +1317,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_23 (
+  ) u_ip_0_p_23 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -1036,7 +1333,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_23_qs)
+    .qs     (ip_0_p_23_qs)
   );
 
 
@@ -1045,7 +1342,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_24 (
+  ) u_ip_0_p_24 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -1061,7 +1358,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_24_qs)
+    .qs     (ip_0_p_24_qs)
   );
 
 
@@ -1070,7 +1367,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_25 (
+  ) u_ip_0_p_25 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -1086,7 +1383,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_25_qs)
+    .qs     (ip_0_p_25_qs)
   );
 
 
@@ -1095,7 +1392,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_26 (
+  ) u_ip_0_p_26 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -1111,7 +1408,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_26_qs)
+    .qs     (ip_0_p_26_qs)
   );
 
 
@@ -1120,7 +1417,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_27 (
+  ) u_ip_0_p_27 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -1136,7 +1433,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_27_qs)
+    .qs     (ip_0_p_27_qs)
   );
 
 
@@ -1145,7 +1442,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_28 (
+  ) u_ip_0_p_28 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -1161,7 +1458,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_28_qs)
+    .qs     (ip_0_p_28_qs)
   );
 
 
@@ -1170,7 +1467,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_29 (
+  ) u_ip_0_p_29 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -1186,7 +1483,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_29_qs)
+    .qs     (ip_0_p_29_qs)
   );
 
 
@@ -1195,7 +1492,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_30 (
+  ) u_ip_0_p_30 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -1211,7 +1508,7 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_30_qs)
+    .qs     (ip_0_p_30_qs)
   );
 
 
@@ -1220,7 +1517,7 @@ module rv_plic_reg_top (
     .DW      (1),
     .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_ip_p_31 (
+  ) u_ip_0_p_31 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
@@ -1236,651 +1533,3687 @@ module rv_plic_reg_top (
     .q      (),
 
     // to register interface (read)
-    .qs     (ip_p_31_qs)
+    .qs     (ip_0_p_31_qs)
   );
 
 
+  // Subregister 32 of Multireg ip
+  // R[ip_1]: V(False)
 
-
-  // Subregister 0 of Multireg le
-  // R[le]: V(False)
-
-  // F[le_0]: 0:0
+  // F[p_32]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_0 (
+  ) u_ip_1_p_32 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_0_we),
-    .wd     (le_le_0_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[32].de),
+    .d      (hw2reg.ip[32].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[0].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_0_qs)
+    .qs     (ip_1_p_32_qs)
   );
 
 
-  // F[le_1]: 1:1
+  // F[p_33]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_1 (
+  ) u_ip_1_p_33 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_1_we),
-    .wd     (le_le_1_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[33].de),
+    .d      (hw2reg.ip[33].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[1].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_1_qs)
+    .qs     (ip_1_p_33_qs)
   );
 
 
-  // F[le_2]: 2:2
+  // F[p_34]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_2 (
+  ) u_ip_1_p_34 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_2_we),
-    .wd     (le_le_2_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[34].de),
+    .d      (hw2reg.ip[34].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[2].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_2_qs)
+    .qs     (ip_1_p_34_qs)
   );
 
 
-  // F[le_3]: 3:3
+  // F[p_35]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_3 (
+  ) u_ip_1_p_35 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_3_we),
-    .wd     (le_le_3_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[35].de),
+    .d      (hw2reg.ip[35].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[3].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_3_qs)
+    .qs     (ip_1_p_35_qs)
   );
 
 
-  // F[le_4]: 4:4
+  // F[p_36]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_4 (
+  ) u_ip_1_p_36 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_4_we),
-    .wd     (le_le_4_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[36].de),
+    .d      (hw2reg.ip[36].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[4].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_4_qs)
+    .qs     (ip_1_p_36_qs)
   );
 
 
-  // F[le_5]: 5:5
+  // F[p_37]: 5:5
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_5 (
+  ) u_ip_1_p_37 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_5_we),
-    .wd     (le_le_5_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[37].de),
+    .d      (hw2reg.ip[37].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[5].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_5_qs)
+    .qs     (ip_1_p_37_qs)
   );
 
 
-  // F[le_6]: 6:6
+  // F[p_38]: 6:6
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_6 (
+  ) u_ip_1_p_38 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_6_we),
-    .wd     (le_le_6_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[38].de),
+    .d      (hw2reg.ip[38].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[6].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_6_qs)
+    .qs     (ip_1_p_38_qs)
   );
 
 
-  // F[le_7]: 7:7
+  // F[p_39]: 7:7
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_7 (
+  ) u_ip_1_p_39 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_7_we),
-    .wd     (le_le_7_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[39].de),
+    .d      (hw2reg.ip[39].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[7].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_7_qs)
+    .qs     (ip_1_p_39_qs)
   );
 
 
-  // F[le_8]: 8:8
+  // F[p_40]: 8:8
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_8 (
+  ) u_ip_1_p_40 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_8_we),
-    .wd     (le_le_8_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[40].de),
+    .d      (hw2reg.ip[40].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[8].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_8_qs)
+    .qs     (ip_1_p_40_qs)
   );
 
 
-  // F[le_9]: 9:9
+  // F[p_41]: 9:9
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_9 (
+  ) u_ip_1_p_41 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_9_we),
-    .wd     (le_le_9_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[41].de),
+    .d      (hw2reg.ip[41].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[9].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_9_qs)
+    .qs     (ip_1_p_41_qs)
   );
 
 
-  // F[le_10]: 10:10
+  // F[p_42]: 10:10
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_10 (
+  ) u_ip_1_p_42 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_10_we),
-    .wd     (le_le_10_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[42].de),
+    .d      (hw2reg.ip[42].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[10].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_10_qs)
+    .qs     (ip_1_p_42_qs)
   );
 
 
-  // F[le_11]: 11:11
+  // F[p_43]: 11:11
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_11 (
+  ) u_ip_1_p_43 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_11_we),
-    .wd     (le_le_11_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[43].de),
+    .d      (hw2reg.ip[43].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[11].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_11_qs)
+    .qs     (ip_1_p_43_qs)
   );
 
 
-  // F[le_12]: 12:12
+  // F[p_44]: 12:12
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_12 (
+  ) u_ip_1_p_44 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_12_we),
-    .wd     (le_le_12_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[44].de),
+    .d      (hw2reg.ip[44].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[12].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_12_qs)
+    .qs     (ip_1_p_44_qs)
   );
 
 
-  // F[le_13]: 13:13
+  // F[p_45]: 13:13
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_13 (
+  ) u_ip_1_p_45 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_13_we),
-    .wd     (le_le_13_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[45].de),
+    .d      (hw2reg.ip[45].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[13].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_13_qs)
+    .qs     (ip_1_p_45_qs)
   );
 
 
-  // F[le_14]: 14:14
+  // F[p_46]: 14:14
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_14 (
+  ) u_ip_1_p_46 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_14_we),
-    .wd     (le_le_14_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[46].de),
+    .d      (hw2reg.ip[46].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[14].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_14_qs)
+    .qs     (ip_1_p_46_qs)
   );
 
 
-  // F[le_15]: 15:15
+  // F[p_47]: 15:15
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_15 (
+  ) u_ip_1_p_47 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_15_we),
-    .wd     (le_le_15_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[47].de),
+    .d      (hw2reg.ip[47].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[15].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_15_qs)
+    .qs     (ip_1_p_47_qs)
   );
 
 
-  // F[le_16]: 16:16
+  // F[p_48]: 16:16
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_16 (
+  ) u_ip_1_p_48 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_16_we),
-    .wd     (le_le_16_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[48].de),
+    .d      (hw2reg.ip[48].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[16].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_16_qs)
+    .qs     (ip_1_p_48_qs)
   );
 
 
-  // F[le_17]: 17:17
+  // F[p_49]: 17:17
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_17 (
+  ) u_ip_1_p_49 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_17_we),
-    .wd     (le_le_17_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[49].de),
+    .d      (hw2reg.ip[49].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[17].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_17_qs)
+    .qs     (ip_1_p_49_qs)
   );
 
 
-  // F[le_18]: 18:18
+  // F[p_50]: 18:18
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_18 (
+  ) u_ip_1_p_50 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_18_we),
-    .wd     (le_le_18_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[50].de),
+    .d      (hw2reg.ip[50].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[18].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_18_qs)
+    .qs     (ip_1_p_50_qs)
   );
 
 
-  // F[le_19]: 19:19
+  // F[p_51]: 19:19
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_19 (
+  ) u_ip_1_p_51 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_19_we),
-    .wd     (le_le_19_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[51].de),
+    .d      (hw2reg.ip[51].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[19].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_19_qs)
+    .qs     (ip_1_p_51_qs)
   );
 
 
-  // F[le_20]: 20:20
+  // F[p_52]: 20:20
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_20 (
+  ) u_ip_1_p_52 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_20_we),
-    .wd     (le_le_20_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[52].de),
+    .d      (hw2reg.ip[52].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[20].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_20_qs)
+    .qs     (ip_1_p_52_qs)
   );
 
 
-  // F[le_21]: 21:21
+  // F[p_53]: 21:21
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_21 (
+  ) u_ip_1_p_53 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_21_we),
-    .wd     (le_le_21_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[53].de),
+    .d      (hw2reg.ip[53].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[21].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_21_qs)
+    .qs     (ip_1_p_53_qs)
   );
 
 
-  // F[le_22]: 22:22
+  // F[p_54]: 22:22
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_22 (
+  ) u_ip_1_p_54 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_22_we),
-    .wd     (le_le_22_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[54].de),
+    .d      (hw2reg.ip[54].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[22].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_22_qs)
+    .qs     (ip_1_p_54_qs)
   );
 
 
-  // F[le_23]: 23:23
+  // F[p_55]: 23:23
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_23 (
+  ) u_ip_1_p_55 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_le_23_we),
-    .wd     (le_le_23_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
+    .de     (hw2reg.ip[55].de),
+    .d      (hw2reg.ip[55].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[23].q ),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_23_qs)
+    .qs     (ip_1_p_55_qs)
   );
 
 
-  // F[le_24]: 24:24
+  // F[p_56]: 24:24
   prim_subreg #(
     .DW      (1),
-    .SWACCESS("RW"),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_24 (
+  ) u_ip_1_p_56 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    .we     (1'b0),
+    .wd     ('0  ),
+
+    // from internal hardware
+    .de     (hw2reg.ip[56].de),
+    .d      (hw2reg.ip[56].d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (),
+
+    // to register interface (read)
+    .qs     (ip_1_p_56_qs)
+  );
+
+
+  // F[p_57]: 25:25
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RO"),
+    .RESVAL  (1'h0)
+  ) u_ip_1_p_57 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    .we     (1'b0),
+    .wd     ('0  ),
+
+    // from internal hardware
+    .de     (hw2reg.ip[57].de),
+    .d      (hw2reg.ip[57].d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (),
+
+    // to register interface (read)
+    .qs     (ip_1_p_57_qs)
+  );
+
+
+  // F[p_58]: 26:26
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RO"),
+    .RESVAL  (1'h0)
+  ) u_ip_1_p_58 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    .we     (1'b0),
+    .wd     ('0  ),
+
+    // from internal hardware
+    .de     (hw2reg.ip[58].de),
+    .d      (hw2reg.ip[58].d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (),
+
+    // to register interface (read)
+    .qs     (ip_1_p_58_qs)
+  );
+
+
+  // F[p_59]: 27:27
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RO"),
+    .RESVAL  (1'h0)
+  ) u_ip_1_p_59 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    .we     (1'b0),
+    .wd     ('0  ),
+
+    // from internal hardware
+    .de     (hw2reg.ip[59].de),
+    .d      (hw2reg.ip[59].d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (),
+
+    // to register interface (read)
+    .qs     (ip_1_p_59_qs)
+  );
+
+
+  // F[p_60]: 28:28
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RO"),
+    .RESVAL  (1'h0)
+  ) u_ip_1_p_60 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    .we     (1'b0),
+    .wd     ('0  ),
+
+    // from internal hardware
+    .de     (hw2reg.ip[60].de),
+    .d      (hw2reg.ip[60].d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (),
+
+    // to register interface (read)
+    .qs     (ip_1_p_60_qs)
+  );
+
+
+  // F[p_61]: 29:29
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RO"),
+    .RESVAL  (1'h0)
+  ) u_ip_1_p_61 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    .we     (1'b0),
+    .wd     ('0  ),
+
+    // from internal hardware
+    .de     (hw2reg.ip[61].de),
+    .d      (hw2reg.ip[61].d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (),
+
+    // to register interface (read)
+    .qs     (ip_1_p_61_qs)
+  );
+
+
+  // F[p_62]: 30:30
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RO"),
+    .RESVAL  (1'h0)
+  ) u_ip_1_p_62 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    .we     (1'b0),
+    .wd     ('0  ),
+
+    // from internal hardware
+    .de     (hw2reg.ip[62].de),
+    .d      (hw2reg.ip[62].d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (),
+
+    // to register interface (read)
+    .qs     (ip_1_p_62_qs)
+  );
+
+
+  // F[p_63]: 31:31
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RO"),
+    .RESVAL  (1'h0)
+  ) u_ip_1_p_63 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    .we     (1'b0),
+    .wd     ('0  ),
+
+    // from internal hardware
+    .de     (hw2reg.ip[63].de),
+    .d      (hw2reg.ip[63].d ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (),
+
+    // to register interface (read)
+    .qs     (ip_1_p_63_qs)
+  );
+
+
+
+
+  // Subregister 0 of Multireg le
+  // R[le_0]: V(False)
+
+  // F[le_0]: 0:0
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_0_we),
+    .wd     (le_0_le_0_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[0].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_0_qs)
+  );
+
+
+  // F[le_1]: 1:1
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_1_we),
+    .wd     (le_0_le_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[1].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_1_qs)
+  );
+
+
+  // F[le_2]: 2:2
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_2 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_2_we),
+    .wd     (le_0_le_2_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[2].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_2_qs)
+  );
+
+
+  // F[le_3]: 3:3
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_3 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_3_we),
+    .wd     (le_0_le_3_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[3].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_3_qs)
+  );
+
+
+  // F[le_4]: 4:4
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_4 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_4_we),
+    .wd     (le_0_le_4_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[4].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_4_qs)
+  );
+
+
+  // F[le_5]: 5:5
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_5 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_5_we),
+    .wd     (le_0_le_5_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[5].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_5_qs)
+  );
+
+
+  // F[le_6]: 6:6
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_6 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_6_we),
+    .wd     (le_0_le_6_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[6].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_6_qs)
+  );
+
+
+  // F[le_7]: 7:7
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_7 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_7_we),
+    .wd     (le_0_le_7_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[7].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_7_qs)
+  );
+
+
+  // F[le_8]: 8:8
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_8 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_8_we),
+    .wd     (le_0_le_8_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[8].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_8_qs)
+  );
+
+
+  // F[le_9]: 9:9
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_9 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_9_we),
+    .wd     (le_0_le_9_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[9].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_9_qs)
+  );
+
+
+  // F[le_10]: 10:10
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_10 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_10_we),
+    .wd     (le_0_le_10_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[10].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_10_qs)
+  );
+
+
+  // F[le_11]: 11:11
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_11 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_11_we),
+    .wd     (le_0_le_11_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[11].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_11_qs)
+  );
+
+
+  // F[le_12]: 12:12
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_12 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_12_we),
+    .wd     (le_0_le_12_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[12].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_12_qs)
+  );
+
+
+  // F[le_13]: 13:13
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_13 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_13_we),
+    .wd     (le_0_le_13_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[13].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_13_qs)
+  );
+
+
+  // F[le_14]: 14:14
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_14 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_14_we),
+    .wd     (le_0_le_14_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[14].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_14_qs)
+  );
+
+
+  // F[le_15]: 15:15
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_15 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_15_we),
+    .wd     (le_0_le_15_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[15].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_15_qs)
+  );
+
+
+  // F[le_16]: 16:16
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_16 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_16_we),
+    .wd     (le_0_le_16_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[16].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_16_qs)
+  );
+
+
+  // F[le_17]: 17:17
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_17 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_17_we),
+    .wd     (le_0_le_17_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[17].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_17_qs)
+  );
+
+
+  // F[le_18]: 18:18
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_18 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_18_we),
+    .wd     (le_0_le_18_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[18].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_18_qs)
+  );
+
+
+  // F[le_19]: 19:19
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_19 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_19_we),
+    .wd     (le_0_le_19_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[19].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_19_qs)
+  );
+
+
+  // F[le_20]: 20:20
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_20 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_20_we),
+    .wd     (le_0_le_20_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[20].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_20_qs)
+  );
+
+
+  // F[le_21]: 21:21
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_21 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_21_we),
+    .wd     (le_0_le_21_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[21].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_21_qs)
+  );
+
+
+  // F[le_22]: 22:22
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_22 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_22_we),
+    .wd     (le_0_le_22_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[22].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_22_qs)
+  );
+
+
+  // F[le_23]: 23:23
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_23 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_23_we),
+    .wd     (le_0_le_23_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[23].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_23_qs)
+  );
+
+
+  // F[le_24]: 24:24
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_24 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_24_we),
+    .wd     (le_0_le_24_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[24].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_24_qs)
+  );
+
+
+  // F[le_25]: 25:25
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_25 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_25_we),
+    .wd     (le_0_le_25_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[25].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_25_qs)
+  );
+
+
+  // F[le_26]: 26:26
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_26 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_26_we),
+    .wd     (le_0_le_26_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[26].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_26_qs)
+  );
+
+
+  // F[le_27]: 27:27
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_27 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_27_we),
+    .wd     (le_0_le_27_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[27].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_27_qs)
+  );
+
+
+  // F[le_28]: 28:28
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_28 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_28_we),
+    .wd     (le_0_le_28_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[28].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_28_qs)
+  );
+
+
+  // F[le_29]: 29:29
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_29 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_29_we),
+    .wd     (le_0_le_29_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[29].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_29_qs)
+  );
+
+
+  // F[le_30]: 30:30
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_30 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_30_we),
+    .wd     (le_0_le_30_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[30].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_30_qs)
+  );
+
+
+  // F[le_31]: 31:31
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_0_le_31 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_0_le_31_we),
+    .wd     (le_0_le_31_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[31].q ),
+
+    // to register interface (read)
+    .qs     (le_0_le_31_qs)
+  );
+
+
+  // Subregister 32 of Multireg le
+  // R[le_1]: V(False)
+
+  // F[le_32]: 0:0
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_32 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_32_we),
+    .wd     (le_1_le_32_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[32].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_32_qs)
+  );
+
+
+  // F[le_33]: 1:1
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_33 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_33_we),
+    .wd     (le_1_le_33_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[33].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_33_qs)
+  );
+
+
+  // F[le_34]: 2:2
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_34 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_34_we),
+    .wd     (le_1_le_34_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[34].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_34_qs)
+  );
+
+
+  // F[le_35]: 3:3
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_35 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_35_we),
+    .wd     (le_1_le_35_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[35].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_35_qs)
+  );
+
+
+  // F[le_36]: 4:4
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_36 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_36_we),
+    .wd     (le_1_le_36_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[36].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_36_qs)
+  );
+
+
+  // F[le_37]: 5:5
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_37 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_37_we),
+    .wd     (le_1_le_37_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[37].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_37_qs)
+  );
+
+
+  // F[le_38]: 6:6
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_38 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_38_we),
+    .wd     (le_1_le_38_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[38].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_38_qs)
+  );
+
+
+  // F[le_39]: 7:7
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_39 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_39_we),
+    .wd     (le_1_le_39_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[39].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_39_qs)
+  );
+
+
+  // F[le_40]: 8:8
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_40 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_40_we),
+    .wd     (le_1_le_40_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[40].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_40_qs)
+  );
+
+
+  // F[le_41]: 9:9
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_41 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_41_we),
+    .wd     (le_1_le_41_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[41].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_41_qs)
+  );
+
+
+  // F[le_42]: 10:10
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_42 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_42_we),
+    .wd     (le_1_le_42_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[42].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_42_qs)
+  );
+
+
+  // F[le_43]: 11:11
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_43 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_43_we),
+    .wd     (le_1_le_43_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[43].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_43_qs)
+  );
+
+
+  // F[le_44]: 12:12
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_44 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_44_we),
+    .wd     (le_1_le_44_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[44].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_44_qs)
+  );
+
+
+  // F[le_45]: 13:13
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_45 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_45_we),
+    .wd     (le_1_le_45_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[45].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_45_qs)
+  );
+
+
+  // F[le_46]: 14:14
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_46 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_46_we),
+    .wd     (le_1_le_46_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[46].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_46_qs)
+  );
+
+
+  // F[le_47]: 15:15
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_47 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_47_we),
+    .wd     (le_1_le_47_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[47].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_47_qs)
+  );
+
+
+  // F[le_48]: 16:16
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_48 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_48_we),
+    .wd     (le_1_le_48_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[48].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_48_qs)
+  );
+
+
+  // F[le_49]: 17:17
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_49 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_49_we),
+    .wd     (le_1_le_49_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[49].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_49_qs)
+  );
+
+
+  // F[le_50]: 18:18
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_50 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_50_we),
+    .wd     (le_1_le_50_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[50].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_50_qs)
+  );
+
+
+  // F[le_51]: 19:19
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_51 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_51_we),
+    .wd     (le_1_le_51_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[51].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_51_qs)
+  );
+
+
+  // F[le_52]: 20:20
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_52 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_52_we),
+    .wd     (le_1_le_52_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[52].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_52_qs)
+  );
+
+
+  // F[le_53]: 21:21
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_53 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_53_we),
+    .wd     (le_1_le_53_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[53].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_53_qs)
+  );
+
+
+  // F[le_54]: 22:22
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_54 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_54_we),
+    .wd     (le_1_le_54_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[54].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_54_qs)
+  );
+
+
+  // F[le_55]: 23:23
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_55 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_55_we),
+    .wd     (le_1_le_55_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[55].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_55_qs)
+  );
+
+
+  // F[le_56]: 24:24
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_56 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_56_we),
+    .wd     (le_1_le_56_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[56].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_56_qs)
+  );
+
+
+  // F[le_57]: 25:25
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_57 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_57_we),
+    .wd     (le_1_le_57_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[57].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_57_qs)
+  );
+
+
+  // F[le_58]: 26:26
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_58 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_58_we),
+    .wd     (le_1_le_58_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[58].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_58_qs)
+  );
+
+
+  // F[le_59]: 27:27
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_59 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_59_we),
+    .wd     (le_1_le_59_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[59].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_59_qs)
+  );
+
+
+  // F[le_60]: 28:28
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_60 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_60_we),
+    .wd     (le_1_le_60_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[60].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_60_qs)
+  );
+
+
+  // F[le_61]: 29:29
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_61 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_61_we),
+    .wd     (le_1_le_61_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[61].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_61_qs)
+  );
+
+
+  // F[le_62]: 30:30
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_62 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_62_we),
+    .wd     (le_1_le_62_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[62].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_62_qs)
+  );
+
+
+  // F[le_63]: 31:31
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_1_le_63 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (le_1_le_63_we),
+    .wd     (le_1_le_63_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.le[63].q ),
+
+    // to register interface (read)
+    .qs     (le_1_le_63_qs)
+  );
+
+
+
+  // R[prio0]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio0_we),
+    .wd     (prio0_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio0.q ),
+
+    // to register interface (read)
+    .qs     (prio0_qs)
+  );
+
+
+  // R[prio1]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio1_we),
+    .wd     (prio1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio1.q ),
+
+    // to register interface (read)
+    .qs     (prio1_qs)
+  );
+
+
+  // R[prio2]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio2 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio2_we),
+    .wd     (prio2_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio2.q ),
+
+    // to register interface (read)
+    .qs     (prio2_qs)
+  );
+
+
+  // R[prio3]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio3 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio3_we),
+    .wd     (prio3_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio3.q ),
+
+    // to register interface (read)
+    .qs     (prio3_qs)
+  );
+
+
+  // R[prio4]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio4 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio4_we),
+    .wd     (prio4_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio4.q ),
+
+    // to register interface (read)
+    .qs     (prio4_qs)
+  );
+
+
+  // R[prio5]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio5 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio5_we),
+    .wd     (prio5_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio5.q ),
+
+    // to register interface (read)
+    .qs     (prio5_qs)
+  );
+
+
+  // R[prio6]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio6 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio6_we),
+    .wd     (prio6_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio6.q ),
+
+    // to register interface (read)
+    .qs     (prio6_qs)
+  );
+
+
+  // R[prio7]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio7 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio7_we),
+    .wd     (prio7_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio7.q ),
+
+    // to register interface (read)
+    .qs     (prio7_qs)
+  );
+
+
+  // R[prio8]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio8 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio8_we),
+    .wd     (prio8_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio8.q ),
+
+    // to register interface (read)
+    .qs     (prio8_qs)
+  );
+
+
+  // R[prio9]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio9 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio9_we),
+    .wd     (prio9_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio9.q ),
+
+    // to register interface (read)
+    .qs     (prio9_qs)
+  );
+
+
+  // R[prio10]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio10 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio10_we),
+    .wd     (prio10_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio10.q ),
+
+    // to register interface (read)
+    .qs     (prio10_qs)
+  );
+
+
+  // R[prio11]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio11 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio11_we),
+    .wd     (prio11_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio11.q ),
+
+    // to register interface (read)
+    .qs     (prio11_qs)
+  );
+
+
+  // R[prio12]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio12 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio12_we),
+    .wd     (prio12_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio12.q ),
+
+    // to register interface (read)
+    .qs     (prio12_qs)
+  );
+
+
+  // R[prio13]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio13 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio13_we),
+    .wd     (prio13_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio13.q ),
+
+    // to register interface (read)
+    .qs     (prio13_qs)
+  );
+
+
+  // R[prio14]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio14 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio14_we),
+    .wd     (prio14_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio14.q ),
+
+    // to register interface (read)
+    .qs     (prio14_qs)
+  );
+
+
+  // R[prio15]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio15 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio15_we),
+    .wd     (prio15_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio15.q ),
+
+    // to register interface (read)
+    .qs     (prio15_qs)
+  );
+
+
+  // R[prio16]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio16 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio16_we),
+    .wd     (prio16_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio16.q ),
+
+    // to register interface (read)
+    .qs     (prio16_qs)
+  );
+
+
+  // R[prio17]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio17 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio17_we),
+    .wd     (prio17_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio17.q ),
+
+    // to register interface (read)
+    .qs     (prio17_qs)
+  );
+
+
+  // R[prio18]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio18 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio18_we),
+    .wd     (prio18_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio18.q ),
+
+    // to register interface (read)
+    .qs     (prio18_qs)
+  );
+
+
+  // R[prio19]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio19 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio19_we),
+    .wd     (prio19_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio19.q ),
+
+    // to register interface (read)
+    .qs     (prio19_qs)
+  );
+
+
+  // R[prio20]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio20 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio20_we),
+    .wd     (prio20_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio20.q ),
+
+    // to register interface (read)
+    .qs     (prio20_qs)
+  );
+
+
+  // R[prio21]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio21 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio21_we),
+    .wd     (prio21_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio21.q ),
+
+    // to register interface (read)
+    .qs     (prio21_qs)
+  );
+
+
+  // R[prio22]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio22 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio22_we),
+    .wd     (prio22_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio22.q ),
+
+    // to register interface (read)
+    .qs     (prio22_qs)
+  );
+
+
+  // R[prio23]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio23 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio23_we),
+    .wd     (prio23_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio23.q ),
+
+    // to register interface (read)
+    .qs     (prio23_qs)
+  );
+
+
+  // R[prio24]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio24 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio24_we),
+    .wd     (prio24_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio24.q ),
+
+    // to register interface (read)
+    .qs     (prio24_qs)
+  );
+
+
+  // R[prio25]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio25 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio25_we),
+    .wd     (prio25_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio25.q ),
+
+    // to register interface (read)
+    .qs     (prio25_qs)
+  );
+
+
+  // R[prio26]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio26 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio26_we),
+    .wd     (prio26_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio26.q ),
+
+    // to register interface (read)
+    .qs     (prio26_qs)
+  );
+
+
+  // R[prio27]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio27 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio27_we),
+    .wd     (prio27_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio27.q ),
+
+    // to register interface (read)
+    .qs     (prio27_qs)
+  );
+
+
+  // R[prio28]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio28 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio28_we),
+    .wd     (prio28_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio28.q ),
+
+    // to register interface (read)
+    .qs     (prio28_qs)
+  );
+
+
+  // R[prio29]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio29 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio29_we),
+    .wd     (prio29_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio29.q ),
+
+    // to register interface (read)
+    .qs     (prio29_qs)
+  );
+
+
+  // R[prio30]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio30 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio30_we),
+    .wd     (prio30_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio30.q ),
+
+    // to register interface (read)
+    .qs     (prio30_qs)
+  );
+
+
+  // R[prio31]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio31 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio31_we),
+    .wd     (prio31_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio31.q ),
+
+    // to register interface (read)
+    .qs     (prio31_qs)
+  );
+
+
+  // R[prio32]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio32 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio32_we),
+    .wd     (prio32_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio32.q ),
+
+    // to register interface (read)
+    .qs     (prio32_qs)
+  );
+
+
+  // R[prio33]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio33 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio33_we),
+    .wd     (prio33_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio33.q ),
+
+    // to register interface (read)
+    .qs     (prio33_qs)
+  );
+
+
+  // R[prio34]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio34 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio34_we),
+    .wd     (prio34_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio34.q ),
+
+    // to register interface (read)
+    .qs     (prio34_qs)
+  );
+
+
+  // R[prio35]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio35 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio35_we),
+    .wd     (prio35_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio35.q ),
+
+    // to register interface (read)
+    .qs     (prio35_qs)
+  );
+
+
+  // R[prio36]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio36 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio36_we),
+    .wd     (prio36_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio36.q ),
+
+    // to register interface (read)
+    .qs     (prio36_qs)
+  );
+
+
+  // R[prio37]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio37 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio37_we),
+    .wd     (prio37_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio37.q ),
+
+    // to register interface (read)
+    .qs     (prio37_qs)
+  );
+
+
+  // R[prio38]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio38 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio38_we),
+    .wd     (prio38_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio38.q ),
+
+    // to register interface (read)
+    .qs     (prio38_qs)
+  );
+
+
+  // R[prio39]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio39 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio39_we),
+    .wd     (prio39_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio39.q ),
+
+    // to register interface (read)
+    .qs     (prio39_qs)
+  );
+
+
+  // R[prio40]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio40 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio40_we),
+    .wd     (prio40_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio40.q ),
+
+    // to register interface (read)
+    .qs     (prio40_qs)
+  );
+
+
+  // R[prio41]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio41 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio41_we),
+    .wd     (prio41_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio41.q ),
+
+    // to register interface (read)
+    .qs     (prio41_qs)
+  );
+
+
+  // R[prio42]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio42 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio42_we),
+    .wd     (prio42_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio42.q ),
+
+    // to register interface (read)
+    .qs     (prio42_qs)
+  );
+
+
+  // R[prio43]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio43 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio43_we),
+    .wd     (prio43_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio43.q ),
+
+    // to register interface (read)
+    .qs     (prio43_qs)
+  );
+
+
+  // R[prio44]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio44 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (le_le_24_we),
-    .wd     (le_le_24_wd),
+    .we     (prio44_we),
+    .wd     (prio44_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -1888,25 +5221,350 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[24].q ),
+    .q      (reg2hw.prio44.q ),
+
+    // to register interface (read)
+    .qs     (prio44_qs)
+  );
+
+
+  // R[prio45]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio45 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio45_we),
+    .wd     (prio45_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio45.q ),
+
+    // to register interface (read)
+    .qs     (prio45_qs)
+  );
+
+
+  // R[prio46]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio46 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio46_we),
+    .wd     (prio46_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio46.q ),
+
+    // to register interface (read)
+    .qs     (prio46_qs)
+  );
+
+
+  // R[prio47]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio47 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio47_we),
+    .wd     (prio47_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio47.q ),
+
+    // to register interface (read)
+    .qs     (prio47_qs)
+  );
+
+
+  // R[prio48]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio48 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio48_we),
+    .wd     (prio48_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio48.q ),
+
+    // to register interface (read)
+    .qs     (prio48_qs)
+  );
+
+
+  // R[prio49]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio49 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio49_we),
+    .wd     (prio49_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio49.q ),
+
+    // to register interface (read)
+    .qs     (prio49_qs)
+  );
+
+
+  // R[prio50]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio50 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio50_we),
+    .wd     (prio50_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio50.q ),
+
+    // to register interface (read)
+    .qs     (prio50_qs)
+  );
+
+
+  // R[prio51]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio51 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio51_we),
+    .wd     (prio51_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio51.q ),
+
+    // to register interface (read)
+    .qs     (prio51_qs)
+  );
+
+
+  // R[prio52]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio52 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio52_we),
+    .wd     (prio52_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio52.q ),
+
+    // to register interface (read)
+    .qs     (prio52_qs)
+  );
+
+
+  // R[prio53]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio53 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio53_we),
+    .wd     (prio53_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio53.q ),
+
+    // to register interface (read)
+    .qs     (prio53_qs)
+  );
+
+
+  // R[prio54]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio54 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio54_we),
+    .wd     (prio54_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio54.q ),
+
+    // to register interface (read)
+    .qs     (prio54_qs)
+  );
+
+
+  // R[prio55]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio55 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio55_we),
+    .wd     (prio55_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio55.q ),
+
+    // to register interface (read)
+    .qs     (prio55_qs)
+  );
+
+
+  // R[prio56]: V(False)
+
+  prim_subreg #(
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio56 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (prio56_we),
+    .wd     (prio56_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.prio56.q ),
 
     // to register interface (read)
-    .qs     (le_le_24_qs)
+    .qs     (prio56_qs)
   );
 
 
-  // F[le_25]: 25:25
+  // R[prio57]: V(False)
+
   prim_subreg #(
-    .DW      (1),
+    .DW      (3),
     .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le_le_25 (
+    .RESVAL  (3'h0)
+  ) u_prio57 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (le_le_25_we),
-    .wd     (le_le_25_wd),
+    .we     (prio57_we),
+    .wd     (prio57_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -1914,25 +5572,26 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[25].q ),
+    .q      (reg2hw.prio57.q ),
 
     // to register interface (read)
-    .qs     (le_le_25_qs)
+    .qs     (prio57_qs)
   );
 
 
-  // F[le_26]: 26:26
+  // R[prio58]: V(False)
+
   prim_subreg #(
-    .DW      (1),
+    .DW      (3),
     .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le_le_26 (
+    .RESVAL  (3'h0)
+  ) u_prio58 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (le_le_26_we),
-    .wd     (le_le_26_wd),
+    .we     (prio58_we),
+    .wd     (prio58_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -1940,25 +5599,26 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[26].q ),
+    .q      (reg2hw.prio58.q ),
 
     // to register interface (read)
-    .qs     (le_le_26_qs)
+    .qs     (prio58_qs)
   );
 
 
-  // F[le_27]: 27:27
+  // R[prio59]: V(False)
+
   prim_subreg #(
-    .DW      (1),
+    .DW      (3),
     .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le_le_27 (
+    .RESVAL  (3'h0)
+  ) u_prio59 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (le_le_27_we),
-    .wd     (le_le_27_wd),
+    .we     (prio59_we),
+    .wd     (prio59_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -1966,25 +5626,26 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[27].q ),
+    .q      (reg2hw.prio59.q ),
 
     // to register interface (read)
-    .qs     (le_le_27_qs)
+    .qs     (prio59_qs)
   );
 
 
-  // F[le_28]: 28:28
+  // R[prio60]: V(False)
+
   prim_subreg #(
-    .DW      (1),
+    .DW      (3),
     .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le_le_28 (
+    .RESVAL  (3'h0)
+  ) u_prio60 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (le_le_28_we),
-    .wd     (le_le_28_wd),
+    .we     (prio60_we),
+    .wd     (prio60_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -1992,25 +5653,26 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[28].q ),
+    .q      (reg2hw.prio60.q ),
 
     // to register interface (read)
-    .qs     (le_le_28_qs)
+    .qs     (prio60_qs)
   );
 
 
-  // F[le_29]: 29:29
+  // R[prio61]: V(False)
+
   prim_subreg #(
-    .DW      (1),
+    .DW      (3),
     .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le_le_29 (
+    .RESVAL  (3'h0)
+  ) u_prio61 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (le_le_29_we),
-    .wd     (le_le_29_wd),
+    .we     (prio61_we),
+    .wd     (prio61_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2018,25 +5680,26 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[29].q ),
+    .q      (reg2hw.prio61.q ),
 
     // to register interface (read)
-    .qs     (le_le_29_qs)
+    .qs     (prio61_qs)
   );
 
 
-  // F[le_30]: 30:30
+  // R[prio62]: V(False)
+
   prim_subreg #(
-    .DW      (1),
+    .DW      (3),
     .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le_le_30 (
+    .RESVAL  (3'h0)
+  ) u_prio62 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (le_le_30_we),
-    .wd     (le_le_30_wd),
+    .we     (prio62_we),
+    .wd     (prio62_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2044,25 +5707,26 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[30].q ),
+    .q      (reg2hw.prio62.q ),
 
     // to register interface (read)
-    .qs     (le_le_30_qs)
+    .qs     (prio62_qs)
   );
 
 
-  // F[le_31]: 31:31
+  // R[prio63]: V(False)
+
   prim_subreg #(
-    .DW      (1),
+    .DW      (3),
     .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le_le_31 (
+    .RESVAL  (3'h0)
+  ) u_prio63 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (le_le_31_we),
-    .wd     (le_le_31_wd),
+    .we     (prio63_we),
+    .wd     (prio63_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2070,27 +5734,29 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[31].q ),
+    .q      (reg2hw.prio63.q ),
 
     // to register interface (read)
-    .qs     (le_le_31_qs)
+    .qs     (prio63_qs)
   );
 
 
 
-  // R[prio0]: V(False)
+  // Subregister 0 of Multireg ie0
+  // R[ie0_0]: V(False)
 
+  // F[e_0]: 0:0
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio0 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_0 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio0_we),
-    .wd     (prio0_wd),
+    .we     (ie0_0_e_0_we),
+    .wd     (ie0_0_e_0_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2098,26 +5764,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio0.q ),
+    .q      (reg2hw.ie0[0].q ),
 
     // to register interface (read)
-    .qs     (prio0_qs)
+    .qs     (ie0_0_e_0_qs)
   );
 
 
-  // R[prio1]: V(False)
-
+  // F[e_1]: 1:1
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio1 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_1 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio1_we),
-    .wd     (prio1_wd),
+    .we     (ie0_0_e_1_we),
+    .wd     (ie0_0_e_1_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2125,26 +5790,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio1.q ),
+    .q      (reg2hw.ie0[1].q ),
 
     // to register interface (read)
-    .qs     (prio1_qs)
+    .qs     (ie0_0_e_1_qs)
   );
 
 
-  // R[prio2]: V(False)
-
+  // F[e_2]: 2:2
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio2 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_2 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio2_we),
-    .wd     (prio2_wd),
+    .we     (ie0_0_e_2_we),
+    .wd     (ie0_0_e_2_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2152,26 +5816,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio2.q ),
+    .q      (reg2hw.ie0[2].q ),
 
     // to register interface (read)
-    .qs     (prio2_qs)
+    .qs     (ie0_0_e_2_qs)
   );
 
 
-  // R[prio3]: V(False)
-
+  // F[e_3]: 3:3
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio3 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_3 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio3_we),
-    .wd     (prio3_wd),
+    .we     (ie0_0_e_3_we),
+    .wd     (ie0_0_e_3_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2179,26 +5842,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio3.q ),
+    .q      (reg2hw.ie0[3].q ),
 
     // to register interface (read)
-    .qs     (prio3_qs)
+    .qs     (ie0_0_e_3_qs)
   );
 
 
-  // R[prio4]: V(False)
-
+  // F[e_4]: 4:4
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio4 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_4 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio4_we),
-    .wd     (prio4_wd),
+    .we     (ie0_0_e_4_we),
+    .wd     (ie0_0_e_4_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2206,26 +5868,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio4.q ),
+    .q      (reg2hw.ie0[4].q ),
 
     // to register interface (read)
-    .qs     (prio4_qs)
+    .qs     (ie0_0_e_4_qs)
   );
 
 
-  // R[prio5]: V(False)
-
+  // F[e_5]: 5:5
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio5 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_5 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio5_we),
-    .wd     (prio5_wd),
+    .we     (ie0_0_e_5_we),
+    .wd     (ie0_0_e_5_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2233,26 +5894,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio5.q ),
+    .q      (reg2hw.ie0[5].q ),
 
     // to register interface (read)
-    .qs     (prio5_qs)
+    .qs     (ie0_0_e_5_qs)
   );
 
 
-  // R[prio6]: V(False)
-
+  // F[e_6]: 6:6
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio6 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_6 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio6_we),
-    .wd     (prio6_wd),
+    .we     (ie0_0_e_6_we),
+    .wd     (ie0_0_e_6_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2260,26 +5920,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio6.q ),
+    .q      (reg2hw.ie0[6].q ),
 
     // to register interface (read)
-    .qs     (prio6_qs)
+    .qs     (ie0_0_e_6_qs)
   );
 
 
-  // R[prio7]: V(False)
-
+  // F[e_7]: 7:7
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio7 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_7 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio7_we),
-    .wd     (prio7_wd),
+    .we     (ie0_0_e_7_we),
+    .wd     (ie0_0_e_7_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2287,26 +5946,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio7.q ),
+    .q      (reg2hw.ie0[7].q ),
 
     // to register interface (read)
-    .qs     (prio7_qs)
+    .qs     (ie0_0_e_7_qs)
   );
 
 
-  // R[prio8]: V(False)
-
+  // F[e_8]: 8:8
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio8 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_8 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio8_we),
-    .wd     (prio8_wd),
+    .we     (ie0_0_e_8_we),
+    .wd     (ie0_0_e_8_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2314,26 +5972,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio8.q ),
+    .q      (reg2hw.ie0[8].q ),
 
     // to register interface (read)
-    .qs     (prio8_qs)
+    .qs     (ie0_0_e_8_qs)
   );
 
 
-  // R[prio9]: V(False)
-
+  // F[e_9]: 9:9
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio9 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_9 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio9_we),
-    .wd     (prio9_wd),
+    .we     (ie0_0_e_9_we),
+    .wd     (ie0_0_e_9_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2341,26 +5998,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio9.q ),
+    .q      (reg2hw.ie0[9].q ),
 
     // to register interface (read)
-    .qs     (prio9_qs)
+    .qs     (ie0_0_e_9_qs)
   );
 
 
-  // R[prio10]: V(False)
-
+  // F[e_10]: 10:10
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio10 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_10 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio10_we),
-    .wd     (prio10_wd),
+    .we     (ie0_0_e_10_we),
+    .wd     (ie0_0_e_10_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2368,26 +6024,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio10.q ),
+    .q      (reg2hw.ie0[10].q ),
 
     // to register interface (read)
-    .qs     (prio10_qs)
+    .qs     (ie0_0_e_10_qs)
   );
 
 
-  // R[prio11]: V(False)
-
+  // F[e_11]: 11:11
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio11 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_11 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio11_we),
-    .wd     (prio11_wd),
+    .we     (ie0_0_e_11_we),
+    .wd     (ie0_0_e_11_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2395,26 +6050,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio11.q ),
+    .q      (reg2hw.ie0[11].q ),
 
     // to register interface (read)
-    .qs     (prio11_qs)
+    .qs     (ie0_0_e_11_qs)
   );
 
 
-  // R[prio12]: V(False)
-
+  // F[e_12]: 12:12
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio12 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_12 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio12_we),
-    .wd     (prio12_wd),
+    .we     (ie0_0_e_12_we),
+    .wd     (ie0_0_e_12_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2422,26 +6076,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio12.q ),
+    .q      (reg2hw.ie0[12].q ),
 
     // to register interface (read)
-    .qs     (prio12_qs)
+    .qs     (ie0_0_e_12_qs)
   );
 
 
-  // R[prio13]: V(False)
-
+  // F[e_13]: 13:13
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio13 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_13 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio13_we),
-    .wd     (prio13_wd),
+    .we     (ie0_0_e_13_we),
+    .wd     (ie0_0_e_13_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2449,26 +6102,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio13.q ),
+    .q      (reg2hw.ie0[13].q ),
 
     // to register interface (read)
-    .qs     (prio13_qs)
+    .qs     (ie0_0_e_13_qs)
   );
 
 
-  // R[prio14]: V(False)
-
+  // F[e_14]: 14:14
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio14 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_14 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio14_we),
-    .wd     (prio14_wd),
+    .we     (ie0_0_e_14_we),
+    .wd     (ie0_0_e_14_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2476,26 +6128,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio14.q ),
+    .q      (reg2hw.ie0[14].q ),
 
     // to register interface (read)
-    .qs     (prio14_qs)
+    .qs     (ie0_0_e_14_qs)
   );
 
 
-  // R[prio15]: V(False)
-
+  // F[e_15]: 15:15
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio15 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_15 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio15_we),
-    .wd     (prio15_wd),
+    .we     (ie0_0_e_15_we),
+    .wd     (ie0_0_e_15_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2503,26 +6154,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio15.q ),
+    .q      (reg2hw.ie0[15].q ),
 
     // to register interface (read)
-    .qs     (prio15_qs)
+    .qs     (ie0_0_e_15_qs)
   );
 
 
-  // R[prio16]: V(False)
-
+  // F[e_16]: 16:16
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio16 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_16 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio16_we),
-    .wd     (prio16_wd),
+    .we     (ie0_0_e_16_we),
+    .wd     (ie0_0_e_16_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2530,26 +6180,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio16.q ),
+    .q      (reg2hw.ie0[16].q ),
 
     // to register interface (read)
-    .qs     (prio16_qs)
+    .qs     (ie0_0_e_16_qs)
   );
 
 
-  // R[prio17]: V(False)
-
+  // F[e_17]: 17:17
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio17 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_17 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio17_we),
-    .wd     (prio17_wd),
+    .we     (ie0_0_e_17_we),
+    .wd     (ie0_0_e_17_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2557,26 +6206,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio17.q ),
+    .q      (reg2hw.ie0[17].q ),
 
     // to register interface (read)
-    .qs     (prio17_qs)
+    .qs     (ie0_0_e_17_qs)
   );
 
 
-  // R[prio18]: V(False)
-
+  // F[e_18]: 18:18
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio18 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_18 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio18_we),
-    .wd     (prio18_wd),
+    .we     (ie0_0_e_18_we),
+    .wd     (ie0_0_e_18_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2584,26 +6232,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio18.q ),
+    .q      (reg2hw.ie0[18].q ),
 
     // to register interface (read)
-    .qs     (prio18_qs)
+    .qs     (ie0_0_e_18_qs)
   );
 
 
-  // R[prio19]: V(False)
-
+  // F[e_19]: 19:19
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio19 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_19 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio19_we),
-    .wd     (prio19_wd),
+    .we     (ie0_0_e_19_we),
+    .wd     (ie0_0_e_19_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2611,26 +6258,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio19.q ),
+    .q      (reg2hw.ie0[19].q ),
 
     // to register interface (read)
-    .qs     (prio19_qs)
+    .qs     (ie0_0_e_19_qs)
   );
 
 
-  // R[prio20]: V(False)
-
+  // F[e_20]: 20:20
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio20 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_20 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio20_we),
-    .wd     (prio20_wd),
+    .we     (ie0_0_e_20_we),
+    .wd     (ie0_0_e_20_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2638,26 +6284,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio20.q ),
+    .q      (reg2hw.ie0[20].q ),
 
     // to register interface (read)
-    .qs     (prio20_qs)
+    .qs     (ie0_0_e_20_qs)
   );
 
 
-  // R[prio21]: V(False)
-
+  // F[e_21]: 21:21
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio21 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_21 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio21_we),
-    .wd     (prio21_wd),
+    .we     (ie0_0_e_21_we),
+    .wd     (ie0_0_e_21_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2665,26 +6310,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio21.q ),
+    .q      (reg2hw.ie0[21].q ),
 
     // to register interface (read)
-    .qs     (prio21_qs)
+    .qs     (ie0_0_e_21_qs)
   );
 
 
-  // R[prio22]: V(False)
-
+  // F[e_22]: 22:22
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio22 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_22 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio22_we),
-    .wd     (prio22_wd),
+    .we     (ie0_0_e_22_we),
+    .wd     (ie0_0_e_22_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2692,26 +6336,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio22.q ),
+    .q      (reg2hw.ie0[22].q ),
 
     // to register interface (read)
-    .qs     (prio22_qs)
+    .qs     (ie0_0_e_22_qs)
   );
 
 
-  // R[prio23]: V(False)
-
+  // F[e_23]: 23:23
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio23 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_23 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio23_we),
-    .wd     (prio23_wd),
+    .we     (ie0_0_e_23_we),
+    .wd     (ie0_0_e_23_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2719,26 +6362,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio23.q ),
+    .q      (reg2hw.ie0[23].q ),
 
     // to register interface (read)
-    .qs     (prio23_qs)
+    .qs     (ie0_0_e_23_qs)
   );
 
 
-  // R[prio24]: V(False)
-
+  // F[e_24]: 24:24
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio24 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_24 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio24_we),
-    .wd     (prio24_wd),
+    .we     (ie0_0_e_24_we),
+    .wd     (ie0_0_e_24_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2746,26 +6388,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio24.q ),
+    .q      (reg2hw.ie0[24].q ),
 
     // to register interface (read)
-    .qs     (prio24_qs)
+    .qs     (ie0_0_e_24_qs)
   );
 
 
-  // R[prio25]: V(False)
-
+  // F[e_25]: 25:25
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio25 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_25 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio25_we),
-    .wd     (prio25_wd),
+    .we     (ie0_0_e_25_we),
+    .wd     (ie0_0_e_25_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2773,26 +6414,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio25.q ),
+    .q      (reg2hw.ie0[25].q ),
 
     // to register interface (read)
-    .qs     (prio25_qs)
+    .qs     (ie0_0_e_25_qs)
   );
 
 
-  // R[prio26]: V(False)
-
+  // F[e_26]: 26:26
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio26 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_26 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio26_we),
-    .wd     (prio26_wd),
+    .we     (ie0_0_e_26_we),
+    .wd     (ie0_0_e_26_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2800,26 +6440,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio26.q ),
+    .q      (reg2hw.ie0[26].q ),
 
     // to register interface (read)
-    .qs     (prio26_qs)
+    .qs     (ie0_0_e_26_qs)
   );
 
 
-  // R[prio27]: V(False)
-
+  // F[e_27]: 27:27
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio27 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_27 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio27_we),
-    .wd     (prio27_wd),
+    .we     (ie0_0_e_27_we),
+    .wd     (ie0_0_e_27_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2827,26 +6466,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio27.q ),
+    .q      (reg2hw.ie0[27].q ),
 
     // to register interface (read)
-    .qs     (prio27_qs)
+    .qs     (ie0_0_e_27_qs)
   );
 
 
-  // R[prio28]: V(False)
-
+  // F[e_28]: 28:28
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio28 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_28 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio28_we),
-    .wd     (prio28_wd),
+    .we     (ie0_0_e_28_we),
+    .wd     (ie0_0_e_28_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2854,26 +6492,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio28.q ),
+    .q      (reg2hw.ie0[28].q ),
 
     // to register interface (read)
-    .qs     (prio28_qs)
+    .qs     (ie0_0_e_28_qs)
   );
 
 
-  // R[prio29]: V(False)
-
+  // F[e_29]: 29:29
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio29 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_29 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio29_we),
-    .wd     (prio29_wd),
+    .we     (ie0_0_e_29_we),
+    .wd     (ie0_0_e_29_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2881,26 +6518,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio29.q ),
+    .q      (reg2hw.ie0[29].q ),
 
     // to register interface (read)
-    .qs     (prio29_qs)
+    .qs     (ie0_0_e_29_qs)
   );
 
 
-  // R[prio30]: V(False)
-
+  // F[e_30]: 30:30
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio30 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_30 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio30_we),
-    .wd     (prio30_wd),
+    .we     (ie0_0_e_30_we),
+    .wd     (ie0_0_e_30_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2908,26 +6544,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio30.q ),
+    .q      (reg2hw.ie0[30].q ),
 
     // to register interface (read)
-    .qs     (prio30_qs)
+    .qs     (ie0_0_e_30_qs)
   );
 
 
-  // R[prio31]: V(False)
-
+  // F[e_31]: 31:31
   prim_subreg #(
-    .DW      (3),
+    .DW      (1),
     .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_prio31 (
+    .RESVAL  (1'h0)
+  ) u_ie0_0_e_31 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio31_we),
-    .wd     (prio31_wd),
+    .we     (ie0_0_e_31_we),
+    .wd     (ie0_0_e_31_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2935,29 +6570,28 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio31.q ),
+    .q      (reg2hw.ie0[31].q ),
 
     // to register interface (read)
-    .qs     (prio31_qs)
+    .qs     (ie0_0_e_31_qs)
   );
 
 
+  // Subregister 32 of Multireg ie0
+  // R[ie0_1]: V(False)
 
-  // Subregister 0 of Multireg ie0
-  // R[ie0]: V(False)
-
-  // F[e_0]: 0:0
+  // F[e_32]: 0:0
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_0 (
+  ) u_ie0_1_e_32 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_0_we),
-    .wd     (ie0_e_0_wd),
+    .we     (ie0_1_e_32_we),
+    .wd     (ie0_1_e_32_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2965,25 +6599,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[0].q ),
+    .q      (reg2hw.ie0[32].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_0_qs)
+    .qs     (ie0_1_e_32_qs)
   );
 
 
-  // F[e_1]: 1:1
+  // F[e_33]: 1:1
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_1 (
+  ) u_ie0_1_e_33 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_1_we),
-    .wd     (ie0_e_1_wd),
+    .we     (ie0_1_e_33_we),
+    .wd     (ie0_1_e_33_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -2991,25 +6625,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[1].q ),
+    .q      (reg2hw.ie0[33].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_1_qs)
+    .qs     (ie0_1_e_33_qs)
   );
 
 
-  // F[e_2]: 2:2
+  // F[e_34]: 2:2
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_2 (
+  ) u_ie0_1_e_34 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_2_we),
-    .wd     (ie0_e_2_wd),
+    .we     (ie0_1_e_34_we),
+    .wd     (ie0_1_e_34_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3017,25 +6651,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[2].q ),
+    .q      (reg2hw.ie0[34].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_2_qs)
+    .qs     (ie0_1_e_34_qs)
   );
 
 
-  // F[e_3]: 3:3
+  // F[e_35]: 3:3
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_3 (
+  ) u_ie0_1_e_35 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_3_we),
-    .wd     (ie0_e_3_wd),
+    .we     (ie0_1_e_35_we),
+    .wd     (ie0_1_e_35_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3043,25 +6677,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[3].q ),
+    .q      (reg2hw.ie0[35].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_3_qs)
+    .qs     (ie0_1_e_35_qs)
   );
 
 
-  // F[e_4]: 4:4
+  // F[e_36]: 4:4
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_4 (
+  ) u_ie0_1_e_36 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_4_we),
-    .wd     (ie0_e_4_wd),
+    .we     (ie0_1_e_36_we),
+    .wd     (ie0_1_e_36_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3069,25 +6703,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[4].q ),
+    .q      (reg2hw.ie0[36].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_4_qs)
+    .qs     (ie0_1_e_36_qs)
   );
 
 
-  // F[e_5]: 5:5
+  // F[e_37]: 5:5
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_5 (
+  ) u_ie0_1_e_37 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_5_we),
-    .wd     (ie0_e_5_wd),
+    .we     (ie0_1_e_37_we),
+    .wd     (ie0_1_e_37_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3095,25 +6729,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[5].q ),
+    .q      (reg2hw.ie0[37].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_5_qs)
+    .qs     (ie0_1_e_37_qs)
   );
 
 
-  // F[e_6]: 6:6
+  // F[e_38]: 6:6
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_6 (
+  ) u_ie0_1_e_38 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_6_we),
-    .wd     (ie0_e_6_wd),
+    .we     (ie0_1_e_38_we),
+    .wd     (ie0_1_e_38_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3121,25 +6755,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[6].q ),
+    .q      (reg2hw.ie0[38].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_6_qs)
+    .qs     (ie0_1_e_38_qs)
   );
 
 
-  // F[e_7]: 7:7
+  // F[e_39]: 7:7
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_7 (
+  ) u_ie0_1_e_39 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_7_we),
-    .wd     (ie0_e_7_wd),
+    .we     (ie0_1_e_39_we),
+    .wd     (ie0_1_e_39_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3147,25 +6781,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[7].q ),
+    .q      (reg2hw.ie0[39].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_7_qs)
+    .qs     (ie0_1_e_39_qs)
   );
 
 
-  // F[e_8]: 8:8
+  // F[e_40]: 8:8
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_8 (
+  ) u_ie0_1_e_40 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_8_we),
-    .wd     (ie0_e_8_wd),
+    .we     (ie0_1_e_40_we),
+    .wd     (ie0_1_e_40_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3173,25 +6807,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[8].q ),
+    .q      (reg2hw.ie0[40].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_8_qs)
+    .qs     (ie0_1_e_40_qs)
   );
 
 
-  // F[e_9]: 9:9
+  // F[e_41]: 9:9
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_9 (
+  ) u_ie0_1_e_41 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_9_we),
-    .wd     (ie0_e_9_wd),
+    .we     (ie0_1_e_41_we),
+    .wd     (ie0_1_e_41_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3199,25 +6833,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[9].q ),
+    .q      (reg2hw.ie0[41].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_9_qs)
+    .qs     (ie0_1_e_41_qs)
   );
 
 
-  // F[e_10]: 10:10
+  // F[e_42]: 10:10
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_10 (
+  ) u_ie0_1_e_42 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_10_we),
-    .wd     (ie0_e_10_wd),
+    .we     (ie0_1_e_42_we),
+    .wd     (ie0_1_e_42_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3225,25 +6859,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[10].q ),
+    .q      (reg2hw.ie0[42].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_10_qs)
+    .qs     (ie0_1_e_42_qs)
   );
 
 
-  // F[e_11]: 11:11
+  // F[e_43]: 11:11
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_11 (
+  ) u_ie0_1_e_43 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_11_we),
-    .wd     (ie0_e_11_wd),
+    .we     (ie0_1_e_43_we),
+    .wd     (ie0_1_e_43_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3251,25 +6885,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[11].q ),
+    .q      (reg2hw.ie0[43].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_11_qs)
+    .qs     (ie0_1_e_43_qs)
   );
 
 
-  // F[e_12]: 12:12
+  // F[e_44]: 12:12
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_12 (
+  ) u_ie0_1_e_44 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_12_we),
-    .wd     (ie0_e_12_wd),
+    .we     (ie0_1_e_44_we),
+    .wd     (ie0_1_e_44_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3277,25 +6911,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[12].q ),
+    .q      (reg2hw.ie0[44].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_12_qs)
+    .qs     (ie0_1_e_44_qs)
   );
 
 
-  // F[e_13]: 13:13
+  // F[e_45]: 13:13
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_13 (
+  ) u_ie0_1_e_45 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_13_we),
-    .wd     (ie0_e_13_wd),
+    .we     (ie0_1_e_45_we),
+    .wd     (ie0_1_e_45_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3303,25 +6937,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[13].q ),
+    .q      (reg2hw.ie0[45].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_13_qs)
+    .qs     (ie0_1_e_45_qs)
   );
 
 
-  // F[e_14]: 14:14
+  // F[e_46]: 14:14
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_14 (
+  ) u_ie0_1_e_46 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_14_we),
-    .wd     (ie0_e_14_wd),
+    .we     (ie0_1_e_46_we),
+    .wd     (ie0_1_e_46_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3329,25 +6963,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[14].q ),
+    .q      (reg2hw.ie0[46].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_14_qs)
+    .qs     (ie0_1_e_46_qs)
   );
 
 
-  // F[e_15]: 15:15
+  // F[e_47]: 15:15
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_15 (
+  ) u_ie0_1_e_47 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_15_we),
-    .wd     (ie0_e_15_wd),
+    .we     (ie0_1_e_47_we),
+    .wd     (ie0_1_e_47_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3355,25 +6989,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[15].q ),
+    .q      (reg2hw.ie0[47].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_15_qs)
+    .qs     (ie0_1_e_47_qs)
   );
 
 
-  // F[e_16]: 16:16
+  // F[e_48]: 16:16
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_16 (
+  ) u_ie0_1_e_48 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_16_we),
-    .wd     (ie0_e_16_wd),
+    .we     (ie0_1_e_48_we),
+    .wd     (ie0_1_e_48_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3381,25 +7015,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[16].q ),
+    .q      (reg2hw.ie0[48].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_16_qs)
+    .qs     (ie0_1_e_48_qs)
   );
 
 
-  // F[e_17]: 17:17
+  // F[e_49]: 17:17
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_17 (
+  ) u_ie0_1_e_49 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_17_we),
-    .wd     (ie0_e_17_wd),
+    .we     (ie0_1_e_49_we),
+    .wd     (ie0_1_e_49_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3407,25 +7041,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[17].q ),
+    .q      (reg2hw.ie0[49].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_17_qs)
+    .qs     (ie0_1_e_49_qs)
   );
 
 
-  // F[e_18]: 18:18
+  // F[e_50]: 18:18
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_18 (
+  ) u_ie0_1_e_50 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_18_we),
-    .wd     (ie0_e_18_wd),
+    .we     (ie0_1_e_50_we),
+    .wd     (ie0_1_e_50_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3433,25 +7067,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[18].q ),
+    .q      (reg2hw.ie0[50].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_18_qs)
+    .qs     (ie0_1_e_50_qs)
   );
 
 
-  // F[e_19]: 19:19
+  // F[e_51]: 19:19
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_19 (
+  ) u_ie0_1_e_51 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_19_we),
-    .wd     (ie0_e_19_wd),
+    .we     (ie0_1_e_51_we),
+    .wd     (ie0_1_e_51_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3459,25 +7093,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[19].q ),
+    .q      (reg2hw.ie0[51].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_19_qs)
+    .qs     (ie0_1_e_51_qs)
   );
 
 
-  // F[e_20]: 20:20
+  // F[e_52]: 20:20
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_20 (
+  ) u_ie0_1_e_52 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_20_we),
-    .wd     (ie0_e_20_wd),
+    .we     (ie0_1_e_52_we),
+    .wd     (ie0_1_e_52_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3485,25 +7119,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[20].q ),
+    .q      (reg2hw.ie0[52].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_20_qs)
+    .qs     (ie0_1_e_52_qs)
   );
 
 
-  // F[e_21]: 21:21
+  // F[e_53]: 21:21
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_21 (
+  ) u_ie0_1_e_53 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_21_we),
-    .wd     (ie0_e_21_wd),
+    .we     (ie0_1_e_53_we),
+    .wd     (ie0_1_e_53_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3511,25 +7145,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[21].q ),
+    .q      (reg2hw.ie0[53].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_21_qs)
+    .qs     (ie0_1_e_53_qs)
   );
 
 
-  // F[e_22]: 22:22
+  // F[e_54]: 22:22
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_22 (
+  ) u_ie0_1_e_54 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_22_we),
-    .wd     (ie0_e_22_wd),
+    .we     (ie0_1_e_54_we),
+    .wd     (ie0_1_e_54_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3537,25 +7171,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[22].q ),
+    .q      (reg2hw.ie0[54].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_22_qs)
+    .qs     (ie0_1_e_54_qs)
   );
 
 
-  // F[e_23]: 23:23
+  // F[e_55]: 23:23
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_23 (
+  ) u_ie0_1_e_55 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_23_we),
-    .wd     (ie0_e_23_wd),
+    .we     (ie0_1_e_55_we),
+    .wd     (ie0_1_e_55_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3563,25 +7197,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[23].q ),
+    .q      (reg2hw.ie0[55].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_23_qs)
+    .qs     (ie0_1_e_55_qs)
   );
 
 
-  // F[e_24]: 24:24
+  // F[e_56]: 24:24
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_24 (
+  ) u_ie0_1_e_56 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_24_we),
-    .wd     (ie0_e_24_wd),
+    .we     (ie0_1_e_56_we),
+    .wd     (ie0_1_e_56_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3589,25 +7223,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[24].q ),
+    .q      (reg2hw.ie0[56].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_24_qs)
+    .qs     (ie0_1_e_56_qs)
   );
 
 
-  // F[e_25]: 25:25
+  // F[e_57]: 25:25
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_25 (
+  ) u_ie0_1_e_57 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_25_we),
-    .wd     (ie0_e_25_wd),
+    .we     (ie0_1_e_57_we),
+    .wd     (ie0_1_e_57_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3615,25 +7249,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[25].q ),
+    .q      (reg2hw.ie0[57].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_25_qs)
+    .qs     (ie0_1_e_57_qs)
   );
 
 
-  // F[e_26]: 26:26
+  // F[e_58]: 26:26
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_26 (
+  ) u_ie0_1_e_58 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_26_we),
-    .wd     (ie0_e_26_wd),
+    .we     (ie0_1_e_58_we),
+    .wd     (ie0_1_e_58_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3641,25 +7275,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[26].q ),
+    .q      (reg2hw.ie0[58].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_26_qs)
+    .qs     (ie0_1_e_58_qs)
   );
 
 
-  // F[e_27]: 27:27
+  // F[e_59]: 27:27
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_27 (
+  ) u_ie0_1_e_59 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_27_we),
-    .wd     (ie0_e_27_wd),
+    .we     (ie0_1_e_59_we),
+    .wd     (ie0_1_e_59_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3667,25 +7301,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[27].q ),
+    .q      (reg2hw.ie0[59].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_27_qs)
+    .qs     (ie0_1_e_59_qs)
   );
 
 
-  // F[e_28]: 28:28
+  // F[e_60]: 28:28
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_28 (
+  ) u_ie0_1_e_60 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_28_we),
-    .wd     (ie0_e_28_wd),
+    .we     (ie0_1_e_60_we),
+    .wd     (ie0_1_e_60_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3693,25 +7327,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[28].q ),
+    .q      (reg2hw.ie0[60].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_28_qs)
+    .qs     (ie0_1_e_60_qs)
   );
 
 
-  // F[e_29]: 29:29
+  // F[e_61]: 29:29
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_29 (
+  ) u_ie0_1_e_61 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_29_we),
-    .wd     (ie0_e_29_wd),
+    .we     (ie0_1_e_61_we),
+    .wd     (ie0_1_e_61_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3719,25 +7353,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[29].q ),
+    .q      (reg2hw.ie0[61].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_29_qs)
+    .qs     (ie0_1_e_61_qs)
   );
 
 
-  // F[e_30]: 30:30
+  // F[e_62]: 30:30
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_30 (
+  ) u_ie0_1_e_62 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_30_we),
-    .wd     (ie0_e_30_wd),
+    .we     (ie0_1_e_62_we),
+    .wd     (ie0_1_e_62_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3745,25 +7379,25 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[30].q ),
+    .q      (reg2hw.ie0[62].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_30_qs)
+    .qs     (ie0_1_e_62_qs)
   );
 
 
-  // F[e_31]: 31:31
+  // F[e_63]: 31:31
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_ie0_e_31 (
+  ) u_ie0_1_e_63 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_e_31_we),
-    .wd     (ie0_e_31_wd),
+    .we     (ie0_1_e_63_we),
+    .wd     (ie0_1_e_63_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -3771,10 +7405,10 @@ module rv_plic_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[31].q ),
+    .q      (reg2hw.ie0[63].q ),
 
     // to register interface (read)
-    .qs     (ie0_e_31_qs)
+    .qs     (ie0_1_e_63_qs)
   );
 
 
@@ -3851,47 +7485,82 @@ module rv_plic_reg_top (
 
 
 
-  logic [37:0] addr_hit;
+  logic [72:0] addr_hit;
   always_comb begin
     addr_hit = '0;
-    addr_hit[ 0] = (reg_addr == RV_PLIC_IP_OFFSET);
-    addr_hit[ 1] = (reg_addr == RV_PLIC_LE_OFFSET);
-    addr_hit[ 2] = (reg_addr == RV_PLIC_PRIO0_OFFSET);
-    addr_hit[ 3] = (reg_addr == RV_PLIC_PRIO1_OFFSET);
-    addr_hit[ 4] = (reg_addr == RV_PLIC_PRIO2_OFFSET);
-    addr_hit[ 5] = (reg_addr == RV_PLIC_PRIO3_OFFSET);
-    addr_hit[ 6] = (reg_addr == RV_PLIC_PRIO4_OFFSET);
-    addr_hit[ 7] = (reg_addr == RV_PLIC_PRIO5_OFFSET);
-    addr_hit[ 8] = (reg_addr == RV_PLIC_PRIO6_OFFSET);
-    addr_hit[ 9] = (reg_addr == RV_PLIC_PRIO7_OFFSET);
-    addr_hit[10] = (reg_addr == RV_PLIC_PRIO8_OFFSET);
-    addr_hit[11] = (reg_addr == RV_PLIC_PRIO9_OFFSET);
-    addr_hit[12] = (reg_addr == RV_PLIC_PRIO10_OFFSET);
-    addr_hit[13] = (reg_addr == RV_PLIC_PRIO11_OFFSET);
-    addr_hit[14] = (reg_addr == RV_PLIC_PRIO12_OFFSET);
-    addr_hit[15] = (reg_addr == RV_PLIC_PRIO13_OFFSET);
-    addr_hit[16] = (reg_addr == RV_PLIC_PRIO14_OFFSET);
-    addr_hit[17] = (reg_addr == RV_PLIC_PRIO15_OFFSET);
-    addr_hit[18] = (reg_addr == RV_PLIC_PRIO16_OFFSET);
-    addr_hit[19] = (reg_addr == RV_PLIC_PRIO17_OFFSET);
-    addr_hit[20] = (reg_addr == RV_PLIC_PRIO18_OFFSET);
-    addr_hit[21] = (reg_addr == RV_PLIC_PRIO19_OFFSET);
-    addr_hit[22] = (reg_addr == RV_PLIC_PRIO20_OFFSET);
-    addr_hit[23] = (reg_addr == RV_PLIC_PRIO21_OFFSET);
-    addr_hit[24] = (reg_addr == RV_PLIC_PRIO22_OFFSET);
-    addr_hit[25] = (reg_addr == RV_PLIC_PRIO23_OFFSET);
-    addr_hit[26] = (reg_addr == RV_PLIC_PRIO24_OFFSET);
-    addr_hit[27] = (reg_addr == RV_PLIC_PRIO25_OFFSET);
-    addr_hit[28] = (reg_addr == RV_PLIC_PRIO26_OFFSET);
-    addr_hit[29] = (reg_addr == RV_PLIC_PRIO27_OFFSET);
-    addr_hit[30] = (reg_addr == RV_PLIC_PRIO28_OFFSET);
-    addr_hit[31] = (reg_addr == RV_PLIC_PRIO29_OFFSET);
-    addr_hit[32] = (reg_addr == RV_PLIC_PRIO30_OFFSET);
-    addr_hit[33] = (reg_addr == RV_PLIC_PRIO31_OFFSET);
-    addr_hit[34] = (reg_addr == RV_PLIC_IE0_OFFSET);
-    addr_hit[35] = (reg_addr == RV_PLIC_THRESHOLD0_OFFSET);
-    addr_hit[36] = (reg_addr == RV_PLIC_CC0_OFFSET);
-    addr_hit[37] = (reg_addr == RV_PLIC_MSIP0_OFFSET);
+    addr_hit[ 0] = (reg_addr == RV_PLIC_IP_0_OFFSET);
+    addr_hit[ 1] = (reg_addr == RV_PLIC_IP_1_OFFSET);
+    addr_hit[ 2] = (reg_addr == RV_PLIC_LE_0_OFFSET);
+    addr_hit[ 3] = (reg_addr == RV_PLIC_LE_1_OFFSET);
+    addr_hit[ 4] = (reg_addr == RV_PLIC_PRIO0_OFFSET);
+    addr_hit[ 5] = (reg_addr == RV_PLIC_PRIO1_OFFSET);
+    addr_hit[ 6] = (reg_addr == RV_PLIC_PRIO2_OFFSET);
+    addr_hit[ 7] = (reg_addr == RV_PLIC_PRIO3_OFFSET);
+    addr_hit[ 8] = (reg_addr == RV_PLIC_PRIO4_OFFSET);
+    addr_hit[ 9] = (reg_addr == RV_PLIC_PRIO5_OFFSET);
+    addr_hit[10] = (reg_addr == RV_PLIC_PRIO6_OFFSET);
+    addr_hit[11] = (reg_addr == RV_PLIC_PRIO7_OFFSET);
+    addr_hit[12] = (reg_addr == RV_PLIC_PRIO8_OFFSET);
+    addr_hit[13] = (reg_addr == RV_PLIC_PRIO9_OFFSET);
+    addr_hit[14] = (reg_addr == RV_PLIC_PRIO10_OFFSET);
+    addr_hit[15] = (reg_addr == RV_PLIC_PRIO11_OFFSET);
+    addr_hit[16] = (reg_addr == RV_PLIC_PRIO12_OFFSET);
+    addr_hit[17] = (reg_addr == RV_PLIC_PRIO13_OFFSET);
+    addr_hit[18] = (reg_addr == RV_PLIC_PRIO14_OFFSET);
+    addr_hit[19] = (reg_addr == RV_PLIC_PRIO15_OFFSET);
+    addr_hit[20] = (reg_addr == RV_PLIC_PRIO16_OFFSET);
+    addr_hit[21] = (reg_addr == RV_PLIC_PRIO17_OFFSET);
+    addr_hit[22] = (reg_addr == RV_PLIC_PRIO18_OFFSET);
+    addr_hit[23] = (reg_addr == RV_PLIC_PRIO19_OFFSET);
+    addr_hit[24] = (reg_addr == RV_PLIC_PRIO20_OFFSET);
+    addr_hit[25] = (reg_addr == RV_PLIC_PRIO21_OFFSET);
+    addr_hit[26] = (reg_addr == RV_PLIC_PRIO22_OFFSET);
+    addr_hit[27] = (reg_addr == RV_PLIC_PRIO23_OFFSET);
+    addr_hit[28] = (reg_addr == RV_PLIC_PRIO24_OFFSET);
+    addr_hit[29] = (reg_addr == RV_PLIC_PRIO25_OFFSET);
+    addr_hit[30] = (reg_addr == RV_PLIC_PRIO26_OFFSET);
+    addr_hit[31] = (reg_addr == RV_PLIC_PRIO27_OFFSET);
+    addr_hit[32] = (reg_addr == RV_PLIC_PRIO28_OFFSET);
+    addr_hit[33] = (reg_addr == RV_PLIC_PRIO29_OFFSET);
+    addr_hit[34] = (reg_addr == RV_PLIC_PRIO30_OFFSET);
+    addr_hit[35] = (reg_addr == RV_PLIC_PRIO31_OFFSET);
+    addr_hit[36] = (reg_addr == RV_PLIC_PRIO32_OFFSET);
+    addr_hit[37] = (reg_addr == RV_PLIC_PRIO33_OFFSET);
+    addr_hit[38] = (reg_addr == RV_PLIC_PRIO34_OFFSET);
+    addr_hit[39] = (reg_addr == RV_PLIC_PRIO35_OFFSET);
+    addr_hit[40] = (reg_addr == RV_PLIC_PRIO36_OFFSET);
+    addr_hit[41] = (reg_addr == RV_PLIC_PRIO37_OFFSET);
+    addr_hit[42] = (reg_addr == RV_PLIC_PRIO38_OFFSET);
+    addr_hit[43] = (reg_addr == RV_PLIC_PRIO39_OFFSET);
+    addr_hit[44] = (reg_addr == RV_PLIC_PRIO40_OFFSET);
+    addr_hit[45] = (reg_addr == RV_PLIC_PRIO41_OFFSET);
+    addr_hit[46] = (reg_addr == RV_PLIC_PRIO42_OFFSET);
+    addr_hit[47] = (reg_addr == RV_PLIC_PRIO43_OFFSET);
+    addr_hit[48] = (reg_addr == RV_PLIC_PRIO44_OFFSET);
+    addr_hit[49] = (reg_addr == RV_PLIC_PRIO45_OFFSET);
+    addr_hit[50] = (reg_addr == RV_PLIC_PRIO46_OFFSET);
+    addr_hit[51] = (reg_addr == RV_PLIC_PRIO47_OFFSET);
+    addr_hit[52] = (reg_addr == RV_PLIC_PRIO48_OFFSET);
+    addr_hit[53] = (reg_addr == RV_PLIC_PRIO49_OFFSET);
+    addr_hit[54] = (reg_addr == RV_PLIC_PRIO50_OFFSET);
+    addr_hit[55] = (reg_addr == RV_PLIC_PRIO51_OFFSET);
+    addr_hit[56] = (reg_addr == RV_PLIC_PRIO52_OFFSET);
+    addr_hit[57] = (reg_addr == RV_PLIC_PRIO53_OFFSET);
+    addr_hit[58] = (reg_addr == RV_PLIC_PRIO54_OFFSET);
+    addr_hit[59] = (reg_addr == RV_PLIC_PRIO55_OFFSET);
+    addr_hit[60] = (reg_addr == RV_PLIC_PRIO56_OFFSET);
+    addr_hit[61] = (reg_addr == RV_PLIC_PRIO57_OFFSET);
+    addr_hit[62] = (reg_addr == RV_PLIC_PRIO58_OFFSET);
+    addr_hit[63] = (reg_addr == RV_PLIC_PRIO59_OFFSET);
+    addr_hit[64] = (reg_addr == RV_PLIC_PRIO60_OFFSET);
+    addr_hit[65] = (reg_addr == RV_PLIC_PRIO61_OFFSET);
+    addr_hit[66] = (reg_addr == RV_PLIC_PRIO62_OFFSET);
+    addr_hit[67] = (reg_addr == RV_PLIC_PRIO63_OFFSET);
+    addr_hit[68] = (reg_addr == RV_PLIC_IE0_0_OFFSET);
+    addr_hit[69] = (reg_addr == RV_PLIC_IE0_1_OFFSET);
+    addr_hit[70] = (reg_addr == RV_PLIC_THRESHOLD0_OFFSET);
+    addr_hit[71] = (reg_addr == RV_PLIC_CC0_OFFSET);
+    addr_hit[72] = (reg_addr == RV_PLIC_MSIP0_OFFSET);
   end
 
   assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
@@ -3936,305 +7605,628 @@ module rv_plic_reg_top (
                (addr_hit[34] & (|(RV_PLIC_PERMIT[34] & ~reg_be))) |
                (addr_hit[35] & (|(RV_PLIC_PERMIT[35] & ~reg_be))) |
                (addr_hit[36] & (|(RV_PLIC_PERMIT[36] & ~reg_be))) |
-               (addr_hit[37] & (|(RV_PLIC_PERMIT[37] & ~reg_be)))));
+               (addr_hit[37] & (|(RV_PLIC_PERMIT[37] & ~reg_be))) |
+               (addr_hit[38] & (|(RV_PLIC_PERMIT[38] & ~reg_be))) |
+               (addr_hit[39] & (|(RV_PLIC_PERMIT[39] & ~reg_be))) |
+               (addr_hit[40] & (|(RV_PLIC_PERMIT[40] & ~reg_be))) |
+               (addr_hit[41] & (|(RV_PLIC_PERMIT[41] & ~reg_be))) |
+               (addr_hit[42] & (|(RV_PLIC_PERMIT[42] & ~reg_be))) |
+               (addr_hit[43] & (|(RV_PLIC_PERMIT[43] & ~reg_be))) |
+               (addr_hit[44] & (|(RV_PLIC_PERMIT[44] & ~reg_be))) |
+               (addr_hit[45] & (|(RV_PLIC_PERMIT[45] & ~reg_be))) |
+               (addr_hit[46] & (|(RV_PLIC_PERMIT[46] & ~reg_be))) |
+               (addr_hit[47] & (|(RV_PLIC_PERMIT[47] & ~reg_be))) |
+               (addr_hit[48] & (|(RV_PLIC_PERMIT[48] & ~reg_be))) |
+               (addr_hit[49] & (|(RV_PLIC_PERMIT[49] & ~reg_be))) |
+               (addr_hit[50] & (|(RV_PLIC_PERMIT[50] & ~reg_be))) |
+               (addr_hit[51] & (|(RV_PLIC_PERMIT[51] & ~reg_be))) |
+               (addr_hit[52] & (|(RV_PLIC_PERMIT[52] & ~reg_be))) |
+               (addr_hit[53] & (|(RV_PLIC_PERMIT[53] & ~reg_be))) |
+               (addr_hit[54] & (|(RV_PLIC_PERMIT[54] & ~reg_be))) |
+               (addr_hit[55] & (|(RV_PLIC_PERMIT[55] & ~reg_be))) |
+               (addr_hit[56] & (|(RV_PLIC_PERMIT[56] & ~reg_be))) |
+               (addr_hit[57] & (|(RV_PLIC_PERMIT[57] & ~reg_be))) |
+               (addr_hit[58] & (|(RV_PLIC_PERMIT[58] & ~reg_be))) |
+               (addr_hit[59] & (|(RV_PLIC_PERMIT[59] & ~reg_be))) |
+               (addr_hit[60] & (|(RV_PLIC_PERMIT[60] & ~reg_be))) |
+               (addr_hit[61] & (|(RV_PLIC_PERMIT[61] & ~reg_be))) |
+               (addr_hit[62] & (|(RV_PLIC_PERMIT[62] & ~reg_be))) |
+               (addr_hit[63] & (|(RV_PLIC_PERMIT[63] & ~reg_be))) |
+               (addr_hit[64] & (|(RV_PLIC_PERMIT[64] & ~reg_be))) |
+               (addr_hit[65] & (|(RV_PLIC_PERMIT[65] & ~reg_be))) |
+               (addr_hit[66] & (|(RV_PLIC_PERMIT[66] & ~reg_be))) |
+               (addr_hit[67] & (|(RV_PLIC_PERMIT[67] & ~reg_be))) |
+               (addr_hit[68] & (|(RV_PLIC_PERMIT[68] & ~reg_be))) |
+               (addr_hit[69] & (|(RV_PLIC_PERMIT[69] & ~reg_be))) |
+               (addr_hit[70] & (|(RV_PLIC_PERMIT[70] & ~reg_be))) |
+               (addr_hit[71] & (|(RV_PLIC_PERMIT[71] & ~reg_be))) |
+               (addr_hit[72] & (|(RV_PLIC_PERMIT[72] & ~reg_be)))));
   end
 
-  assign le_le_0_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_0_wd = reg_wdata[0];
+  assign le_0_le_0_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_0_wd = reg_wdata[0];
+
+  assign le_0_le_1_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_1_wd = reg_wdata[1];
+
+  assign le_0_le_2_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_2_wd = reg_wdata[2];
+
+  assign le_0_le_3_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_3_wd = reg_wdata[3];
+
+  assign le_0_le_4_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_4_wd = reg_wdata[4];
+
+  assign le_0_le_5_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_5_wd = reg_wdata[5];
+
+  assign le_0_le_6_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_6_wd = reg_wdata[6];
+
+  assign le_0_le_7_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_7_wd = reg_wdata[7];
+
+  assign le_0_le_8_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_8_wd = reg_wdata[8];
+
+  assign le_0_le_9_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_9_wd = reg_wdata[9];
+
+  assign le_0_le_10_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_10_wd = reg_wdata[10];
+
+  assign le_0_le_11_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_11_wd = reg_wdata[11];
+
+  assign le_0_le_12_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_12_wd = reg_wdata[12];
+
+  assign le_0_le_13_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_13_wd = reg_wdata[13];
 
-  assign le_le_1_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_1_wd = reg_wdata[1];
+  assign le_0_le_14_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_14_wd = reg_wdata[14];
 
-  assign le_le_2_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_2_wd = reg_wdata[2];
+  assign le_0_le_15_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_15_wd = reg_wdata[15];
 
-  assign le_le_3_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_3_wd = reg_wdata[3];
+  assign le_0_le_16_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_16_wd = reg_wdata[16];
 
-  assign le_le_4_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_4_wd = reg_wdata[4];
+  assign le_0_le_17_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_17_wd = reg_wdata[17];
 
-  assign le_le_5_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_5_wd = reg_wdata[5];
+  assign le_0_le_18_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_18_wd = reg_wdata[18];
 
-  assign le_le_6_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_6_wd = reg_wdata[6];
+  assign le_0_le_19_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_19_wd = reg_wdata[19];
 
-  assign le_le_7_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_7_wd = reg_wdata[7];
+  assign le_0_le_20_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_20_wd = reg_wdata[20];
 
-  assign le_le_8_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_8_wd = reg_wdata[8];
+  assign le_0_le_21_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_21_wd = reg_wdata[21];
 
-  assign le_le_9_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_9_wd = reg_wdata[9];
+  assign le_0_le_22_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_22_wd = reg_wdata[22];
 
-  assign le_le_10_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_10_wd = reg_wdata[10];
+  assign le_0_le_23_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_23_wd = reg_wdata[23];
 
-  assign le_le_11_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_11_wd = reg_wdata[11];
+  assign le_0_le_24_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_24_wd = reg_wdata[24];
 
-  assign le_le_12_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_12_wd = reg_wdata[12];
+  assign le_0_le_25_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_25_wd = reg_wdata[25];
 
-  assign le_le_13_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_13_wd = reg_wdata[13];
+  assign le_0_le_26_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_26_wd = reg_wdata[26];
 
-  assign le_le_14_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_14_wd = reg_wdata[14];
+  assign le_0_le_27_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_27_wd = reg_wdata[27];
 
-  assign le_le_15_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_15_wd = reg_wdata[15];
+  assign le_0_le_28_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_28_wd = reg_wdata[28];
 
-  assign le_le_16_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_16_wd = reg_wdata[16];
+  assign le_0_le_29_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_29_wd = reg_wdata[29];
 
-  assign le_le_17_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_17_wd = reg_wdata[17];
+  assign le_0_le_30_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_30_wd = reg_wdata[30];
 
-  assign le_le_18_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_18_wd = reg_wdata[18];
+  assign le_0_le_31_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_0_le_31_wd = reg_wdata[31];
 
-  assign le_le_19_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_19_wd = reg_wdata[19];
+  assign le_1_le_32_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_32_wd = reg_wdata[0];
 
-  assign le_le_20_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_20_wd = reg_wdata[20];
+  assign le_1_le_33_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_33_wd = reg_wdata[1];
 
-  assign le_le_21_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_21_wd = reg_wdata[21];
+  assign le_1_le_34_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_34_wd = reg_wdata[2];
 
-  assign le_le_22_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_22_wd = reg_wdata[22];
+  assign le_1_le_35_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_35_wd = reg_wdata[3];
 
-  assign le_le_23_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_23_wd = reg_wdata[23];
+  assign le_1_le_36_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_36_wd = reg_wdata[4];
 
-  assign le_le_24_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_24_wd = reg_wdata[24];
+  assign le_1_le_37_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_37_wd = reg_wdata[5];
 
-  assign le_le_25_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_25_wd = reg_wdata[25];
+  assign le_1_le_38_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_38_wd = reg_wdata[6];
 
-  assign le_le_26_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_26_wd = reg_wdata[26];
+  assign le_1_le_39_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_39_wd = reg_wdata[7];
 
-  assign le_le_27_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_27_wd = reg_wdata[27];
+  assign le_1_le_40_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_40_wd = reg_wdata[8];
 
-  assign le_le_28_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_28_wd = reg_wdata[28];
+  assign le_1_le_41_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_41_wd = reg_wdata[9];
 
-  assign le_le_29_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_29_wd = reg_wdata[29];
+  assign le_1_le_42_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_42_wd = reg_wdata[10];
 
-  assign le_le_30_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_30_wd = reg_wdata[30];
+  assign le_1_le_43_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_43_wd = reg_wdata[11];
 
-  assign le_le_31_we = addr_hit[1] & reg_we & !reg_error;
-  assign le_le_31_wd = reg_wdata[31];
+  assign le_1_le_44_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_44_wd = reg_wdata[12];
 
-  assign prio0_we = addr_hit[2] & reg_we & !reg_error;
+  assign le_1_le_45_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_45_wd = reg_wdata[13];
+
+  assign le_1_le_46_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_46_wd = reg_wdata[14];
+
+  assign le_1_le_47_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_47_wd = reg_wdata[15];
+
+  assign le_1_le_48_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_48_wd = reg_wdata[16];
+
+  assign le_1_le_49_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_49_wd = reg_wdata[17];
+
+  assign le_1_le_50_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_50_wd = reg_wdata[18];
+
+  assign le_1_le_51_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_51_wd = reg_wdata[19];
+
+  assign le_1_le_52_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_52_wd = reg_wdata[20];
+
+  assign le_1_le_53_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_53_wd = reg_wdata[21];
+
+  assign le_1_le_54_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_54_wd = reg_wdata[22];
+
+  assign le_1_le_55_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_55_wd = reg_wdata[23];
+
+  assign le_1_le_56_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_56_wd = reg_wdata[24];
+
+  assign le_1_le_57_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_57_wd = reg_wdata[25];
+
+  assign le_1_le_58_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_58_wd = reg_wdata[26];
+
+  assign le_1_le_59_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_59_wd = reg_wdata[27];
+
+  assign le_1_le_60_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_60_wd = reg_wdata[28];
+
+  assign le_1_le_61_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_61_wd = reg_wdata[29];
+
+  assign le_1_le_62_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_62_wd = reg_wdata[30];
+
+  assign le_1_le_63_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_1_le_63_wd = reg_wdata[31];
+
+  assign prio0_we = addr_hit[4] & reg_we & !reg_error;
   assign prio0_wd = reg_wdata[2:0];
 
-  assign prio1_we = addr_hit[3] & reg_we & !reg_error;
+  assign prio1_we = addr_hit[5] & reg_we & !reg_error;
   assign prio1_wd = reg_wdata[2:0];
 
-  assign prio2_we = addr_hit[4] & reg_we & !reg_error;
+  assign prio2_we = addr_hit[6] & reg_we & !reg_error;
   assign prio2_wd = reg_wdata[2:0];
 
-  assign prio3_we = addr_hit[5] & reg_we & !reg_error;
+  assign prio3_we = addr_hit[7] & reg_we & !reg_error;
   assign prio3_wd = reg_wdata[2:0];
 
-  assign prio4_we = addr_hit[6] & reg_we & !reg_error;
+  assign prio4_we = addr_hit[8] & reg_we & !reg_error;
   assign prio4_wd = reg_wdata[2:0];
 
-  assign prio5_we = addr_hit[7] & reg_we & !reg_error;
+  assign prio5_we = addr_hit[9] & reg_we & !reg_error;
   assign prio5_wd = reg_wdata[2:0];
 
-  assign prio6_we = addr_hit[8] & reg_we & !reg_error;
+  assign prio6_we = addr_hit[10] & reg_we & !reg_error;
   assign prio6_wd = reg_wdata[2:0];
 
-  assign prio7_we = addr_hit[9] & reg_we & !reg_error;
+  assign prio7_we = addr_hit[11] & reg_we & !reg_error;
   assign prio7_wd = reg_wdata[2:0];
 
-  assign prio8_we = addr_hit[10] & reg_we & !reg_error;
+  assign prio8_we = addr_hit[12] & reg_we & !reg_error;
   assign prio8_wd = reg_wdata[2:0];
 
-  assign prio9_we = addr_hit[11] & reg_we & !reg_error;
+  assign prio9_we = addr_hit[13] & reg_we & !reg_error;
   assign prio9_wd = reg_wdata[2:0];
 
-  assign prio10_we = addr_hit[12] & reg_we & !reg_error;
+  assign prio10_we = addr_hit[14] & reg_we & !reg_error;
   assign prio10_wd = reg_wdata[2:0];
 
-  assign prio11_we = addr_hit[13] & reg_we & !reg_error;
+  assign prio11_we = addr_hit[15] & reg_we & !reg_error;
   assign prio11_wd = reg_wdata[2:0];
 
-  assign prio12_we = addr_hit[14] & reg_we & !reg_error;
+  assign prio12_we = addr_hit[16] & reg_we & !reg_error;
   assign prio12_wd = reg_wdata[2:0];
 
-  assign prio13_we = addr_hit[15] & reg_we & !reg_error;
+  assign prio13_we = addr_hit[17] & reg_we & !reg_error;
   assign prio13_wd = reg_wdata[2:0];
 
-  assign prio14_we = addr_hit[16] & reg_we & !reg_error;
+  assign prio14_we = addr_hit[18] & reg_we & !reg_error;
   assign prio14_wd = reg_wdata[2:0];
 
-  assign prio15_we = addr_hit[17] & reg_we & !reg_error;
+  assign prio15_we = addr_hit[19] & reg_we & !reg_error;
   assign prio15_wd = reg_wdata[2:0];
 
-  assign prio16_we = addr_hit[18] & reg_we & !reg_error;
+  assign prio16_we = addr_hit[20] & reg_we & !reg_error;
   assign prio16_wd = reg_wdata[2:0];
 
-  assign prio17_we = addr_hit[19] & reg_we & !reg_error;
+  assign prio17_we = addr_hit[21] & reg_we & !reg_error;
   assign prio17_wd = reg_wdata[2:0];
 
-  assign prio18_we = addr_hit[20] & reg_we & !reg_error;
+  assign prio18_we = addr_hit[22] & reg_we & !reg_error;
   assign prio18_wd = reg_wdata[2:0];
 
-  assign prio19_we = addr_hit[21] & reg_we & !reg_error;
+  assign prio19_we = addr_hit[23] & reg_we & !reg_error;
   assign prio19_wd = reg_wdata[2:0];
 
-  assign prio20_we = addr_hit[22] & reg_we & !reg_error;
+  assign prio20_we = addr_hit[24] & reg_we & !reg_error;
   assign prio20_wd = reg_wdata[2:0];
 
-  assign prio21_we = addr_hit[23] & reg_we & !reg_error;
+  assign prio21_we = addr_hit[25] & reg_we & !reg_error;
   assign prio21_wd = reg_wdata[2:0];
 
-  assign prio22_we = addr_hit[24] & reg_we & !reg_error;
+  assign prio22_we = addr_hit[26] & reg_we & !reg_error;
   assign prio22_wd = reg_wdata[2:0];
 
-  assign prio23_we = addr_hit[25] & reg_we & !reg_error;
+  assign prio23_we = addr_hit[27] & reg_we & !reg_error;
   assign prio23_wd = reg_wdata[2:0];
 
-  assign prio24_we = addr_hit[26] & reg_we & !reg_error;
+  assign prio24_we = addr_hit[28] & reg_we & !reg_error;
   assign prio24_wd = reg_wdata[2:0];
 
-  assign prio25_we = addr_hit[27] & reg_we & !reg_error;
+  assign prio25_we = addr_hit[29] & reg_we & !reg_error;
   assign prio25_wd = reg_wdata[2:0];
 
-  assign prio26_we = addr_hit[28] & reg_we & !reg_error;
+  assign prio26_we = addr_hit[30] & reg_we & !reg_error;
   assign prio26_wd = reg_wdata[2:0];
 
-  assign prio27_we = addr_hit[29] & reg_we & !reg_error;
+  assign prio27_we = addr_hit[31] & reg_we & !reg_error;
   assign prio27_wd = reg_wdata[2:0];
 
-  assign prio28_we = addr_hit[30] & reg_we & !reg_error;
+  assign prio28_we = addr_hit[32] & reg_we & !reg_error;
   assign prio28_wd = reg_wdata[2:0];
 
-  assign prio29_we = addr_hit[31] & reg_we & !reg_error;
+  assign prio29_we = addr_hit[33] & reg_we & !reg_error;
   assign prio29_wd = reg_wdata[2:0];
 
-  assign prio30_we = addr_hit[32] & reg_we & !reg_error;
+  assign prio30_we = addr_hit[34] & reg_we & !reg_error;
   assign prio30_wd = reg_wdata[2:0];
 
-  assign prio31_we = addr_hit[33] & reg_we & !reg_error;
+  assign prio31_we = addr_hit[35] & reg_we & !reg_error;
   assign prio31_wd = reg_wdata[2:0];
 
-  assign ie0_e_0_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_0_wd = reg_wdata[0];
+  assign prio32_we = addr_hit[36] & reg_we & !reg_error;
+  assign prio32_wd = reg_wdata[2:0];
+
+  assign prio33_we = addr_hit[37] & reg_we & !reg_error;
+  assign prio33_wd = reg_wdata[2:0];
+
+  assign prio34_we = addr_hit[38] & reg_we & !reg_error;
+  assign prio34_wd = reg_wdata[2:0];
+
+  assign prio35_we = addr_hit[39] & reg_we & !reg_error;
+  assign prio35_wd = reg_wdata[2:0];
+
+  assign prio36_we = addr_hit[40] & reg_we & !reg_error;
+  assign prio36_wd = reg_wdata[2:0];
+
+  assign prio37_we = addr_hit[41] & reg_we & !reg_error;
+  assign prio37_wd = reg_wdata[2:0];
+
+  assign prio38_we = addr_hit[42] & reg_we & !reg_error;
+  assign prio38_wd = reg_wdata[2:0];
+
+  assign prio39_we = addr_hit[43] & reg_we & !reg_error;
+  assign prio39_wd = reg_wdata[2:0];
+
+  assign prio40_we = addr_hit[44] & reg_we & !reg_error;
+  assign prio40_wd = reg_wdata[2:0];
+
+  assign prio41_we = addr_hit[45] & reg_we & !reg_error;
+  assign prio41_wd = reg_wdata[2:0];
+
+  assign prio42_we = addr_hit[46] & reg_we & !reg_error;
+  assign prio42_wd = reg_wdata[2:0];
+
+  assign prio43_we = addr_hit[47] & reg_we & !reg_error;
+  assign prio43_wd = reg_wdata[2:0];
+
+  assign prio44_we = addr_hit[48] & reg_we & !reg_error;
+  assign prio44_wd = reg_wdata[2:0];
+
+  assign prio45_we = addr_hit[49] & reg_we & !reg_error;
+  assign prio45_wd = reg_wdata[2:0];
 
-  assign ie0_e_1_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_1_wd = reg_wdata[1];
+  assign prio46_we = addr_hit[50] & reg_we & !reg_error;
+  assign prio46_wd = reg_wdata[2:0];
 
-  assign ie0_e_2_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_2_wd = reg_wdata[2];
+  assign prio47_we = addr_hit[51] & reg_we & !reg_error;
+  assign prio47_wd = reg_wdata[2:0];
 
-  assign ie0_e_3_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_3_wd = reg_wdata[3];
+  assign prio48_we = addr_hit[52] & reg_we & !reg_error;
+  assign prio48_wd = reg_wdata[2:0];
 
-  assign ie0_e_4_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_4_wd = reg_wdata[4];
+  assign prio49_we = addr_hit[53] & reg_we & !reg_error;
+  assign prio49_wd = reg_wdata[2:0];
 
-  assign ie0_e_5_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_5_wd = reg_wdata[5];
+  assign prio50_we = addr_hit[54] & reg_we & !reg_error;
+  assign prio50_wd = reg_wdata[2:0];
 
-  assign ie0_e_6_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_6_wd = reg_wdata[6];
+  assign prio51_we = addr_hit[55] & reg_we & !reg_error;
+  assign prio51_wd = reg_wdata[2:0];
 
-  assign ie0_e_7_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_7_wd = reg_wdata[7];
+  assign prio52_we = addr_hit[56] & reg_we & !reg_error;
+  assign prio52_wd = reg_wdata[2:0];
 
-  assign ie0_e_8_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_8_wd = reg_wdata[8];
+  assign prio53_we = addr_hit[57] & reg_we & !reg_error;
+  assign prio53_wd = reg_wdata[2:0];
 
-  assign ie0_e_9_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_9_wd = reg_wdata[9];
+  assign prio54_we = addr_hit[58] & reg_we & !reg_error;
+  assign prio54_wd = reg_wdata[2:0];
 
-  assign ie0_e_10_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_10_wd = reg_wdata[10];
+  assign prio55_we = addr_hit[59] & reg_we & !reg_error;
+  assign prio55_wd = reg_wdata[2:0];
 
-  assign ie0_e_11_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_11_wd = reg_wdata[11];
+  assign prio56_we = addr_hit[60] & reg_we & !reg_error;
+  assign prio56_wd = reg_wdata[2:0];
 
-  assign ie0_e_12_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_12_wd = reg_wdata[12];
+  assign prio57_we = addr_hit[61] & reg_we & !reg_error;
+  assign prio57_wd = reg_wdata[2:0];
 
-  assign ie0_e_13_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_13_wd = reg_wdata[13];
+  assign prio58_we = addr_hit[62] & reg_we & !reg_error;
+  assign prio58_wd = reg_wdata[2:0];
 
-  assign ie0_e_14_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_14_wd = reg_wdata[14];
+  assign prio59_we = addr_hit[63] & reg_we & !reg_error;
+  assign prio59_wd = reg_wdata[2:0];
 
-  assign ie0_e_15_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_15_wd = reg_wdata[15];
+  assign prio60_we = addr_hit[64] & reg_we & !reg_error;
+  assign prio60_wd = reg_wdata[2:0];
 
-  assign ie0_e_16_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_16_wd = reg_wdata[16];
+  assign prio61_we = addr_hit[65] & reg_we & !reg_error;
+  assign prio61_wd = reg_wdata[2:0];
 
-  assign ie0_e_17_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_17_wd = reg_wdata[17];
+  assign prio62_we = addr_hit[66] & reg_we & !reg_error;
+  assign prio62_wd = reg_wdata[2:0];
 
-  assign ie0_e_18_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_18_wd = reg_wdata[18];
+  assign prio63_we = addr_hit[67] & reg_we & !reg_error;
+  assign prio63_wd = reg_wdata[2:0];
 
-  assign ie0_e_19_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_19_wd = reg_wdata[19];
+  assign ie0_0_e_0_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_0_wd = reg_wdata[0];
 
-  assign ie0_e_20_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_20_wd = reg_wdata[20];
+  assign ie0_0_e_1_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_1_wd = reg_wdata[1];
 
-  assign ie0_e_21_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_21_wd = reg_wdata[21];
+  assign ie0_0_e_2_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_2_wd = reg_wdata[2];
 
-  assign ie0_e_22_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_22_wd = reg_wdata[22];
+  assign ie0_0_e_3_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_3_wd = reg_wdata[3];
 
-  assign ie0_e_23_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_23_wd = reg_wdata[23];
+  assign ie0_0_e_4_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_4_wd = reg_wdata[4];
 
-  assign ie0_e_24_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_24_wd = reg_wdata[24];
+  assign ie0_0_e_5_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_5_wd = reg_wdata[5];
 
-  assign ie0_e_25_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_25_wd = reg_wdata[25];
+  assign ie0_0_e_6_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_6_wd = reg_wdata[6];
 
-  assign ie0_e_26_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_26_wd = reg_wdata[26];
+  assign ie0_0_e_7_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_7_wd = reg_wdata[7];
 
-  assign ie0_e_27_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_27_wd = reg_wdata[27];
+  assign ie0_0_e_8_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_8_wd = reg_wdata[8];
 
-  assign ie0_e_28_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_28_wd = reg_wdata[28];
+  assign ie0_0_e_9_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_9_wd = reg_wdata[9];
 
-  assign ie0_e_29_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_29_wd = reg_wdata[29];
+  assign ie0_0_e_10_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_10_wd = reg_wdata[10];
 
-  assign ie0_e_30_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_30_wd = reg_wdata[30];
+  assign ie0_0_e_11_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_11_wd = reg_wdata[11];
 
-  assign ie0_e_31_we = addr_hit[34] & reg_we & !reg_error;
-  assign ie0_e_31_wd = reg_wdata[31];
+  assign ie0_0_e_12_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_12_wd = reg_wdata[12];
 
-  assign threshold0_we = addr_hit[35] & reg_we & !reg_error;
+  assign ie0_0_e_13_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_13_wd = reg_wdata[13];
+
+  assign ie0_0_e_14_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_14_wd = reg_wdata[14];
+
+  assign ie0_0_e_15_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_15_wd = reg_wdata[15];
+
+  assign ie0_0_e_16_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_16_wd = reg_wdata[16];
+
+  assign ie0_0_e_17_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_17_wd = reg_wdata[17];
+
+  assign ie0_0_e_18_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_18_wd = reg_wdata[18];
+
+  assign ie0_0_e_19_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_19_wd = reg_wdata[19];
+
+  assign ie0_0_e_20_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_20_wd = reg_wdata[20];
+
+  assign ie0_0_e_21_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_21_wd = reg_wdata[21];
+
+  assign ie0_0_e_22_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_22_wd = reg_wdata[22];
+
+  assign ie0_0_e_23_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_23_wd = reg_wdata[23];
+
+  assign ie0_0_e_24_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_24_wd = reg_wdata[24];
+
+  assign ie0_0_e_25_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_25_wd = reg_wdata[25];
+
+  assign ie0_0_e_26_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_26_wd = reg_wdata[26];
+
+  assign ie0_0_e_27_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_27_wd = reg_wdata[27];
+
+  assign ie0_0_e_28_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_28_wd = reg_wdata[28];
+
+  assign ie0_0_e_29_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_29_wd = reg_wdata[29];
+
+  assign ie0_0_e_30_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_30_wd = reg_wdata[30];
+
+  assign ie0_0_e_31_we = addr_hit[68] & reg_we & !reg_error;
+  assign ie0_0_e_31_wd = reg_wdata[31];
+
+  assign ie0_1_e_32_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_32_wd = reg_wdata[0];
+
+  assign ie0_1_e_33_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_33_wd = reg_wdata[1];
+
+  assign ie0_1_e_34_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_34_wd = reg_wdata[2];
+
+  assign ie0_1_e_35_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_35_wd = reg_wdata[3];
+
+  assign ie0_1_e_36_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_36_wd = reg_wdata[4];
+
+  assign ie0_1_e_37_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_37_wd = reg_wdata[5];
+
+  assign ie0_1_e_38_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_38_wd = reg_wdata[6];
+
+  assign ie0_1_e_39_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_39_wd = reg_wdata[7];
+
+  assign ie0_1_e_40_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_40_wd = reg_wdata[8];
+
+  assign ie0_1_e_41_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_41_wd = reg_wdata[9];
+
+  assign ie0_1_e_42_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_42_wd = reg_wdata[10];
+
+  assign ie0_1_e_43_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_43_wd = reg_wdata[11];
+
+  assign ie0_1_e_44_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_44_wd = reg_wdata[12];
+
+  assign ie0_1_e_45_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_45_wd = reg_wdata[13];
+
+  assign ie0_1_e_46_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_46_wd = reg_wdata[14];
+
+  assign ie0_1_e_47_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_47_wd = reg_wdata[15];
+
+  assign ie0_1_e_48_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_48_wd = reg_wdata[16];
+
+  assign ie0_1_e_49_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_49_wd = reg_wdata[17];
+
+  assign ie0_1_e_50_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_50_wd = reg_wdata[18];
+
+  assign ie0_1_e_51_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_51_wd = reg_wdata[19];
+
+  assign ie0_1_e_52_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_52_wd = reg_wdata[20];
+
+  assign ie0_1_e_53_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_53_wd = reg_wdata[21];
+
+  assign ie0_1_e_54_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_54_wd = reg_wdata[22];
+
+  assign ie0_1_e_55_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_55_wd = reg_wdata[23];
+
+  assign ie0_1_e_56_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_56_wd = reg_wdata[24];
+
+  assign ie0_1_e_57_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_57_wd = reg_wdata[25];
+
+  assign ie0_1_e_58_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_58_wd = reg_wdata[26];
+
+  assign ie0_1_e_59_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_59_wd = reg_wdata[27];
+
+  assign ie0_1_e_60_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_60_wd = reg_wdata[28];
+
+  assign ie0_1_e_61_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_61_wd = reg_wdata[29];
+
+  assign ie0_1_e_62_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_62_wd = reg_wdata[30];
+
+  assign ie0_1_e_63_we = addr_hit[69] & reg_we & !reg_error;
+  assign ie0_1_e_63_wd = reg_wdata[31];
+
+  assign threshold0_we = addr_hit[70] & reg_we & !reg_error;
   assign threshold0_wd = reg_wdata[2:0];
 
-  assign cc0_we = addr_hit[36] & reg_we & !reg_error;
+  assign cc0_we = addr_hit[71] & reg_we & !reg_error;
   assign cc0_wd = reg_wdata[5:0];
-  assign cc0_re = addr_hit[36] & reg_re & !reg_error;
+  assign cc0_re = addr_hit[71] & reg_re & !reg_error;
 
-  assign msip0_we = addr_hit[37] & reg_we & !reg_error;
+  assign msip0_we = addr_hit[72] & reg_we & !reg_error;
   assign msip0_wd = reg_wdata[0];
 
   // Read data return
@@ -4242,247 +8234,480 @@ module rv_plic_reg_top (
     reg_rdata_next = '0;
     unique case (1'b1)
       addr_hit[0]: begin
-        reg_rdata_next[0] = ip_p_0_qs;
-        reg_rdata_next[1] = ip_p_1_qs;
-        reg_rdata_next[2] = ip_p_2_qs;
-        reg_rdata_next[3] = ip_p_3_qs;
-        reg_rdata_next[4] = ip_p_4_qs;
-        reg_rdata_next[5] = ip_p_5_qs;
-        reg_rdata_next[6] = ip_p_6_qs;
-        reg_rdata_next[7] = ip_p_7_qs;
-        reg_rdata_next[8] = ip_p_8_qs;
-        reg_rdata_next[9] = ip_p_9_qs;
-        reg_rdata_next[10] = ip_p_10_qs;
-        reg_rdata_next[11] = ip_p_11_qs;
-        reg_rdata_next[12] = ip_p_12_qs;
-        reg_rdata_next[13] = ip_p_13_qs;
-        reg_rdata_next[14] = ip_p_14_qs;
-        reg_rdata_next[15] = ip_p_15_qs;
-        reg_rdata_next[16] = ip_p_16_qs;
-        reg_rdata_next[17] = ip_p_17_qs;
-        reg_rdata_next[18] = ip_p_18_qs;
-        reg_rdata_next[19] = ip_p_19_qs;
-        reg_rdata_next[20] = ip_p_20_qs;
-        reg_rdata_next[21] = ip_p_21_qs;
-        reg_rdata_next[22] = ip_p_22_qs;
-        reg_rdata_next[23] = ip_p_23_qs;
-        reg_rdata_next[24] = ip_p_24_qs;
-        reg_rdata_next[25] = ip_p_25_qs;
-        reg_rdata_next[26] = ip_p_26_qs;
-        reg_rdata_next[27] = ip_p_27_qs;
-        reg_rdata_next[28] = ip_p_28_qs;
-        reg_rdata_next[29] = ip_p_29_qs;
-        reg_rdata_next[30] = ip_p_30_qs;
-        reg_rdata_next[31] = ip_p_31_qs;
+        reg_rdata_next[0] = ip_0_p_0_qs;
+        reg_rdata_next[1] = ip_0_p_1_qs;
+        reg_rdata_next[2] = ip_0_p_2_qs;
+        reg_rdata_next[3] = ip_0_p_3_qs;
+        reg_rdata_next[4] = ip_0_p_4_qs;
+        reg_rdata_next[5] = ip_0_p_5_qs;
+        reg_rdata_next[6] = ip_0_p_6_qs;
+        reg_rdata_next[7] = ip_0_p_7_qs;
+        reg_rdata_next[8] = ip_0_p_8_qs;
+        reg_rdata_next[9] = ip_0_p_9_qs;
+        reg_rdata_next[10] = ip_0_p_10_qs;
+        reg_rdata_next[11] = ip_0_p_11_qs;
+        reg_rdata_next[12] = ip_0_p_12_qs;
+        reg_rdata_next[13] = ip_0_p_13_qs;
+        reg_rdata_next[14] = ip_0_p_14_qs;
+        reg_rdata_next[15] = ip_0_p_15_qs;
+        reg_rdata_next[16] = ip_0_p_16_qs;
+        reg_rdata_next[17] = ip_0_p_17_qs;
+        reg_rdata_next[18] = ip_0_p_18_qs;
+        reg_rdata_next[19] = ip_0_p_19_qs;
+        reg_rdata_next[20] = ip_0_p_20_qs;
+        reg_rdata_next[21] = ip_0_p_21_qs;
+        reg_rdata_next[22] = ip_0_p_22_qs;
+        reg_rdata_next[23] = ip_0_p_23_qs;
+        reg_rdata_next[24] = ip_0_p_24_qs;
+        reg_rdata_next[25] = ip_0_p_25_qs;
+        reg_rdata_next[26] = ip_0_p_26_qs;
+        reg_rdata_next[27] = ip_0_p_27_qs;
+        reg_rdata_next[28] = ip_0_p_28_qs;
+        reg_rdata_next[29] = ip_0_p_29_qs;
+        reg_rdata_next[30] = ip_0_p_30_qs;
+        reg_rdata_next[31] = ip_0_p_31_qs;
       end
 
       addr_hit[1]: begin
-        reg_rdata_next[0] = le_le_0_qs;
-        reg_rdata_next[1] = le_le_1_qs;
-        reg_rdata_next[2] = le_le_2_qs;
-        reg_rdata_next[3] = le_le_3_qs;
-        reg_rdata_next[4] = le_le_4_qs;
-        reg_rdata_next[5] = le_le_5_qs;
-        reg_rdata_next[6] = le_le_6_qs;
-        reg_rdata_next[7] = le_le_7_qs;
-        reg_rdata_next[8] = le_le_8_qs;
-        reg_rdata_next[9] = le_le_9_qs;
-        reg_rdata_next[10] = le_le_10_qs;
-        reg_rdata_next[11] = le_le_11_qs;
-        reg_rdata_next[12] = le_le_12_qs;
-        reg_rdata_next[13] = le_le_13_qs;
-        reg_rdata_next[14] = le_le_14_qs;
-        reg_rdata_next[15] = le_le_15_qs;
-        reg_rdata_next[16] = le_le_16_qs;
-        reg_rdata_next[17] = le_le_17_qs;
-        reg_rdata_next[18] = le_le_18_qs;
-        reg_rdata_next[19] = le_le_19_qs;
-        reg_rdata_next[20] = le_le_20_qs;
-        reg_rdata_next[21] = le_le_21_qs;
-        reg_rdata_next[22] = le_le_22_qs;
-        reg_rdata_next[23] = le_le_23_qs;
-        reg_rdata_next[24] = le_le_24_qs;
-        reg_rdata_next[25] = le_le_25_qs;
-        reg_rdata_next[26] = le_le_26_qs;
-        reg_rdata_next[27] = le_le_27_qs;
-        reg_rdata_next[28] = le_le_28_qs;
-        reg_rdata_next[29] = le_le_29_qs;
-        reg_rdata_next[30] = le_le_30_qs;
-        reg_rdata_next[31] = le_le_31_qs;
+        reg_rdata_next[0] = ip_1_p_32_qs;
+        reg_rdata_next[1] = ip_1_p_33_qs;
+        reg_rdata_next[2] = ip_1_p_34_qs;
+        reg_rdata_next[3] = ip_1_p_35_qs;
+        reg_rdata_next[4] = ip_1_p_36_qs;
+        reg_rdata_next[5] = ip_1_p_37_qs;
+        reg_rdata_next[6] = ip_1_p_38_qs;
+        reg_rdata_next[7] = ip_1_p_39_qs;
+        reg_rdata_next[8] = ip_1_p_40_qs;
+        reg_rdata_next[9] = ip_1_p_41_qs;
+        reg_rdata_next[10] = ip_1_p_42_qs;
+        reg_rdata_next[11] = ip_1_p_43_qs;
+        reg_rdata_next[12] = ip_1_p_44_qs;
+        reg_rdata_next[13] = ip_1_p_45_qs;
+        reg_rdata_next[14] = ip_1_p_46_qs;
+        reg_rdata_next[15] = ip_1_p_47_qs;
+        reg_rdata_next[16] = ip_1_p_48_qs;
+        reg_rdata_next[17] = ip_1_p_49_qs;
+        reg_rdata_next[18] = ip_1_p_50_qs;
+        reg_rdata_next[19] = ip_1_p_51_qs;
+        reg_rdata_next[20] = ip_1_p_52_qs;
+        reg_rdata_next[21] = ip_1_p_53_qs;
+        reg_rdata_next[22] = ip_1_p_54_qs;
+        reg_rdata_next[23] = ip_1_p_55_qs;
+        reg_rdata_next[24] = ip_1_p_56_qs;
+        reg_rdata_next[25] = ip_1_p_57_qs;
+        reg_rdata_next[26] = ip_1_p_58_qs;
+        reg_rdata_next[27] = ip_1_p_59_qs;
+        reg_rdata_next[28] = ip_1_p_60_qs;
+        reg_rdata_next[29] = ip_1_p_61_qs;
+        reg_rdata_next[30] = ip_1_p_62_qs;
+        reg_rdata_next[31] = ip_1_p_63_qs;
       end
 
       addr_hit[2]: begin
-        reg_rdata_next[2:0] = prio0_qs;
+        reg_rdata_next[0] = le_0_le_0_qs;
+        reg_rdata_next[1] = le_0_le_1_qs;
+        reg_rdata_next[2] = le_0_le_2_qs;
+        reg_rdata_next[3] = le_0_le_3_qs;
+        reg_rdata_next[4] = le_0_le_4_qs;
+        reg_rdata_next[5] = le_0_le_5_qs;
+        reg_rdata_next[6] = le_0_le_6_qs;
+        reg_rdata_next[7] = le_0_le_7_qs;
+        reg_rdata_next[8] = le_0_le_8_qs;
+        reg_rdata_next[9] = le_0_le_9_qs;
+        reg_rdata_next[10] = le_0_le_10_qs;
+        reg_rdata_next[11] = le_0_le_11_qs;
+        reg_rdata_next[12] = le_0_le_12_qs;
+        reg_rdata_next[13] = le_0_le_13_qs;
+        reg_rdata_next[14] = le_0_le_14_qs;
+        reg_rdata_next[15] = le_0_le_15_qs;
+        reg_rdata_next[16] = le_0_le_16_qs;
+        reg_rdata_next[17] = le_0_le_17_qs;
+        reg_rdata_next[18] = le_0_le_18_qs;
+        reg_rdata_next[19] = le_0_le_19_qs;
+        reg_rdata_next[20] = le_0_le_20_qs;
+        reg_rdata_next[21] = le_0_le_21_qs;
+        reg_rdata_next[22] = le_0_le_22_qs;
+        reg_rdata_next[23] = le_0_le_23_qs;
+        reg_rdata_next[24] = le_0_le_24_qs;
+        reg_rdata_next[25] = le_0_le_25_qs;
+        reg_rdata_next[26] = le_0_le_26_qs;
+        reg_rdata_next[27] = le_0_le_27_qs;
+        reg_rdata_next[28] = le_0_le_28_qs;
+        reg_rdata_next[29] = le_0_le_29_qs;
+        reg_rdata_next[30] = le_0_le_30_qs;
+        reg_rdata_next[31] = le_0_le_31_qs;
       end
 
       addr_hit[3]: begin
-        reg_rdata_next[2:0] = prio1_qs;
+        reg_rdata_next[0] = le_1_le_32_qs;
+        reg_rdata_next[1] = le_1_le_33_qs;
+        reg_rdata_next[2] = le_1_le_34_qs;
+        reg_rdata_next[3] = le_1_le_35_qs;
+        reg_rdata_next[4] = le_1_le_36_qs;
+        reg_rdata_next[5] = le_1_le_37_qs;
+        reg_rdata_next[6] = le_1_le_38_qs;
+        reg_rdata_next[7] = le_1_le_39_qs;
+        reg_rdata_next[8] = le_1_le_40_qs;
+        reg_rdata_next[9] = le_1_le_41_qs;
+        reg_rdata_next[10] = le_1_le_42_qs;
+        reg_rdata_next[11] = le_1_le_43_qs;
+        reg_rdata_next[12] = le_1_le_44_qs;
+        reg_rdata_next[13] = le_1_le_45_qs;
+        reg_rdata_next[14] = le_1_le_46_qs;
+        reg_rdata_next[15] = le_1_le_47_qs;
+        reg_rdata_next[16] = le_1_le_48_qs;
+        reg_rdata_next[17] = le_1_le_49_qs;
+        reg_rdata_next[18] = le_1_le_50_qs;
+        reg_rdata_next[19] = le_1_le_51_qs;
+        reg_rdata_next[20] = le_1_le_52_qs;
+        reg_rdata_next[21] = le_1_le_53_qs;
+        reg_rdata_next[22] = le_1_le_54_qs;
+        reg_rdata_next[23] = le_1_le_55_qs;
+        reg_rdata_next[24] = le_1_le_56_qs;
+        reg_rdata_next[25] = le_1_le_57_qs;
+        reg_rdata_next[26] = le_1_le_58_qs;
+        reg_rdata_next[27] = le_1_le_59_qs;
+        reg_rdata_next[28] = le_1_le_60_qs;
+        reg_rdata_next[29] = le_1_le_61_qs;
+        reg_rdata_next[30] = le_1_le_62_qs;
+        reg_rdata_next[31] = le_1_le_63_qs;
       end
 
       addr_hit[4]: begin
-        reg_rdata_next[2:0] = prio2_qs;
+        reg_rdata_next[2:0] = prio0_qs;
       end
 
       addr_hit[5]: begin
-        reg_rdata_next[2:0] = prio3_qs;
+        reg_rdata_next[2:0] = prio1_qs;
       end
 
       addr_hit[6]: begin
-        reg_rdata_next[2:0] = prio4_qs;
+        reg_rdata_next[2:0] = prio2_qs;
       end
 
       addr_hit[7]: begin
-        reg_rdata_next[2:0] = prio5_qs;
+        reg_rdata_next[2:0] = prio3_qs;
       end
 
       addr_hit[8]: begin
-        reg_rdata_next[2:0] = prio6_qs;
+        reg_rdata_next[2:0] = prio4_qs;
       end
 
       addr_hit[9]: begin
-        reg_rdata_next[2:0] = prio7_qs;
+        reg_rdata_next[2:0] = prio5_qs;
       end
 
       addr_hit[10]: begin
-        reg_rdata_next[2:0] = prio8_qs;
+        reg_rdata_next[2:0] = prio6_qs;
       end
 
       addr_hit[11]: begin
-        reg_rdata_next[2:0] = prio9_qs;
+        reg_rdata_next[2:0] = prio7_qs;
       end
 
       addr_hit[12]: begin
-        reg_rdata_next[2:0] = prio10_qs;
+        reg_rdata_next[2:0] = prio8_qs;
       end
 
       addr_hit[13]: begin
-        reg_rdata_next[2:0] = prio11_qs;
+        reg_rdata_next[2:0] = prio9_qs;
       end
 
       addr_hit[14]: begin
-        reg_rdata_next[2:0] = prio12_qs;
+        reg_rdata_next[2:0] = prio10_qs;
       end
 
       addr_hit[15]: begin
-        reg_rdata_next[2:0] = prio13_qs;
+        reg_rdata_next[2:0] = prio11_qs;
       end
 
       addr_hit[16]: begin
-        reg_rdata_next[2:0] = prio14_qs;
+        reg_rdata_next[2:0] = prio12_qs;
       end
 
       addr_hit[17]: begin
-        reg_rdata_next[2:0] = prio15_qs;
+        reg_rdata_next[2:0] = prio13_qs;
       end
 
       addr_hit[18]: begin
-        reg_rdata_next[2:0] = prio16_qs;
+        reg_rdata_next[2:0] = prio14_qs;
       end
 
       addr_hit[19]: begin
-        reg_rdata_next[2:0] = prio17_qs;
+        reg_rdata_next[2:0] = prio15_qs;
       end
 
       addr_hit[20]: begin
-        reg_rdata_next[2:0] = prio18_qs;
+        reg_rdata_next[2:0] = prio16_qs;
       end
 
       addr_hit[21]: begin
-        reg_rdata_next[2:0] = prio19_qs;
+        reg_rdata_next[2:0] = prio17_qs;
       end
 
       addr_hit[22]: begin
-        reg_rdata_next[2:0] = prio20_qs;
+        reg_rdata_next[2:0] = prio18_qs;
       end
 
       addr_hit[23]: begin
-        reg_rdata_next[2:0] = prio21_qs;
+        reg_rdata_next[2:0] = prio19_qs;
       end
 
       addr_hit[24]: begin
-        reg_rdata_next[2:0] = prio22_qs;
+        reg_rdata_next[2:0] = prio20_qs;
       end
 
       addr_hit[25]: begin
-        reg_rdata_next[2:0] = prio23_qs;
+        reg_rdata_next[2:0] = prio21_qs;
       end
 
       addr_hit[26]: begin
-        reg_rdata_next[2:0] = prio24_qs;
+        reg_rdata_next[2:0] = prio22_qs;
       end
 
       addr_hit[27]: begin
-        reg_rdata_next[2:0] = prio25_qs;
+        reg_rdata_next[2:0] = prio23_qs;
       end
 
       addr_hit[28]: begin
-        reg_rdata_next[2:0] = prio26_qs;
+        reg_rdata_next[2:0] = prio24_qs;
       end
 
       addr_hit[29]: begin
-        reg_rdata_next[2:0] = prio27_qs;
+        reg_rdata_next[2:0] = prio25_qs;
       end
 
       addr_hit[30]: begin
-        reg_rdata_next[2:0] = prio28_qs;
+        reg_rdata_next[2:0] = prio26_qs;
       end
 
       addr_hit[31]: begin
-        reg_rdata_next[2:0] = prio29_qs;
+        reg_rdata_next[2:0] = prio27_qs;
       end
 
       addr_hit[32]: begin
-        reg_rdata_next[2:0] = prio30_qs;
+        reg_rdata_next[2:0] = prio28_qs;
       end
 
       addr_hit[33]: begin
-        reg_rdata_next[2:0] = prio31_qs;
+        reg_rdata_next[2:0] = prio29_qs;
       end
 
       addr_hit[34]: begin
-        reg_rdata_next[0] = ie0_e_0_qs;
-        reg_rdata_next[1] = ie0_e_1_qs;
-        reg_rdata_next[2] = ie0_e_2_qs;
-        reg_rdata_next[3] = ie0_e_3_qs;
-        reg_rdata_next[4] = ie0_e_4_qs;
-        reg_rdata_next[5] = ie0_e_5_qs;
-        reg_rdata_next[6] = ie0_e_6_qs;
-        reg_rdata_next[7] = ie0_e_7_qs;
-        reg_rdata_next[8] = ie0_e_8_qs;
-        reg_rdata_next[9] = ie0_e_9_qs;
-        reg_rdata_next[10] = ie0_e_10_qs;
-        reg_rdata_next[11] = ie0_e_11_qs;
-        reg_rdata_next[12] = ie0_e_12_qs;
-        reg_rdata_next[13] = ie0_e_13_qs;
-        reg_rdata_next[14] = ie0_e_14_qs;
-        reg_rdata_next[15] = ie0_e_15_qs;
-        reg_rdata_next[16] = ie0_e_16_qs;
-        reg_rdata_next[17] = ie0_e_17_qs;
-        reg_rdata_next[18] = ie0_e_18_qs;
-        reg_rdata_next[19] = ie0_e_19_qs;
-        reg_rdata_next[20] = ie0_e_20_qs;
-        reg_rdata_next[21] = ie0_e_21_qs;
-        reg_rdata_next[22] = ie0_e_22_qs;
-        reg_rdata_next[23] = ie0_e_23_qs;
-        reg_rdata_next[24] = ie0_e_24_qs;
-        reg_rdata_next[25] = ie0_e_25_qs;
-        reg_rdata_next[26] = ie0_e_26_qs;
-        reg_rdata_next[27] = ie0_e_27_qs;
-        reg_rdata_next[28] = ie0_e_28_qs;
-        reg_rdata_next[29] = ie0_e_29_qs;
-        reg_rdata_next[30] = ie0_e_30_qs;
-        reg_rdata_next[31] = ie0_e_31_qs;
+        reg_rdata_next[2:0] = prio30_qs;
       end
 
       addr_hit[35]: begin
-        reg_rdata_next[2:0] = threshold0_qs;
+        reg_rdata_next[2:0] = prio31_qs;
       end
 
       addr_hit[36]: begin
-        reg_rdata_next[5:0] = cc0_qs;
+        reg_rdata_next[2:0] = prio32_qs;
       end
 
       addr_hit[37]: begin
+        reg_rdata_next[2:0] = prio33_qs;
+      end
+
+      addr_hit[38]: begin
+        reg_rdata_next[2:0] = prio34_qs;
+      end
+
+      addr_hit[39]: begin
+        reg_rdata_next[2:0] = prio35_qs;
+      end
+
+      addr_hit[40]: begin
+        reg_rdata_next[2:0] = prio36_qs;
+      end
+
+      addr_hit[41]: begin
+        reg_rdata_next[2:0] = prio37_qs;
+      end
+
+      addr_hit[42]: begin
+        reg_rdata_next[2:0] = prio38_qs;
+      end
+
+      addr_hit[43]: begin
+        reg_rdata_next[2:0] = prio39_qs;
+      end
+
+      addr_hit[44]: begin
+        reg_rdata_next[2:0] = prio40_qs;
+      end
+
+      addr_hit[45]: begin
+        reg_rdata_next[2:0] = prio41_qs;
+      end
+
+      addr_hit[46]: begin
+        reg_rdata_next[2:0] = prio42_qs;
+      end
+
+      addr_hit[47]: begin
+        reg_rdata_next[2:0] = prio43_qs;
+      end
+
+      addr_hit[48]: begin
+        reg_rdata_next[2:0] = prio44_qs;
+      end
+
+      addr_hit[49]: begin
+        reg_rdata_next[2:0] = prio45_qs;
+      end
+
+      addr_hit[50]: begin
+        reg_rdata_next[2:0] = prio46_qs;
+      end
+
+      addr_hit[51]: begin
+        reg_rdata_next[2:0] = prio47_qs;
+      end
+
+      addr_hit[52]: begin
+        reg_rdata_next[2:0] = prio48_qs;
+      end
+
+      addr_hit[53]: begin
+        reg_rdata_next[2:0] = prio49_qs;
+      end
+
+      addr_hit[54]: begin
+        reg_rdata_next[2:0] = prio50_qs;
+      end
+
+      addr_hit[55]: begin
+        reg_rdata_next[2:0] = prio51_qs;
+      end
+
+      addr_hit[56]: begin
+        reg_rdata_next[2:0] = prio52_qs;
+      end
+
+      addr_hit[57]: begin
+        reg_rdata_next[2:0] = prio53_qs;
+      end
+
+      addr_hit[58]: begin
+        reg_rdata_next[2:0] = prio54_qs;
+      end
+
+      addr_hit[59]: begin
+        reg_rdata_next[2:0] = prio55_qs;
+      end
+
+      addr_hit[60]: begin
+        reg_rdata_next[2:0] = prio56_qs;
+      end
+
+      addr_hit[61]: begin
+        reg_rdata_next[2:0] = prio57_qs;
+      end
+
+      addr_hit[62]: begin
+        reg_rdata_next[2:0] = prio58_qs;
+      end
+
+      addr_hit[63]: begin
+        reg_rdata_next[2:0] = prio59_qs;
+      end
+
+      addr_hit[64]: begin
+        reg_rdata_next[2:0] = prio60_qs;
+      end
+
+      addr_hit[65]: begin
+        reg_rdata_next[2:0] = prio61_qs;
+      end
+
+      addr_hit[66]: begin
+        reg_rdata_next[2:0] = prio62_qs;
+      end
+
+      addr_hit[67]: begin
+        reg_rdata_next[2:0] = prio63_qs;
+      end
+
+      addr_hit[68]: begin
+        reg_rdata_next[0] = ie0_0_e_0_qs;
+        reg_rdata_next[1] = ie0_0_e_1_qs;
+        reg_rdata_next[2] = ie0_0_e_2_qs;
+        reg_rdata_next[3] = ie0_0_e_3_qs;
+        reg_rdata_next[4] = ie0_0_e_4_qs;
+        reg_rdata_next[5] = ie0_0_e_5_qs;
+        reg_rdata_next[6] = ie0_0_e_6_qs;
+        reg_rdata_next[7] = ie0_0_e_7_qs;
+        reg_rdata_next[8] = ie0_0_e_8_qs;
+        reg_rdata_next[9] = ie0_0_e_9_qs;
+        reg_rdata_next[10] = ie0_0_e_10_qs;
+        reg_rdata_next[11] = ie0_0_e_11_qs;
+        reg_rdata_next[12] = ie0_0_e_12_qs;
+        reg_rdata_next[13] = ie0_0_e_13_qs;
+        reg_rdata_next[14] = ie0_0_e_14_qs;
+        reg_rdata_next[15] = ie0_0_e_15_qs;
+        reg_rdata_next[16] = ie0_0_e_16_qs;
+        reg_rdata_next[17] = ie0_0_e_17_qs;
+        reg_rdata_next[18] = ie0_0_e_18_qs;
+        reg_rdata_next[19] = ie0_0_e_19_qs;
+        reg_rdata_next[20] = ie0_0_e_20_qs;
+        reg_rdata_next[21] = ie0_0_e_21_qs;
+        reg_rdata_next[22] = ie0_0_e_22_qs;
+        reg_rdata_next[23] = ie0_0_e_23_qs;
+        reg_rdata_next[24] = ie0_0_e_24_qs;
+        reg_rdata_next[25] = ie0_0_e_25_qs;
+        reg_rdata_next[26] = ie0_0_e_26_qs;
+        reg_rdata_next[27] = ie0_0_e_27_qs;
+        reg_rdata_next[28] = ie0_0_e_28_qs;
+        reg_rdata_next[29] = ie0_0_e_29_qs;
+        reg_rdata_next[30] = ie0_0_e_30_qs;
+        reg_rdata_next[31] = ie0_0_e_31_qs;
+      end
+
+      addr_hit[69]: begin
+        reg_rdata_next[0] = ie0_1_e_32_qs;
+        reg_rdata_next[1] = ie0_1_e_33_qs;
+        reg_rdata_next[2] = ie0_1_e_34_qs;
+        reg_rdata_next[3] = ie0_1_e_35_qs;
+        reg_rdata_next[4] = ie0_1_e_36_qs;
+        reg_rdata_next[5] = ie0_1_e_37_qs;
+        reg_rdata_next[6] = ie0_1_e_38_qs;
+        reg_rdata_next[7] = ie0_1_e_39_qs;
+        reg_rdata_next[8] = ie0_1_e_40_qs;
+        reg_rdata_next[9] = ie0_1_e_41_qs;
+        reg_rdata_next[10] = ie0_1_e_42_qs;
+        reg_rdata_next[11] = ie0_1_e_43_qs;
+        reg_rdata_next[12] = ie0_1_e_44_qs;
+        reg_rdata_next[13] = ie0_1_e_45_qs;
+        reg_rdata_next[14] = ie0_1_e_46_qs;
+        reg_rdata_next[15] = ie0_1_e_47_qs;
+        reg_rdata_next[16] = ie0_1_e_48_qs;
+        reg_rdata_next[17] = ie0_1_e_49_qs;
+        reg_rdata_next[18] = ie0_1_e_50_qs;
+        reg_rdata_next[19] = ie0_1_e_51_qs;
+        reg_rdata_next[20] = ie0_1_e_52_qs;
+        reg_rdata_next[21] = ie0_1_e_53_qs;
+        reg_rdata_next[22] = ie0_1_e_54_qs;
+        reg_rdata_next[23] = ie0_1_e_55_qs;
+        reg_rdata_next[24] = ie0_1_e_56_qs;
+        reg_rdata_next[25] = ie0_1_e_57_qs;
+        reg_rdata_next[26] = ie0_1_e_58_qs;
+        reg_rdata_next[27] = ie0_1_e_59_qs;
+        reg_rdata_next[28] = ie0_1_e_60_qs;
+        reg_rdata_next[29] = ie0_1_e_61_qs;
+        reg_rdata_next[30] = ie0_1_e_62_qs;
+        reg_rdata_next[31] = ie0_1_e_63_qs;
+      end
+
+      addr_hit[70]: begin
+        reg_rdata_next[2:0] = threshold0_qs;
+      end
+
+      addr_hit[71]: begin
+        reg_rdata_next[5:0] = cc0_qs;
+      end
+
+      addr_hit[72]: begin
         reg_rdata_next[0] = msip0_qs;
       end
 
@@ -4507,10 +8732,9 @@ module rv_plic_reg_top (
 
   `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)
 
-  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
-
   // this is formulated as an assumption such that the FPV testbenches do disprove this
   // property by mistake
   //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)
+  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
 
 endmodule
