diff --git a/picosoc/spimemio.v b/picosoc/spimemio.v
index b4ee446..ae200e0 100644
--- a/picosoc/spimemio.v
+++ b/picosoc/spimemio.v
@@ -19,7 +19,7 @@
 
 module spimemio (
 	input clk, resetn,
-
+	input start_spi_i,
 	input valid,
 	output ready,
 	input [23:0] addr,
@@ -96,8 +96,7 @@ module spimemio (
 	assign cfgreg_do[4] = flash_clk;
 	assign cfgreg_do[3:0] = {flash_io3_di, flash_io2_di, flash_io1_di, flash_io0_di};
 
-	always @(posedge clk) begin
-		softreset <= !config_en || cfgreg_we;
+	always @(posedge clk or negedge resetn) begin
 		if (!resetn) begin
 			softreset <= 1;
 			config_en <= 1;
@@ -110,6 +109,7 @@ module spimemio (
 			config_cont <= 0;
 			config_dummy <= 8;
 		end else begin
+			softreset <= !config_en || cfgreg_we;
 			if (cfgreg_we[0]) begin
 				config_csb <= cfgreg_di[5];
 				config_clk <= cfgreg_di[4];
@@ -204,11 +204,10 @@ module spimemio (
 
 	reg [3:0] state;
 
-	always @(posedge clk) begin
-		xfer_resetn <= 1;
-		din_valid <= 0;
-
-		if (!resetn || softreset) begin
+	always @(posedge clk or negedge resetn) begin
+		if (!resetn) begin
+			xfer_resetn <= 1;
+			din_valid <= 0;
 			state <= 0;
 			xfer_resetn <= 0;
 			rd_valid <= 0;
@@ -218,158 +217,174 @@ module spimemio (
 			din_ddr <= 0;
 			din_rd <= 0;
 		end else begin
-			if (dout_valid && dout_tag == 1) buffer[ 7: 0] <= dout_data;
-			if (dout_valid && dout_tag == 2) buffer[15: 8] <= dout_data;
-			if (dout_valid && dout_tag == 3) buffer[23:16] <= dout_data;
-			if (dout_valid && dout_tag == 4) begin
-				rdata <= {dout_data, buffer};
-				rd_addr <= rd_inc ? rd_addr + 4 : addr;
-				rd_valid <= 1;
-				rd_wait <= rd_inc;
-				rd_inc <= 1;
-			end
 
-			if (valid)
-				rd_wait <= 0;
-
-			case (state)
-				0: begin
-					din_valid <= 1;
-					din_data <= 8'h ff;
-					din_tag <= 0;
-					if (din_ready) begin
-						din_valid <= 0;
-						state <= 1;
-					end
+			if (softreset) begin
+				xfer_resetn <= 1;
+				din_valid <= 0;
+				state <= 0;
+				xfer_resetn <= 0;
+				rd_valid <= 0;
+				din_tag <= 0;
+				din_cont <= 0;
+				din_qspi <= 0;
+				din_ddr <= 0;
+				din_rd <= 0;
+			end else begin
+				xfer_resetn <= 1;
+				din_valid <= 0;
+				if (dout_valid && dout_tag == 1) buffer[ 7: 0] <= dout_data;
+				if (dout_valid && dout_tag == 2) buffer[15: 8] <= dout_data;
+				if (dout_valid && dout_tag == 3) buffer[23:16] <= dout_data;
+				if (dout_valid && dout_tag == 4) begin
+					rdata <= {dout_data, buffer};
+					rd_addr <= rd_inc ? rd_addr + 4 : addr;
+					rd_valid <= 1;
+					rd_wait <= rd_inc;
+					rd_inc <= 1;
 				end
-				1: begin
-					if (dout_valid) begin
-						xfer_resetn <= 0;
-						state <= 2;
+
+				if (valid)
+					rd_wait <= 0;
+
+				case (state)
+					0: begin
+						din_valid <= start_spi_i;
+						din_data <= 8'h ff;
+						din_tag <= 0;
+						if (din_ready) begin
+							din_valid <= 0;
+							state <= 1;
+						end
 					end
-				end
-				2: begin
-					din_valid <= 1;
-					din_data <= 8'h ab;
-					din_tag <= 0;
-					if (din_ready) begin
-						din_valid <= 0;
-						state <= 3;
+					1: begin
+						if (dout_valid) begin
+							xfer_resetn <= 0;
+							state <= 2;
+						end
 					end
-				end
-				3: begin
-					if (dout_valid) begin
-						xfer_resetn <= 0;
-						state <= 4;
+					2: begin
+						din_valid <= 1;
+						din_data <= 8'h ab;
+						din_tag <= 0;
+						if (din_ready) begin
+							din_valid <= 0;
+							state <= 3;
+						end
 					end
-				end
-				4: begin
-					rd_inc <= 0;
-					din_valid <= 1;
-					din_tag <= 0;
-					case ({config_ddr, config_qspi})
-						2'b11: din_data <= 8'h ED;
-						2'b01: din_data <= 8'h EB;
-						2'b10: din_data <= 8'h BB;
-						2'b00: din_data <= 8'h 03;
-					endcase
-					if (din_ready) begin
-						din_valid <= 0;
-						state <= 5;
+					3: begin
+						if (dout_valid) begin
+							xfer_resetn <= 0;
+							state <= 4;
+						end
 					end
-				end
-				5: begin
-					if (valid && !ready) begin
+					4: begin
+						rd_inc <= 0;
 						din_valid <= 1;
 						din_tag <= 0;
-						din_data <= addr[23:16];
-						din_qspi <= config_qspi;
-						din_ddr <= config_ddr;
+						case ({config_ddr, config_qspi})
+							2'b11: din_data <= 8'h ED;
+							2'b01: din_data <= 8'h EB;
+							2'b10: din_data <= 8'h BB;
+							2'b00: din_data <= 8'h 03;
+						endcase
 						if (din_ready) begin
 							din_valid <= 0;
-							state <= 6;
+							state <= 5;
 						end
 					end
-				end
-				6: begin
-					din_valid <= 1;
-					din_tag <= 0;
-					din_data <= addr[15:8];
-					if (din_ready) begin
-						din_valid <= 0;
-						state <= 7;
+					5: begin
+						if (valid && !ready) begin
+							din_valid <= 1;
+							din_tag <= 0;
+							din_data <= addr[23:16];
+							din_qspi <= config_qspi;
+							din_ddr <= config_ddr;
+							if (din_ready) begin
+								din_valid <= 0;
+								state <= 6;
+							end
+						end
 					end
-				end
-				7: begin
-					din_valid <= 1;
-					din_tag <= 0;
-					din_data <= addr[7:0];
-					if (din_ready) begin
-						din_valid <= 0;
-						din_data <= 0;
-						state <= config_qspi || config_ddr ? 8 : 9;
+					6: begin
+						din_valid <= 1;
+						din_tag <= 0;
+						din_data <= addr[15:8];
+						if (din_ready) begin
+							din_valid <= 0;
+							state <= 7;
+						end
 					end
-				end
-				8: begin
-					din_valid <= 1;
-					din_tag <= 0;
-					din_data <= config_cont ? 8'h A5 : 8'h FF;
-					if (din_ready) begin
-						din_rd <= 1;
-						din_data <= config_dummy;
-						din_valid <= 0;
-						state <= 9;
+					7: begin
+						din_valid <= 1;
+						din_tag <= 0;
+						din_data <= addr[7:0];
+						if (din_ready) begin
+							din_valid <= 0;
+							din_data <= 0;
+							state <= config_qspi || config_ddr ? 8 : 9;
+						end
 					end
-				end
-				9: begin
-					din_valid <= 1;
-					din_tag <= 1;
-					if (din_ready) begin
-						din_valid <= 0;
-						state <= 10;
+					8: begin
+						din_valid <= 1;
+						din_tag <= 0;
+						din_data <= config_cont ? 8'h A5 : 8'h FF;
+						if (din_ready) begin
+							din_rd <= 1;
+							din_data <= config_dummy;
+							din_valid <= 0;
+							state <= 9;
+						end
 					end
-				end
-				10: begin
-					din_valid <= 1;
-					din_data <= 8'h 00;
-					din_tag <= 2;
-					if (din_ready) begin
-						din_valid <= 0;
-						state <= 11;
+					9: begin
+						din_valid <= 1;
+						din_tag <= 1;
+						if (din_ready) begin
+							din_valid <= 0;
+							state <= 10;
+						end
 					end
-				end
-				11: begin
-					din_valid <= 1;
-					din_tag <= 3;
-					if (din_ready) begin
-						din_valid <= 0;
-						state <= 12;
+					10: begin
+						din_valid <= 1;
+						din_data <= 8'h 00;
+						din_tag <= 2;
+						if (din_ready) begin
+							din_valid <= 0;
+							state <= 11;
+						end
 					end
-				end
-				12: begin
-					if (!rd_wait || valid) begin
+					11: begin
 						din_valid <= 1;
-						din_tag <= 4;
+						din_tag <= 3;
 						if (din_ready) begin
 							din_valid <= 0;
-							state <= 9;
+							state <= 12;
 						end
 					end
-				end
-			endcase
+					12: begin
+						if (!rd_wait || valid) begin
+							din_valid <= 1;
+							din_tag <= 4;
+							if (din_ready) begin
+								din_valid <= 0;
+								state <= 9;
+							end
+						end
+					end
+				endcase
 
-			if (jump) begin
-				rd_inc <= 0;
-				rd_valid <= 0;
-				xfer_resetn <= 0;
-				if (config_cont) begin
-					state <= 5;
-				end else begin
-					state <= 4;
-					din_qspi <= 0;
-					din_ddr <= 0;
+				if (jump) begin
+					rd_inc <= 0;
+					rd_valid <= 0;
+					xfer_resetn <= 0;
+					if (config_cont) begin
+						state <= 5;
+					end else begin
+						state <= 4;
+						din_qspi <= 0;
+						din_ddr <= 0;
+					end
+					din_rd <= 0;
 				end
-				din_rd <= 0;
 			end
 		end
 	end
@@ -532,7 +547,7 @@ module spimemio_xfer (
 		end
 	end
 
-	always @(posedge clk) begin
+	always @(posedge clk or negedge resetn) begin
 		if (!resetn) begin
 			fetch <= 1;
 			last_fetch <= 1;
