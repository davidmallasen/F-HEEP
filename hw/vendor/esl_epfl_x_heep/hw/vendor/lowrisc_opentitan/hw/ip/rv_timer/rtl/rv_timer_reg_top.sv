// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module rv_timer_reg_top (
  input clk_i,
  input rst_ni,

  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output rv_timer_reg_pkg::rv_timer_reg2hw_t reg2hw, // Write
  input  rv_timer_reg_pkg::rv_timer_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import rv_timer_reg_pkg::* ;

  localparam int AW = 10;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign intg_err_o = '0;

  assign tl_reg_h2d = tl_i;
  assign tl_o = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ctrl_active_0_qs;
  logic ctrl_active_0_wd;
  logic ctrl_active_0_we;
  logic ctrl_active_1_qs;
  logic ctrl_active_1_wd;
  logic ctrl_active_1_we;
  logic [11:0] cfg0_prescale_qs;
  logic [11:0] cfg0_prescale_wd;
  logic cfg0_prescale_we;
  logic [7:0] cfg0_step_qs;
  logic [7:0] cfg0_step_wd;
  logic cfg0_step_we;
  logic [31:0] timer_v_lower0_qs;
  logic [31:0] timer_v_lower0_wd;
  logic timer_v_lower0_we;
  logic [31:0] timer_v_upper0_qs;
  logic [31:0] timer_v_upper0_wd;
  logic timer_v_upper0_we;
  logic [31:0] compare_lower0_0_qs;
  logic [31:0] compare_lower0_0_wd;
  logic compare_lower0_0_we;
  logic [31:0] compare_upper0_0_qs;
  logic [31:0] compare_upper0_0_wd;
  logic compare_upper0_0_we;
  logic intr_enable0_qs;
  logic intr_enable0_wd;
  logic intr_enable0_we;
  logic intr_state0_qs;
  logic intr_state0_wd;
  logic intr_state0_we;
  logic intr_test0_wd;
  logic intr_test0_we;
  logic [11:0] cfg1_prescale_qs;
  logic [11:0] cfg1_prescale_wd;
  logic cfg1_prescale_we;
  logic [7:0] cfg1_step_qs;
  logic [7:0] cfg1_step_wd;
  logic cfg1_step_we;
  logic [31:0] timer_v_lower1_qs;
  logic [31:0] timer_v_lower1_wd;
  logic timer_v_lower1_we;
  logic [31:0] timer_v_upper1_qs;
  logic [31:0] timer_v_upper1_wd;
  logic timer_v_upper1_we;
  logic [31:0] compare_lower1_0_qs;
  logic [31:0] compare_lower1_0_wd;
  logic compare_lower1_0_we;
  logic [31:0] compare_upper1_0_qs;
  logic [31:0] compare_upper1_0_wd;
  logic compare_upper1_0_we;
  logic intr_enable1_qs;
  logic intr_enable1_wd;
  logic intr_enable1_we;
  logic intr_state1_qs;
  logic intr_state1_wd;
  logic intr_state1_we;
  logic intr_test1_wd;
  logic intr_test1_we;

  // Register instances

  // Subregister 0 of Multireg ctrl
  // R[ctrl]: V(False)

  // F[active_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_active_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_active_0_we),
    .wd     (ctrl_active_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl[0].q ),

    // to register interface (read)
    .qs     (ctrl_active_0_qs)
  );


  // F[active_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_active_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_active_1_we),
    .wd     (ctrl_active_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl[1].q ),

    // to register interface (read)
    .qs     (ctrl_active_1_qs)
  );



  // R[cfg0]: V(False)

  //   F[prescale]: 11:0
  prim_subreg #(
    .DW      (12),
    .SWACCESS("RW"),
    .RESVAL  (12'h0)
  ) u_cfg0_prescale (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg0_prescale_we),
    .wd     (cfg0_prescale_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg0.prescale.q ),

    // to register interface (read)
    .qs     (cfg0_prescale_qs)
  );


  //   F[step]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h1)
  ) u_cfg0_step (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg0_step_we),
    .wd     (cfg0_step_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg0.step.q ),

    // to register interface (read)
    .qs     (cfg0_step_qs)
  );


  // R[timer_v_lower0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_timer_v_lower0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (timer_v_lower0_we),
    .wd     (timer_v_lower0_wd),

    // from internal hardware
    .de     (hw2reg.timer_v_lower0.de),
    .d      (hw2reg.timer_v_lower0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.timer_v_lower0.q ),

    // to register interface (read)
    .qs     (timer_v_lower0_qs)
  );


  // R[timer_v_upper0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_timer_v_upper0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (timer_v_upper0_we),
    .wd     (timer_v_upper0_wd),

    // from internal hardware
    .de     (hw2reg.timer_v_upper0.de),
    .d      (hw2reg.timer_v_upper0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.timer_v_upper0.q ),

    // to register interface (read)
    .qs     (timer_v_upper0_qs)
  );


  // R[compare_lower0_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'hffffffff)
  ) u_compare_lower0_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (compare_lower0_0_we),
    .wd     (compare_lower0_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.compare_lower0_0.qe),
    .q      (reg2hw.compare_lower0_0.q ),

    // to register interface (read)
    .qs     (compare_lower0_0_qs)
  );


  // R[compare_upper0_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'hffffffff)
  ) u_compare_upper0_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (compare_upper0_0_we),
    .wd     (compare_upper0_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.compare_upper0_0.qe),
    .q      (reg2hw.compare_upper0_0.q ),

    // to register interface (read)
    .qs     (compare_upper0_0_qs)
  );



  // Subregister 0 of Multireg intr_enable0
  // R[intr_enable0]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable0_we),
    .wd     (intr_enable0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable0[0].q ),

    // to register interface (read)
    .qs     (intr_enable0_qs)
  );



  // Subregister 0 of Multireg intr_state0
  // R[intr_state0]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state0_we),
    .wd     (intr_state0_wd),

    // from internal hardware
    .de     (hw2reg.intr_state0[0].de),
    .d      (hw2reg.intr_state0[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state0[0].q ),

    // to register interface (read)
    .qs     (intr_state0_qs)
  );



  // Subregister 0 of Multireg intr_test0
  // R[intr_test0]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test0 (
    .re     (1'b0),
    .we     (intr_test0_we),
    .wd     (intr_test0_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test0[0].qe),
    .q      (reg2hw.intr_test0[0].q ),
    .qs     ()
  );


  // R[cfg1]: V(False)

  //   F[prescale]: 11:0
  prim_subreg #(
    .DW      (12),
    .SWACCESS("RW"),
    .RESVAL  (12'h0)
  ) u_cfg1_prescale (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg1_prescale_we),
    .wd     (cfg1_prescale_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg1.prescale.q ),

    // to register interface (read)
    .qs     (cfg1_prescale_qs)
  );


  //   F[step]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h1)
  ) u_cfg1_step (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg1_step_we),
    .wd     (cfg1_step_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg1.step.q ),

    // to register interface (read)
    .qs     (cfg1_step_qs)
  );


  // R[timer_v_lower1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_timer_v_lower1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (timer_v_lower1_we),
    .wd     (timer_v_lower1_wd),

    // from internal hardware
    .de     (hw2reg.timer_v_lower1.de),
    .d      (hw2reg.timer_v_lower1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.timer_v_lower1.q ),

    // to register interface (read)
    .qs     (timer_v_lower1_qs)
  );


  // R[timer_v_upper1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_timer_v_upper1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (timer_v_upper1_we),
    .wd     (timer_v_upper1_wd),

    // from internal hardware
    .de     (hw2reg.timer_v_upper1.de),
    .d      (hw2reg.timer_v_upper1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.timer_v_upper1.q ),

    // to register interface (read)
    .qs     (timer_v_upper1_qs)
  );


  // R[compare_lower1_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'hffffffff)
  ) u_compare_lower1_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (compare_lower1_0_we),
    .wd     (compare_lower1_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.compare_lower1_0.qe),
    .q      (reg2hw.compare_lower1_0.q ),

    // to register interface (read)
    .qs     (compare_lower1_0_qs)
  );


  // R[compare_upper1_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'hffffffff)
  ) u_compare_upper1_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (compare_upper1_0_we),
    .wd     (compare_upper1_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.compare_upper1_0.qe),
    .q      (reg2hw.compare_upper1_0.q ),

    // to register interface (read)
    .qs     (compare_upper1_0_qs)
  );



  // Subregister 0 of Multireg intr_enable1
  // R[intr_enable1]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable1_we),
    .wd     (intr_enable1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable1[0].q ),

    // to register interface (read)
    .qs     (intr_enable1_qs)
  );



  // Subregister 0 of Multireg intr_state1
  // R[intr_state1]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state1_we),
    .wd     (intr_state1_wd),

    // from internal hardware
    .de     (hw2reg.intr_state1[0].de),
    .d      (hw2reg.intr_state1[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state1[0].q ),

    // to register interface (read)
    .qs     (intr_state1_qs)
  );



  // Subregister 0 of Multireg intr_test1
  // R[intr_test1]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test1 (
    .re     (1'b0),
    .we     (intr_test1_we),
    .wd     (intr_test1_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test1[0].qe),
    .q      (reg2hw.intr_test1[0].q ),
    .qs     ()
  );




  logic [16:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == RV_TIMER_CTRL_OFFSET);
    addr_hit[ 1] = (reg_addr == RV_TIMER_CFG0_OFFSET);
    addr_hit[ 2] = (reg_addr == RV_TIMER_TIMER_V_LOWER0_OFFSET);
    addr_hit[ 3] = (reg_addr == RV_TIMER_TIMER_V_UPPER0_OFFSET);
    addr_hit[ 4] = (reg_addr == RV_TIMER_COMPARE_LOWER0_0_OFFSET);
    addr_hit[ 5] = (reg_addr == RV_TIMER_COMPARE_UPPER0_0_OFFSET);
    addr_hit[ 6] = (reg_addr == RV_TIMER_INTR_ENABLE0_OFFSET);
    addr_hit[ 7] = (reg_addr == RV_TIMER_INTR_STATE0_OFFSET);
    addr_hit[ 8] = (reg_addr == RV_TIMER_INTR_TEST0_OFFSET);
    addr_hit[ 9] = (reg_addr == RV_TIMER_CFG1_OFFSET);
    addr_hit[10] = (reg_addr == RV_TIMER_TIMER_V_LOWER1_OFFSET);
    addr_hit[11] = (reg_addr == RV_TIMER_TIMER_V_UPPER1_OFFSET);
    addr_hit[12] = (reg_addr == RV_TIMER_COMPARE_LOWER1_0_OFFSET);
    addr_hit[13] = (reg_addr == RV_TIMER_COMPARE_UPPER1_0_OFFSET);
    addr_hit[14] = (reg_addr == RV_TIMER_INTR_ENABLE1_OFFSET);
    addr_hit[15] = (reg_addr == RV_TIMER_INTR_STATE1_OFFSET);
    addr_hit[16] = (reg_addr == RV_TIMER_INTR_TEST1_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(RV_TIMER_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(RV_TIMER_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(RV_TIMER_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(RV_TIMER_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(RV_TIMER_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(RV_TIMER_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(RV_TIMER_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(RV_TIMER_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(RV_TIMER_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(RV_TIMER_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(RV_TIMER_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(RV_TIMER_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(RV_TIMER_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(RV_TIMER_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(RV_TIMER_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(RV_TIMER_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(RV_TIMER_PERMIT[16] & ~reg_be)))));
  end

  assign ctrl_active_0_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_active_0_wd = reg_wdata[0];

  assign ctrl_active_1_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_active_1_wd = reg_wdata[1];

  assign cfg0_prescale_we = addr_hit[1] & reg_we & !reg_error;
  assign cfg0_prescale_wd = reg_wdata[11:0];

  assign cfg0_step_we = addr_hit[1] & reg_we & !reg_error;
  assign cfg0_step_wd = reg_wdata[23:16];

  assign timer_v_lower0_we = addr_hit[2] & reg_we & !reg_error;
  assign timer_v_lower0_wd = reg_wdata[31:0];

  assign timer_v_upper0_we = addr_hit[3] & reg_we & !reg_error;
  assign timer_v_upper0_wd = reg_wdata[31:0];

  assign compare_lower0_0_we = addr_hit[4] & reg_we & !reg_error;
  assign compare_lower0_0_wd = reg_wdata[31:0];

  assign compare_upper0_0_we = addr_hit[5] & reg_we & !reg_error;
  assign compare_upper0_0_wd = reg_wdata[31:0];

  assign intr_enable0_we = addr_hit[6] & reg_we & !reg_error;
  assign intr_enable0_wd = reg_wdata[0];

  assign intr_state0_we = addr_hit[7] & reg_we & !reg_error;
  assign intr_state0_wd = reg_wdata[0];

  assign intr_test0_we = addr_hit[8] & reg_we & !reg_error;
  assign intr_test0_wd = reg_wdata[0];

  assign cfg1_prescale_we = addr_hit[9] & reg_we & !reg_error;
  assign cfg1_prescale_wd = reg_wdata[11:0];

  assign cfg1_step_we = addr_hit[9] & reg_we & !reg_error;
  assign cfg1_step_wd = reg_wdata[23:16];

  assign timer_v_lower1_we = addr_hit[10] & reg_we & !reg_error;
  assign timer_v_lower1_wd = reg_wdata[31:0];

  assign timer_v_upper1_we = addr_hit[11] & reg_we & !reg_error;
  assign timer_v_upper1_wd = reg_wdata[31:0];

  assign compare_lower1_0_we = addr_hit[12] & reg_we & !reg_error;
  assign compare_lower1_0_wd = reg_wdata[31:0];

  assign compare_upper1_0_we = addr_hit[13] & reg_we & !reg_error;
  assign compare_upper1_0_wd = reg_wdata[31:0];

  assign intr_enable1_we = addr_hit[14] & reg_we & !reg_error;
  assign intr_enable1_wd = reg_wdata[0];

  assign intr_state1_we = addr_hit[15] & reg_we & !reg_error;
  assign intr_state1_wd = reg_wdata[0];

  assign intr_test1_we = addr_hit[16] & reg_we & !reg_error;
  assign intr_test1_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = ctrl_active_0_qs;
        reg_rdata_next[1] = ctrl_active_1_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[11:0] = cfg0_prescale_qs;
        reg_rdata_next[23:16] = cfg0_step_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = timer_v_lower0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = timer_v_upper0_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = compare_lower0_0_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = compare_upper0_0_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = intr_enable0_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = intr_state0_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[9]: begin
        reg_rdata_next[11:0] = cfg1_prescale_qs;
        reg_rdata_next[23:16] = cfg1_step_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = timer_v_lower1_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = timer_v_upper1_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = compare_lower1_0_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = compare_upper1_0_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = intr_enable1_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = intr_state1_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
