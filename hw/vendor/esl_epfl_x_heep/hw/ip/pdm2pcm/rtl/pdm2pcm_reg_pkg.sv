// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package pdm2pcm_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 8;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic [15:0] q;} pdm2pcm_reg2hw_clkdividx_reg_t;

  typedef struct packed {
    struct packed {logic q;} enabl;
    struct packed {logic q;} clear;
  } pdm2pcm_reg2hw_control_reg_t;

  typedef struct packed {
    struct packed {logic q;} empty;
    struct packed {logic q;} reach;
    struct packed {logic q;} fulll;
  } pdm2pcm_reg2hw_status_reg_t;

  typedef struct packed {logic [5:0] q;} pdm2pcm_reg2hw_reachcount_reg_t;

  typedef struct packed {logic [3:0] q;} pdm2pcm_reg2hw_decimcic_reg_t;

  typedef struct packed {logic [4:0] q;} pdm2pcm_reg2hw_decimhb1_reg_t;

  typedef struct packed {logic [5:0] q;} pdm2pcm_reg2hw_decimhb2_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb1coef00_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb1coef01_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb1coef02_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb1coef03_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb2coef00_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb2coef01_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb2coef02_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb2coef03_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb2coef04_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb2coef05_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_hb2coef06_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef00_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef01_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef02_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef03_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef04_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef05_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef06_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef07_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef08_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef09_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef10_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef11_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef12_reg_t;

  typedef struct packed {logic [17:0] q;} pdm2pcm_reg2hw_fircoef13_reg_t;

  typedef struct packed {
    struct packed {
      logic d;
      logic de;
    } empty;
    struct packed {
      logic d;
      logic de;
    } reach;
    struct packed {
      logic d;
      logic de;
    } fulll;
  } pdm2pcm_hw2reg_status_reg_t;

  // Register -> HW type
  typedef struct packed {
    pdm2pcm_reg2hw_clkdividx_reg_t clkdividx;  // [491:476]
    pdm2pcm_reg2hw_control_reg_t control;  // [475:474]
    pdm2pcm_reg2hw_status_reg_t status;  // [473:471]
    pdm2pcm_reg2hw_reachcount_reg_t reachcount;  // [470:465]
    pdm2pcm_reg2hw_decimcic_reg_t decimcic;  // [464:461]
    pdm2pcm_reg2hw_decimhb1_reg_t decimhb1;  // [460:456]
    pdm2pcm_reg2hw_decimhb2_reg_t decimhb2;  // [455:450]
    pdm2pcm_reg2hw_hb1coef00_reg_t hb1coef00;  // [449:432]
    pdm2pcm_reg2hw_hb1coef01_reg_t hb1coef01;  // [431:414]
    pdm2pcm_reg2hw_hb1coef02_reg_t hb1coef02;  // [413:396]
    pdm2pcm_reg2hw_hb1coef03_reg_t hb1coef03;  // [395:378]
    pdm2pcm_reg2hw_hb2coef00_reg_t hb2coef00;  // [377:360]
    pdm2pcm_reg2hw_hb2coef01_reg_t hb2coef01;  // [359:342]
    pdm2pcm_reg2hw_hb2coef02_reg_t hb2coef02;  // [341:324]
    pdm2pcm_reg2hw_hb2coef03_reg_t hb2coef03;  // [323:306]
    pdm2pcm_reg2hw_hb2coef04_reg_t hb2coef04;  // [305:288]
    pdm2pcm_reg2hw_hb2coef05_reg_t hb2coef05;  // [287:270]
    pdm2pcm_reg2hw_hb2coef06_reg_t hb2coef06;  // [269:252]
    pdm2pcm_reg2hw_fircoef00_reg_t fircoef00;  // [251:234]
    pdm2pcm_reg2hw_fircoef01_reg_t fircoef01;  // [233:216]
    pdm2pcm_reg2hw_fircoef02_reg_t fircoef02;  // [215:198]
    pdm2pcm_reg2hw_fircoef03_reg_t fircoef03;  // [197:180]
    pdm2pcm_reg2hw_fircoef04_reg_t fircoef04;  // [179:162]
    pdm2pcm_reg2hw_fircoef05_reg_t fircoef05;  // [161:144]
    pdm2pcm_reg2hw_fircoef06_reg_t fircoef06;  // [143:126]
    pdm2pcm_reg2hw_fircoef07_reg_t fircoef07;  // [125:108]
    pdm2pcm_reg2hw_fircoef08_reg_t fircoef08;  // [107:90]
    pdm2pcm_reg2hw_fircoef09_reg_t fircoef09;  // [89:72]
    pdm2pcm_reg2hw_fircoef10_reg_t fircoef10;  // [71:54]
    pdm2pcm_reg2hw_fircoef11_reg_t fircoef11;  // [53:36]
    pdm2pcm_reg2hw_fircoef12_reg_t fircoef12;  // [35:18]
    pdm2pcm_reg2hw_fircoef13_reg_t fircoef13;  // [17:0]
  } pdm2pcm_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    pdm2pcm_hw2reg_status_reg_t status;  // [5:0]
  } pdm2pcm_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] PDM2PCM_CLKDIVIDX_OFFSET = 8'h0;
  parameter logic [BlockAw-1:0] PDM2PCM_CONTROL_OFFSET = 8'h4;
  parameter logic [BlockAw-1:0] PDM2PCM_STATUS_OFFSET = 8'h8;
  parameter logic [BlockAw-1:0] PDM2PCM_REACHCOUNT_OFFSET = 8'hc;
  parameter logic [BlockAw-1:0] PDM2PCM_DECIMCIC_OFFSET = 8'h10;
  parameter logic [BlockAw-1:0] PDM2PCM_DECIMHB1_OFFSET = 8'h14;
  parameter logic [BlockAw-1:0] PDM2PCM_DECIMHB2_OFFSET = 8'h18;
  parameter logic [BlockAw-1:0] PDM2PCM_HB1COEF00_OFFSET = 8'h1c;
  parameter logic [BlockAw-1:0] PDM2PCM_HB1COEF01_OFFSET = 8'h20;
  parameter logic [BlockAw-1:0] PDM2PCM_HB1COEF02_OFFSET = 8'h24;
  parameter logic [BlockAw-1:0] PDM2PCM_HB1COEF03_OFFSET = 8'h28;
  parameter logic [BlockAw-1:0] PDM2PCM_HB2COEF00_OFFSET = 8'h2c;
  parameter logic [BlockAw-1:0] PDM2PCM_HB2COEF01_OFFSET = 8'h30;
  parameter logic [BlockAw-1:0] PDM2PCM_HB2COEF02_OFFSET = 8'h34;
  parameter logic [BlockAw-1:0] PDM2PCM_HB2COEF03_OFFSET = 8'h38;
  parameter logic [BlockAw-1:0] PDM2PCM_HB2COEF04_OFFSET = 8'h3c;
  parameter logic [BlockAw-1:0] PDM2PCM_HB2COEF05_OFFSET = 8'h40;
  parameter logic [BlockAw-1:0] PDM2PCM_HB2COEF06_OFFSET = 8'h44;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF00_OFFSET = 8'h48;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF01_OFFSET = 8'h4c;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF02_OFFSET = 8'h50;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF03_OFFSET = 8'h54;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF04_OFFSET = 8'h58;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF05_OFFSET = 8'h5c;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF06_OFFSET = 8'h60;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF07_OFFSET = 8'h64;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF08_OFFSET = 8'h68;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF09_OFFSET = 8'h6c;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF10_OFFSET = 8'h70;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF11_OFFSET = 8'h74;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF12_OFFSET = 8'h78;
  parameter logic [BlockAw-1:0] PDM2PCM_FIRCOEF13_OFFSET = 8'h7c;

  // Window parameters
  parameter logic [BlockAw-1:0] PDM2PCM_RXDATA_OFFSET = 8'h80;
  parameter int unsigned PDM2PCM_RXDATA_SIZE = 'h4;

  // Register index
  typedef enum int {
    PDM2PCM_CLKDIVIDX,
    PDM2PCM_CONTROL,
    PDM2PCM_STATUS,
    PDM2PCM_REACHCOUNT,
    PDM2PCM_DECIMCIC,
    PDM2PCM_DECIMHB1,
    PDM2PCM_DECIMHB2,
    PDM2PCM_HB1COEF00,
    PDM2PCM_HB1COEF01,
    PDM2PCM_HB1COEF02,
    PDM2PCM_HB1COEF03,
    PDM2PCM_HB2COEF00,
    PDM2PCM_HB2COEF01,
    PDM2PCM_HB2COEF02,
    PDM2PCM_HB2COEF03,
    PDM2PCM_HB2COEF04,
    PDM2PCM_HB2COEF05,
    PDM2PCM_HB2COEF06,
    PDM2PCM_FIRCOEF00,
    PDM2PCM_FIRCOEF01,
    PDM2PCM_FIRCOEF02,
    PDM2PCM_FIRCOEF03,
    PDM2PCM_FIRCOEF04,
    PDM2PCM_FIRCOEF05,
    PDM2PCM_FIRCOEF06,
    PDM2PCM_FIRCOEF07,
    PDM2PCM_FIRCOEF08,
    PDM2PCM_FIRCOEF09,
    PDM2PCM_FIRCOEF10,
    PDM2PCM_FIRCOEF11,
    PDM2PCM_FIRCOEF12,
    PDM2PCM_FIRCOEF13
  } pdm2pcm_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PDM2PCM_PERMIT[32] = '{
      4'b0011,  // index[ 0] PDM2PCM_CLKDIVIDX
      4'b0001,  // index[ 1] PDM2PCM_CONTROL
      4'b0001,  // index[ 2] PDM2PCM_STATUS
      4'b0001,  // index[ 3] PDM2PCM_REACHCOUNT
      4'b0001,  // index[ 4] PDM2PCM_DECIMCIC
      4'b0001,  // index[ 5] PDM2PCM_DECIMHB1
      4'b0001,  // index[ 6] PDM2PCM_DECIMHB2
      4'b0111,  // index[ 7] PDM2PCM_HB1COEF00
      4'b0111,  // index[ 8] PDM2PCM_HB1COEF01
      4'b0111,  // index[ 9] PDM2PCM_HB1COEF02
      4'b0111,  // index[10] PDM2PCM_HB1COEF03
      4'b0111,  // index[11] PDM2PCM_HB2COEF00
      4'b0111,  // index[12] PDM2PCM_HB2COEF01
      4'b0111,  // index[13] PDM2PCM_HB2COEF02
      4'b0111,  // index[14] PDM2PCM_HB2COEF03
      4'b0111,  // index[15] PDM2PCM_HB2COEF04
      4'b0111,  // index[16] PDM2PCM_HB2COEF05
      4'b0111,  // index[17] PDM2PCM_HB2COEF06
      4'b0111,  // index[18] PDM2PCM_FIRCOEF00
      4'b0111,  // index[19] PDM2PCM_FIRCOEF01
      4'b0111,  // index[20] PDM2PCM_FIRCOEF02
      4'b0111,  // index[21] PDM2PCM_FIRCOEF03
      4'b0111,  // index[22] PDM2PCM_FIRCOEF04
      4'b0111,  // index[23] PDM2PCM_FIRCOEF05
      4'b0111,  // index[24] PDM2PCM_FIRCOEF06
      4'b0111,  // index[25] PDM2PCM_FIRCOEF07
      4'b0111,  // index[26] PDM2PCM_FIRCOEF08
      4'b0111,  // index[27] PDM2PCM_FIRCOEF09
      4'b0111,  // index[28] PDM2PCM_FIRCOEF10
      4'b0111,  // index[29] PDM2PCM_FIRCOEF11
      4'b0111,  // index[30] PDM2PCM_FIRCOEF12
      4'b0111  // index[31] PDM2PCM_FIRCOEF13
  };

endpackage

