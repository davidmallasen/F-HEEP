diff --git a/iceprog/iceprog.c b/iceprog/iceprog.c
index 8ee6443..0413697 100644
--- a/iceprog/iceprog.c
+++ b/iceprog/iceprog.c
@@ -480,6 +480,34 @@ static void flash_enable_quad()
 	fprintf(stderr, "SR2: %08x\n", data[1]);
 }
 
+static void flash_disable_quad()
+{
+	fprintf(stderr, "Disabling Quad operation...\n");
+
+	// Allow write
+	flash_write_enable();
+
+	// Write Status Register 2 <- 0x00
+	uint8_t data[2] = { FC_WSR2, 0x00 };
+	flash_chip_select();
+	mpsse_xfer_spi(data, 2);
+	flash_chip_deselect();
+
+	flash_wait();
+
+	// Read Status Register 1
+	data[0] = FC_RSR2;
+
+	flash_chip_select();
+	mpsse_xfer_spi(data, 2);
+	flash_chip_deselect();
+
+	if ((data[1] & 0x02) != 0x00)
+		fprintf(stderr, "failed to set QE=0, SR2 now equal to 0x%02x (expected 0x%02x)\n", data[1], data[1] | 0x00);
+
+	fprintf(stderr, "SR2: %08x\n", data[1]);
+}
+
 // ---------------------------------------------------------
 // iceprog implementation
 // ---------------------------------------------------------
@@ -506,11 +534,13 @@ static void help(const char *progname)
 	fprintf(stderr, "  -s                    slow SPI (50 kHz instead of 6 MHz)\n");
 	fprintf(stderr, "  -k                    keep flash in powered up state (i.e. skip power down command)\n");
 	fprintf(stderr, "  -v                    verbose output\n");
+	fprintf(stderr, "  -T                    Pause before writing/reading\n");
 	fprintf(stderr, "  -i [4,32,64]          select erase block size [default: 64k]\n");
 	fprintf(stderr, "\n");
 	fprintf(stderr, "Mode of operation:\n");
 	fprintf(stderr, "  [default]             write file contents to flash, then verify\n");
 	fprintf(stderr, "  -X                    write file contents to flash only\n");	
+	fprintf(stderr, "  -a <size in bytes>    provides file size of the file to program\n");
 	fprintf(stderr, "  -r                    read first 256 kB from flash and write to file\n");
 	fprintf(stderr, "  -R <size in bytes>    read the specified number of bytes from flash\n");
 	fprintf(stderr, "                          (append 'k' to the argument for size in kilobytes,\n");
@@ -578,6 +608,7 @@ int main(int argc, char **argv)
 	bool bulk_erase = false;
 	bool dont_erase = false;
 	bool prog_sram = false;
+	bool filesize_mode = false;
 	int  test_mode = 0;
 	bool slow_clock = false;
 	bool disable_protect = false;
@@ -587,6 +618,9 @@ int main(int argc, char **argv)
 	const char *devstr = NULL;
 	int ifnum = 0;
 
+	bool stop_spi = false;
+	long file_size = -1;
+
 #ifdef _WIN32
 	_setmode(_fileno(stdin), _O_BINARY);
 	_setmode(_fileno(stdout), _O_BINARY);
@@ -600,7 +634,7 @@ int main(int argc, char **argv)
 	/* Decode command line parameters */
 	int opt;
 	char *endptr;
-	while ((opt = getopt_long(argc, argv, "d:i:I:rR:e:o:cbnStQvspXk", long_options, NULL)) != -1) {
+	while ((opt = getopt_long(argc, argv, "d:i:I:rR:e:o:a:cbnStQvTspXk", long_options, NULL)) != -1) {
 		switch (opt) {
 		case 'd': /* device string */
 			devstr = optarg;
@@ -648,6 +682,20 @@ int main(int argc, char **argv)
 				return EXIT_FAILURE;
 			}
 			break;
+		case 'a': /* filesize used to program flash */
+			filesize_mode = true;
+			file_size = strtol(optarg, &endptr, 0);
+			if (*endptr == '\0')
+				/* ok */;
+			else if (!strcmp(endptr, "k"))
+				file_size *= 1024;
+			else if (!strcmp(endptr, "M"))
+				file_size *= 1024 * 1024;
+			else {
+				fprintf(stderr, "%s: `%s' is not a valid size\n", my_name, optarg);
+				return EXIT_FAILURE;
+			}
+			break;
 		case 'e': /* Erase blocks as if we were writing n bytes */
 			erase_mode = true;
 			erase_size = strtol(optarg, &endptr, 0);
@@ -696,6 +744,9 @@ int main(int argc, char **argv)
 		case 'v': /* provide verbose output */
 			verbose = true;
 			break;
+		case 'T': /* Stop at writing / reading */
+			stop_spi = true;
+			break;
 		case 's': /* use slow SPI clock */
 			slow_clock = true;
 			break;
@@ -778,7 +829,7 @@ int main(int argc, char **argv)
 	   so we can fail before initializing the hardware */
 
 	FILE *f = NULL;
-	long file_size = -1;
+
 
 	if (test_mode) {
 		/* nop */;
@@ -809,7 +860,7 @@ int main(int argc, char **argv)
 		   named pipe, or contrarily, the standard input may be an
 		   ordinary file. */
 
-		if (!prog_sram && !check_mode) {
+		if (!prog_sram && !check_mode && !filesize_mode) {
 			if (fseek(f, 0L, SEEK_END) != -1) {
 				file_size = ftell(f);
 				if (file_size == -1) {
@@ -943,6 +994,8 @@ int main(int argc, char **argv)
 		flash_reset();
 		flash_power_up();
 
+		flash_disable_quad();
+
 		flash_read_id();
 
 
@@ -968,7 +1021,10 @@ int main(int argc, char **argv)
 				}
 				else
 				{
-					fprintf(stderr, "file size: %ld\n", file_size);
+					if(filesize_mode)
+						fprintf(stderr, "provided file size: %ld\n", file_size);
+					else
+						fprintf(stderr, "file size: %ld\n", file_size);
 
 					int block_size = erase_block_size << 10;
 					int block_mask = block_size - 1;
@@ -997,22 +1053,59 @@ int main(int argc, char **argv)
 				}
 			}
 
+			if(stop_spi){
+				/* To debug writing of values with the logic analyzer*/
+				printf("Stoped before writting. Press ENTER to continue\n");
+				getchar();
+			}
+
 			if (!erase_mode)
 			{
 				fprintf(stderr, "programming..\n");
 
-				for (int rc, addr = 0; true; addr += rc) {
-					uint8_t buffer[256];
-					int page_size = 256 - (rw_offset + addr) % 256;
-					rc = fread(buffer, 1, page_size, f);
-					if (rc <= 0)
+				char * line_buffer = NULL;
+				int rc, addr = 0;
+				size_t len = 0;
+				uint8_t buffer[256];
+				int count = 0;
+				while (true) {
+					rc = getline(&line_buffer, &len, f);
+					if (rc <= 0){
+						if(count > 0){
+							flash_write_enable();
+							flash_prog(addr, buffer, count);
+							flash_wait();
+							count = 0;
+						}
 						break;
+					}
+					if(line_buffer[0] == '@'){
+						if(count > 0){
+							flash_write_enable();
+							flash_prog(addr, buffer, count);
+							flash_wait();
+							count = 0;
+						}
+						sscanf(line_buffer + 1 , "%8x" , &addr);
+					}else{
+						int c = 0;
+						while( (c*3+3) < rc){
+							sscanf(line_buffer + c*3 , "%2hhx " , buffer + count);
+							count++;
+							if((addr + count)%256 == 0){
+								flash_write_enable();
+								flash_prog(addr, buffer, count);
+								flash_wait();
+								addr += count;
+								count = 0;
+							}
+							c++;
+						}
+					}
 					fprintf(stderr, "                      \r");
-					fprintf(stderr, "addr 0x%06X %3ld%%\r", rw_offset + addr, 100 * addr / file_size);
-					flash_write_enable();
-					flash_prog(rw_offset + addr, buffer, rc);
-					flash_wait();
+					fprintf(stderr, "addr 0x%06X %3ld%%\r", addr, 100 * addr / file_size);
 				}
+				free(line_buffer);
 				fprintf(stderr, "                      \r");
 				fprintf(stderr, "done.\n");
 
@@ -1026,7 +1119,13 @@ int main(int argc, char **argv)
 		// ---------------------------------------------------------
 
 		if (read_mode) {
-			fprintf(stderr, "reading..\n");
+			if(stop_spi){
+				/* Just to debug reading of values with the logic analyzer*/
+				printf("Stoped before writting. Press ENTER to continue\n");
+				getchar();
+			}
+
+			fprintf(stderr, "reading..");
 			for (int addr = 0; addr < read_size; addr += 256) {
 				uint8_t buffer[256];
 				fprintf(stderr, "                      \r");
@@ -1037,23 +1136,40 @@ int main(int argc, char **argv)
 			fprintf(stderr, "                      \r");
 			fprintf(stderr, "done.\n");
 		} else if (!erase_mode && !disable_verify) {
+
 			fprintf(stderr, "reading..\n");
-			for (int addr = 0; true; addr += 256) {
-				uint8_t buffer_flash[256], buffer_file[256];
-				int rc = fread(buffer_file, 1, 256, f);
+
+			char * line_buffer = NULL;
+			int rc, addr = 0;
+			size_t len = 0;
+			uint8_t buffer_flash[256], buffer_file[256];
+			while (true) {
+				rc = getline(&line_buffer, &len, f);
 				if (rc <= 0)
 					break;
-				fprintf(stderr, "                      \r");
-				fprintf(stderr, "addr 0x%06X %3ld%%\r", rw_offset + addr, 100 * addr / file_size);
-				flash_read(rw_offset + addr, buffer_flash, rc);
-				if (memcmp(buffer_file, buffer_flash, rc)) {
-					fprintf(stderr, "Found difference between flash and file!\n");
-					mpsse_error(3);
+				if(line_buffer[0] == '@'){
+					sscanf(line_buffer + 1 , "%8x" , &addr);
+				}else{
+					int c = 0;
+					while( (c*3+3) < rc){
+						sscanf(line_buffer + c*3 , "%2hhx " , buffer_file + c);
+						c++;
+					}
+					flash_read(addr, buffer_flash, c);
+					if (memcmp(buffer_file, buffer_flash, c)) {
+						fprintf(stderr, "Found difference between flash and file!\n");
+						free(line_buffer);
+						mpsse_error(3);
+					}
+					addr += c;
 				}
+				fprintf(stderr, "                      \r");
+				fprintf(stderr, "addr 0x%06X %3ld%%\r", addr, 100 * addr / file_size);
 			}
-
+			free(line_buffer);
 			fprintf(stderr, "                      \r");
 			fprintf(stderr, "VERIFY OK\n");
+
 		}
 
 
diff --git a/iceprog/mpsse.c b/iceprog/mpsse.c
index 80d462f..71c9ee6 100644
--- a/iceprog/mpsse.c
+++ b/iceprog/mpsse.c
@@ -309,6 +309,12 @@ void mpsse_init(int ifnum, const char *devstr, bool slow_clock)
 
 	mpsse_ftdic_open = true;
 
+	/* Reset the BITMODE. Set all pins to output. */
+	if (ftdi_set_bitmode(&mpsse_ftdic, 0x00, BITMODE_RESET) < 0) {
+		fprintf(stderr, "Failed to set BITMODE_RESET on iCE FTDI USB device.\n");
+		mpsse_error(2);
+	}
+
 	if (ftdi_usb_reset(&mpsse_ftdic)) {
 		fprintf(stderr, "Failed to reset iCE FTDI USB device.\n");
 		mpsse_error(2);
@@ -358,6 +364,9 @@ void mpsse_close(void)
 {
 	ftdi_set_latency_timer(&mpsse_ftdic, mpsse_ftdi_latency);
 	ftdi_disable_bitbang(&mpsse_ftdic);
+
+	ftdi_set_bitmode(&mpsse_ftdic, 0x00,  BITMODE_BITBANG);
+
 	ftdi_usb_close(&mpsse_ftdic);
 	ftdi_deinit(&mpsse_ftdic);
 }
\ No newline at end of file
