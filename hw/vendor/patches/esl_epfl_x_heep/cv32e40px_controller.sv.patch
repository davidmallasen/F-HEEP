diff --git a/hw/vendor/esl_epfl_cv32e40px/rtl/cv32e40px_controller.sv b/hw/vendor/esl_epfl_cv32e40px/rtl/cv32e40px_controller.sv
index e9807a3..19e2106 100644
--- a/hw/vendor/esl_epfl_cv32e40px/rtl/cv32e40px_controller.sv
+++ b/hw/vendor/esl_epfl_cv32e40px/rtl/cv32e40px_controller.sv
@@ -110,6 +110,10 @@ module cv32e40px_controller import cv32e40px_pkg::*;
 
   output logic        apu_stall_o,
 
+  // X-IF signals
+  output logic        x_branch_or_async_taken_o,
+  output logic        x_control_illegal_reset_o,
+
   // jump/branch signals
   input  logic        branch_taken_ex_i,          // branch taken signal from EX ALU
   input  logic [1:0]  ctrl_transfer_insn_in_id_i,               // jump is being calculated in ALU
@@ -240,7 +244,7 @@ module cv32e40px_controller import cv32e40px_pkg::*;
   logic debug_req_q;
   logic debug_req_pending;
 
-  // qualify wfi vs nosleep locally 
+  // qualify wfi vs nosleep locally
   logic wfi_active;
 
 
@@ -327,6 +331,9 @@ module cv32e40px_controller import cv32e40px_pkg::*;
     // ensures that the target is kept constant even if pc_id is no more HWLP_END
     hwlp_targ_addr_o        = ((hwlp_start1_leq_pc && hwlp_end1_geq_pc) && !(hwlp_start0_leq_pc && hwlp_end0_geq_pc)) ? hwlp_start_addr_i[1] : hwlp_start_addr_i[0];
 
+    x_branch_or_async_taken_o = 1'b0;
+    x_control_illegal_reset_o = 1'b0;
+
     unique case (ctrl_fsm_cs)
       // We were just reset, wait for fetch_enable
       RESET:
@@ -438,6 +445,8 @@ module cv32e40px_controller import cv32e40px_pkg::*;
             pc_mux_o      = PC_BRANCH;
             pc_set_o      = 1'b1;
 
+            x_branch_or_async_taken_o = 1'b1;
+
             // if we want to debug, flush the pipeline
             // the current_pc_if will take the value of the next instruction to
             // be executed (NPC)
@@ -496,6 +505,7 @@ module cv32e40px_controller import cv32e40px_pkg::*;
                 halt_id_o         = 1'b1;
                 ctrl_fsm_ns       = DBG_FLUSH;
                 debug_req_entry_n = 1'b1;
+                x_branch_or_async_taken_o = 1'b1;
               end
             else if (irq_req_ctrl_i && ~debug_mode_q)
               begin
@@ -511,6 +521,7 @@ module cv32e40px_controller import cv32e40px_pkg::*;
                 exc_pc_mux_o      = EXC_PC_IRQ;
                 exc_cause_o       = irq_id_ctrl_i;
                 csr_irq_sec_o     = irq_sec_ctrl_i;
+                x_branch_or_async_taken_o = 1'b1;
 
                 // IRQ interface
                 irq_ack_o         = 1'b1;
@@ -534,6 +545,7 @@ module cv32e40px_controller import cv32e40px_pkg::*;
                   halt_id_o         = 1'b0;
                   ctrl_fsm_ns       = id_ready_i ? FLUSH_EX : DECODE;
                   illegal_insn_n    = 1'b1;
+                  x_control_illegal_reset_o = 1'b1;
 
                 end else begin
 
@@ -679,6 +691,7 @@ module cv32e40px_controller import cv32e40px_pkg::*;
                         illegal_insn_i | ecall_insn_i:
                         begin
                             ctrl_fsm_ns = FLUSH_EX;
+                            x_control_illegal_reset_o = illegal_insn_i;
                         end
 
                         (~ebrk_force_debug_mode & ebrk_insn_i):
@@ -728,6 +741,7 @@ module cv32e40px_controller import cv32e40px_pkg::*;
                 halt_id_o         = 1'b1;
                 ctrl_fsm_ns       = DBG_FLUSH;
                 debug_req_entry_n = 1'b1;
+                x_branch_or_async_taken_o = 1'b1;
              end
             else if (irq_req_ctrl_i && ~debug_mode_q)
               begin
@@ -743,6 +757,7 @@ module cv32e40px_controller import cv32e40px_pkg::*;
                 exc_pc_mux_o      = EXC_PC_IRQ;
                 exc_cause_o       = irq_id_ctrl_i;
                 csr_irq_sec_o     = irq_sec_ctrl_i;
+                x_branch_or_async_taken_o = 1'b1;
 
                 // IRQ interface
                 irq_ack_o         = 1'b1;
@@ -768,6 +783,7 @@ module cv32e40px_controller import cv32e40px_pkg::*;
                   halt_id_o         = 1'b1;
                   ctrl_fsm_ns       = FLUSH_EX;
                   illegal_insn_n    = 1'b1;
+                  x_control_illegal_reset_o = 1'b1;
 
                 end else begin
 
@@ -865,6 +881,7 @@ module cv32e40px_controller import cv32e40px_pkg::*;
                         illegal_insn_i | ecall_insn_i:
                         begin
                             ctrl_fsm_ns = FLUSH_EX;
+                            x_control_illegal_reset_o = illegal_insn_i;
                         end
 
                         (~ebrk_force_debug_mode & ebrk_insn_i):
@@ -1207,7 +1224,7 @@ module cv32e40px_controller import cv32e40px_pkg::*;
         exc_pc_mux_o      = EXC_PC_DBD;
         csr_save_cause_o  = 1'b1;
         debug_csr_save_o  = 1'b1;
-        if (debug_force_wakeup_q) 
+        if (debug_force_wakeup_q)
             debug_cause_o = DBG_CAUSE_HALTREQ;
         else if (debug_single_step_i)
             debug_cause_o = DBG_CAUSE_STEP; // pri 0
@@ -1479,7 +1496,7 @@ endgenerate
 
   assign debug_wfi_no_sleep_o = debug_mode_q || debug_req_pending || debug_single_step_i || trigger_match_i || COREV_CLUSTER;
 
-  // Gate off wfi 
+  // Gate off wfi
   assign wfi_active = wfi_i & ~debug_wfi_no_sleep_o;
 
   // sticky version of debug_req (must be on clk_ungated_i such that incoming pulse before core is enabled is not missed)
@@ -1600,7 +1617,7 @@ endgenerate
 
   // Ensure DBG_TAKEN_IF can only be enterred if in single step mode or woken
   // up from sleep by debug_req_i
-         
+
   a_single_step_dbg_taken_if : assert property (@(posedge clk)  disable iff (!rst_n)  (ctrl_fsm_ns==DBG_TAKEN_IF) |-> ((~debug_mode_q && debug_single_step_i) || debug_force_wakeup_n));
 
   // Ensure DBG_FLUSH state is only one cycle. This implies that cause is either trigger, debug_req_entry, or ebreak
